{"aid": "40144890", "title": "How to Selfishly Design a System", "url": "https://badsoftwareadvice.substack.com/p/how-to-selfishly-design-a-system", "domain": "badsoftwareadvice.substack.com", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-24 14:36:12", "comments": 0, "source_title": "How to selfishly design a system", "source_text": "How to selfishly design a system - by David Tate\n\n# Bad Software Advice\n\nShare this post\n\n#### How to selfishly design a system\n\nbadsoftwareadvice.substack.com\n\n#### Discover more from Bad Software Advice\n\nLearn from the wrong\n\nContinue reading\n\nSign in\n\n# How to selfishly design a system\n\n### Your primary constraint is your pride\n\nDavid Tate\n\nApr 22, 2024\n\nShare this post\n\n#### How to selfishly design a system\n\nbadsoftwareadvice.substack.com\n\nShare\n\nThere are a lot of ways to design a system. Gathering input. Talking to\ncustomers. Looking at other systems with similar requirements. Figuring out\nthe requirements. Guessing what the requirements will be. Waiting for the\nrequirements to arrive. Sitting down and thinking about what the requirements\ncould be. Drawing pictures. Wondering what your high school art teacher would\nthink of the pictures.\n\n###\n\nValues\n\nEventually, you need to stop waiting on input and make something. Designing a\nsystem is an optimization exercise with multiple factors. You want to create a\nsystem that can be built now, will run in the future, and doesn\u2019t cost too\nmuch to operate. The system should be able to be changed. It is a very complex\nassignment; it is easy to overthink it.\n\nIt helps to have some general guiding values that help narrow down the\npossibilities.\n\nTraditionally, the values that drive a system are descriptions of its\nproperties once it is built. These values have cool names and are often used\nin sentences with cool words like pillar and architecture1. I\u2019ve heard these\nreferred to as \u201cthe abilities,\u201d so I\u2019ve put this postfix on each one to show\nhow bad this nickname is.\n\n  * Reliability: how often you get the right answer when you ask the system a question\n\n  * Availability2: how often the system is able to answer when you ask\n\n  * Scalability: how much the first two change after you run Superbowl ads\n\n  * Sustainability: how often hippies are protesting outside your building\n\n  * Operability: how easy it is to go the opera and not get paged\n\n  * Simplicity: how few of these -lity you mention when describing your system\n\n  * Maintainability: how often people resign after failing to convince you to rewrite. Also called pliability, extensibility, evolvability, plasticity3\n\n  * Securityability : how often you have to say risk mitigation to someone more dressed up than you\n\n  * Observability: a complex measure of your cloud operating budget\n\n  * Operational Efficiencyability: how many non-engineers it takes to keep everything running\n\n  * Litylity: how easy it is to add -lity to a word and it still makes sense\n\n####\n\nTradeoffs\n\nThe nature of this game is that these items are tradeoffs. You have to weigh\none thing against another. Often, a highly available system is very expensive\nand difficult to operate. A highly secure system is harder to maintain, less\nobservable, and likely not simple. You are creating trouble where you want\ntrouble; you choose what things you want to be easy, hard, or possible.\n\nThe person who made this chart is on my prayer list\n\n###\n\nPersonal Values\n\nWriters only write autobiographies, even if they are heavily cloaked. In the\nsame way, this content management system for dog moms you are building also\nreflects who you are and what you value.\n\nMaybe you think that new things are almost always better than old things.\n\nMaybe you value safety in the workplace and leave risk-taking to your\ninvestments.\n\nMaybe you want to impress people, or not draw attention.\n\nMaybe you believe cat dads are more important to society than dog moms.\n\nThese values will emerge in your system design, so you might as well optimize\nfor those that will help you personally. Designing a system that tries to\naccount for all the system ilities while also guessing at the future is no way\nto live life. It's stressful and hard and doesn\u2019t make you feel good.\n\nSpeaking of you - you need to look out for #1. Yourself. What values do you\nhave?\n\nYou should build a system based on YOUR personal values.\n\nBelow are some selfish values to use when designing a system:\n\n####\n\nEnviability\n\nYour system design needs to be cool. It needs to invoke envy in those around\nyou. Maybe it\u2019s your boss, the Architect Of The Original System, or the\nCouncil of Certified Solutions Architect Advisory Designers Who Are Quiet and\nJudge You. Maybe it is just the person who reviewed your last pull request. It\nalso needs to impress your regular coworkers, so much so that they stare out\nthe window and try to calm their envy. They wish they weren\u2019t writing a React\napp to track tool vendor usage for internal users, but that they were instead\non the team rewriting the tool vendor usage for internal users in a different\njavascript framework that nobody will remember 50 years from now.\n\n####\n\nMarketability\n\nDesigning this system will go on your resume. Will it make for a good blog\npost, or LinkedIn humble-brag? How easy will it be to discuss in a future job\ninterview? If it uses boring technology, then you will be a boring job\ncandidate. If it pretty much works, you will not have any cool stories. Let\nyour resume drive the design.\n\n####\n\nFragility\n\nTo be anti-fragile, you first have to be fragile. It\u2019s like winning the Most\nImproved Player award in the NBA - you have a crappy season, then a good one.\nIf your system starts as fresh garbage and requires your constant\nintervention, you become critical to the project and keep your job. Ship a\nworking prototype and then evolve it into something real.\n\n####\n\nCivility\n\nWhat architecture does your boss, VP, or CTO like? What pet project does an\ninfluential Enterprise Solutions Architecture Council of Wisdom member like?\nPick one to have good manners.\n\n####\n\nAdorability\n\nHow fun is writing a prototype for this new system? How fun will the first 3-6\nmonths of the project be? How novel and, therefore, interesting will this\nproject be? How cute is the code in your examples? Don\u2019t worry about 3 or 6\nmonths from now, how interesting is it now?\n\n####\n\nDeniability\n\nYou could get into trouble if you design a system that causes a snafu or\nfiasco4 . You might ultimately lose your job and have to design systems\nsomewhere else for slightly more money. Can you weakly defend your choices\nwhile also denying them? Directly denying that you were involved in the\nconstruction of the system is tough, because of all those pretty pictures you\ndrew. But a defend & deny strategy works:\n\n  * Use a large vendor: \u201cNobody ever got fired for using IBM\u201d. Use Microsoft, AWS, Google, and others everyone seems to have heard of.\n\n  * Teamwork makes the dream work: remember that tens of other people likely loved your design too. Make sure to get their approval, preferably on video, while they discuss current events.\n\n  * Communicate that your vision was not followed: \u201cThe programmers didn\u2019t build it to specification. Look on Page 7: System will have no known defects at launch\u201d\n\n  * Spin: \u201cwow imagine how much worse this would be if we had done TRW\u201d\n\nBad Software Advice is a reader-supported publication. To receive new posts\nand support my work, consider becoming a free or paid subscriber.\n\n1\n\nWe are obsessed with physical construction as a metaphor. Eventually,\nstanchion (an upright shaft that supports an overhead structure) will be used\nto describe code written by someone who is now a VP that everyone is afraid to\ntouch.\n\n2\n\nCoaches say, \u2018Your greatest ability is your availability.\u2019 This does not prove\ntrue for systems. Imagine if TurboTax had 100% availability but got everyone\u2019s\ntaxes wrong.\n\n3\n\nThat is a lot of words for the concept of something being easy to change. Why\nwould system designers have so many words for something?\n\n4\n\nsnafu: a situation marked by errors and confusion.\n\nfiasco: a thing that is a complete failure, especially in a ludicrous or\nhumiliating way.\n\nIf you lose your balance and step in a toilet while going to the bathroom -\nthat\u2019s a snafu. If you somehow step in a toilet during your wedding vows -\nthat\u2019s a fiasco.\n\n### Subscribe to Bad Software Advice\n\nBy David Tate\n\nLearn from the wrong\n\nShare this post\n\n#### How to selfishly design a system\n\nbadsoftwareadvice.substack.com\n\nShare\n\nComments\n\nReady for more?\n\n\u00a9 2024 David Tate\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
