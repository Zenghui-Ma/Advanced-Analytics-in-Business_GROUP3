{"aid": "40145030", "title": "Laravel and Htmx Error Handling", "url": "https://yecoder.com/laravel-and-htmx-error-handling", "domain": "yecoder.com", "votes": 1, "user": "543310", "posted_at": "2024-04-24 14:47:58", "comments": 0, "source_title": "Laravel and HTMX Error Handling", "source_text": "Laravel and HTMX Error Handling\n\n# Laravel and HTMX Error Handling\n\nSaeed Vaziry\n\n\u00b7Apr 24, 2024\u00b7\n\n2 min read\n\nIt's been a while now I am using HTMX more often especially after I migrated\nVitoDeploy to HTMX!\n\nHere I will show you how you can nicely handle the server errors when using\nHTMX for your HTTP calls in your frontend.\n\n## The Problem\n\nWhen you're using HTMX and making HTTP requests to the app server, It can\nthrow errors and exceptions and you will be only able to see these errors on\nthe Network tab of your browser. But we need something to pop up immediately\non the browser.\n\n## The way that HTMX works\n\nWell, like other Javascript HTTP clients, it sends HTTP requests to the server\nbut it has the capability that you can listen for events after each request\nand see if a response was successful or it failed with some HTTP responses.\n\nHTMX has multiple events but here I will use htmx:beforeOnLoad.\n\n## The Idea\n\nSo the idea is to create a Blade component and a modal that will show up when\nany HTMX call ends up with an error!\n\n## Let's implement some code!\n\nOK. Create a component called htmx-error-handler:\n\n    \n    \n    php artisan make:component htmx-error-handler --view\n\nPut the following code inside your component:\n\n    \n    \n    <div> <style> #htmx-error-modal-backdrop { display: none; /* Hide by default */ position: fixed; z-index: 9999; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */ } #htmx-error-modal-content { background-color: #fefefe; margin: 50px auto; /* 200px from the top and centered */ padding: 0; width: calc(100% - 100px); /* Full width minus the margin */ height: calc(100% - 100px); /* Full height minus the margin */ position: relative; } #htmx-error-modal-content iframe { width: 100%; height: 100%; border: none; } </style> <div id=\"htmx-error-modal-backdrop\" onclick=\"closeHtmxErrorModal()\"> <div id=\"htmx-error-modal-content\" onclick=\"event.stopPropagation()\"></div> </div> <script> function closeHtmxErrorModal() { document.getElementById('htmx-error-modal-backdrop').style.display = 'none'; document.getElementById('htmx-error-modal-content').innerHTML = ''; } document.body.addEventListener('htmx:beforeOnLoad', function (evt) { if (evt.detail.xhr.status >= 400) { let iframe = document.createElement('iframe'); document.getElementById('htmx-error-modal-content').appendChild(iframe); iframe.src = 'about:blank'; iframe.contentWindow.document.open(); iframe.contentWindow.document.write(evt.detail.xhr.responseText); iframe.contentWindow.document.close(); document.getElementById('htmx-error-modal-backdrop').style.display = 'block'; } }); </script> </div>\n\nI am sure you don't want me to explain how this is working so I skip :))\n\nNow you need to inject the component into your main layout:\n\n    \n    \n    <html> ... <body> ... <x-htmx-error-handler /> ... </body> </html>\n\nAlright, DONE!\n\n## Subscribe to my newsletter\n\nRead articles from Yecoder directly inside your inbox. Subscribe to the\nnewsletter, and don't miss out.\n\nLaravelhtmxPHPHTMLCSSblade\n\n### Written by\n\n# Saeed Vaziry\n\nMy name is Saeed, and I am a Software Engineer. Currently maintaining\nfreeipapi.com and vitodeploy.com\n\nMy name is Saeed, and I am a Software Engineer. Currently maintaining\nfreeipapi.com and vitodeploy.com\n\n### More articles\n\nSaeed Vaziry\n\n# Changing my Music taste\n\nUntil two years ago I was listening to any kind of music very normally :)\nuntil I got introduced to ...\n\nSaeed Vaziry\n\n# Attack or massive usage?\n\nA few days ago I noticed a CPU peak on FreeIPAPI's application servers. I\nQuickly checked Cloudflare...\n\nSaeed Vaziry\n\n# Why use Laravel Breeze to set up your authentication?\n\nLaravel Breeze Unlike other Auth libraries, Breeze is a starter kit. This\nmeans after installing it ...\n\n\u00a92024 Yecoder\n\nArchive\u00b7Privacy policy\u00b7Terms\n\nWrite on Hashnode\n\nPowered by Hashnode - Home for tech writers and readers\n\n", "frontpage": false}
