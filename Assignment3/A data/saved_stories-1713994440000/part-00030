{"aid": "40145210", "title": "FreeBSD-outerbase: Install a remote-unlockable system with encrypted root-on-ZFS", "url": "https://github.com/emtiu/freebsd-outerbase", "domain": "github.com/emtiu", "votes": 1, "user": "codetrotter", "posted_at": "2024-04-24 15:03:30", "comments": 0, "source_title": "GitHub - emtiu/freebsd-outerbase: install script for a remote-unlockable FreeBSD system with geli-encrypted root-on-zfs", "source_text": "GitHub - emtiu/freebsd-outerbase: install script for a remote-unlockable\nFreeBSD system with geli-encrypted root-on-zfs\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nemtiu / freebsd-outerbase Public\n\n  * Notifications\n  * Fork 1\n  * Star 5\n\ninstall script for a remote-unlockable FreeBSD system with geli-encrypted\nroot-on-zfs\n\n5 stars 1 fork Branches Tags Activity\n\nStar\n\nNotifications\n\n# emtiu/freebsd-outerbase\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nfoudilandemtiuFix confirmation dialog callDec 4, 20234e9258d \u00b7 Dec 4, 2023Dec\n4, 2023\n\n## History\n\n6 Commits  \n  \n### README.md\n\n|\n\n### README.md\n\n| add update procedure, improve partitioning| Nov 8, 2023  \n  \n### outerbase-install.sh\n\n|\n\n### outerbase-install.sh\n\n| Fix confirmation dialog call| Dec 4, 2023  \n  \n### src.conf\n\n|\n\n### src.conf\n\n| fix custom outer base locales| May 6, 2021  \n  \n## Repository files navigation\n\n# freebsd-outerbase\n\ninstall script for a remote-unlockable FreeBSD system with geli-encrypted\nroot-on-zfs\n\n## the problem\n\nIf a server resides on encrypted media, it's difficult to unlock it remotely\nafter a reboot. When a fully encrypted system boots, it usually sits and waits\nfor a passphrase to be entered long before the network is ready to allow a\nremote connection.\n\nCommon solutions include virtualization, the serial console (traditional or\nthrough a DIY server), IPMI and friends, or IP-KVM hardware (expensive\ntraditional or low-cost DIY).\n\n## outer base solution\n\nThis solution builds upon two previous implementations of the following idea:\nan unencrypted barebones system (the outer base) boots and accepts incoming\nSSH connections. Over SSH, the encrypted system can be unlocked. Then,\nFreeBSD's reboot -r command is used to reboot (more precisely: re-root the\nkernel) into the unlocked system (the inner base):\n\n    \n    \n    .---------------------------. | gpt/inner: GELI | | .----------------------. | .----------------. 3) unlock | | gpt/inner.eli: zroot | | | gpt/outer: ufs |--------------> | | | | .--------------. 1) boot | |------------------>| \"inner base\" | | | gpt/efi: ESP |---------->| \"outer base\" | 4) reboot -r | \u00b7----------------------\u00b7 | \u00b7--------------\u00b7 \u00b7----------------\u00b7 \u00b7---------------------------\u00b7 \u039b | 2) ssh \u2518\n\n## highlights\n\n  * comfortable unlock/reboot script with basic Boot Environments support\n  * optional encrypted swap\n  * optional use of a custom-built base system for the outer base (example src.conf for a minimal outer base system included)\n  * minimal requirements:\n\n    * an amd64 system with UEFI boot\n    * a bootable stock FreeBSD installer\n    * this script\n  * install script provides hints and checks to help select the right target device\n  * tested with 13.0-RELEASE on bare metal and 13.2-RELEASE in VirtualBox\n\n### security and privacy considerations\n\nThe outer base is a stock FreeBSD base install that holds no user data (with\nthe likely exception of a public SSH key for login). However, the kernel must\nbe shared between the outer and inner base. This means that the kernel resides\non the unencrypted UFS partition with the outer base system.\n\nTherefore, this solution does not protect against undetected hardware\ntampering (because the unencrypted bootloader and/or kernel could be\nmanipulated before booting) or exploitation of the running system (because\ninner base and user data are unlocked when the system is running).\n\nIt does provide encryption at rest, so all user data and the inner base system\n(except /boot) should be locked and protected:\n\n  * when the system is powered down,\n  * after a reboot (before unlocking),\n  * on the physical drives when removed.\n\nFor the question of SSH host keys, see variables in the install script below.\n\n## quick start\n\n  1. Boot a stock FreeBSD installer image on the target machine and enter the shell.\n\n  2. Transfer outerbase-installer.sh from this repo to /tmp/ (by removable media, http, nc, ...).\n\n  3. Run outerbase-installer.sh with the target drive name (without /dev/) as the only argument.\n    \n        sh /tmp/outerbase-installer.sh ada0\n\nThat drive will be paved by gpart destroy -F in the process.\n\n## detailed description\n\n### installing\n\nouterbase-installer.sh expects to be run from the shell of a stock FreeBSD\ninstaller image such as FreeBSD-13.2-RELEASE-amd64-memstick.img. When run\nwithout arguments, it just shows the output of gpart show to help in selecting\nthe right drive and exits.\n\nTo run the installation, execute outerbase-installer.sh with the name of the\ntarget drive (without \"/dev/\") as the only argument. For example, to use\n/dev/ada0 for the installation\u2014which will be erased by gpart destroy -F in the\nprocess!\u2014run:\n\n    \n    \n    sh outerbase-installer.sh ada0\n\nIn setting up the system for booting, the script expects:\n\n  * an amd64 machine with UEFI boot\n  * no other operating systems\n  * to create the machine's only EFI System Partition (ESP) on the target drive\n\nThe script then proceeds to:\n\n  1. create partitions, set up encryption, create the zpool,\n  2. create file systems and zfs datsets,\n  3. install the outer base, inner base and ESP,\n  4. configure the outer and inner base (see below),\n  5. open a chroot'ed bsdconfig for both outer and inner base.\n\nWhen all is done without errors, the system can be rebooted (with the\ninstaller medium removed) and should boot into the outer base.\n\n#### variables in the install script\n\nAll tunables are set in the first few lines of the install script.\n\nhostname and poolname are self-explanatory.\n\nrootpw can be empty or contain a string:\n\n  * If empty, passwd will prompt for the root password for outer and inner base separately (twice for confirmation each time).\n  * If set to a string, it will be used as the root password for both outer and inner base identically.\n\ngelipassphrase can be empty or contain a string:\n\n  * If empty, geli will ask for the passphrase a total of three times (twice for geli init and once for geli attach).\n  * If set to a string, it will be used as the passphrase for the encryption of the inner base partition. For a passphrase that contains spaces, the argument should be enclosed in quotes: gelipassphrase=\"test 123\"\n\nswapsize sets the size of the swap partition. Its value is passed to gpart\ncreate -s. If empty or set to 0, no swap partition is created, and no swap\nentry is placed in the inner base's /etc/fstab.\n\noutersize sets the size of the outer base UFS partition. Its value is passed\nto gpart create -s. The default is 1600M. See custom minimal outer base below\nfor details.\n\nouterbasetxz is the path to the custom base.txz package to use for the outer\nbase. It's empty by default, which means a stock base system is installed as\nthe outer base. The script exits immediately if this path does not exist. See\ncustom minimal outer base below for details.\n\nrootSSH can be empty or set to any value:\n\n  * If empty, the default /etc/ssh/sshd_config is not changed. PermitRootLogin remains set to no, which is the default.\n  * If set to any value, PermitRootLogin is set to yes in /etc/ssh/sshd_config for both the outer and inner base.\n\nseparateSSHhostkeys can be empty or set to any value:\n\n  * If empty, outer base and inner base share identical SSH host keys. This could be a security concern, because the private SSH host keys are stored unencrypted on the outer base UFS partition. However, it prevents connecting clients from complaining about changed host keys after rebooting into the inner base.\n  * If set to any value, the inner base uses its own separate set of SSH host keys. This is somewhat more secure, but clients will need some serious convincing to connect to both outer and inner base, as changing host keys on the same host are a red flag.\n\n### booting and unlocking\n\nThe installer places /root/unlock.sh in the outer base to assist in unlocking\nand rebooting into the inner base.\n\nIt uses reboot -r, which does a \"soft reboot\" or \"re-root\", as explained in\nthe reboot(8) manpage of FreeBSD 13.2:\n\n    \n    \n    -r The system kills all processes, unmounts all filesystems, mounts the new root filesystem, and begins the usual startup sequence. After changing vfs.root.mountfrom with kenv(1), reboot -r can be used to change the root filesystem while preserving kernel state. [...]\n\nWhen called without arguments, /root/unlock.sh:\n\n  * prompts for the geli passphrase to unlock gpt/inner.eli,\n  * imports the zpool without mounting any datsets (by using zpool import -N),\n  * sets the vfs.root.mountfrom kernel variable (see basic Boot Environments support below),\n  * calls reboot -r to reboot the system into the unlocked inner base.\n\nWhen called with /root/unlock.sh -n (where -n means \"no reboot\"):\n\n  * the zpool is imported with -o altroot=/mnt,\n  * the final reboot -r is skipped.\n\nThe inner base can then be inspected or manipulated at /mnt. At any later\ntime, a manually issued reboot -r should still reboot into the inner base.\n\n#### basic Boot Environments support\n\nThere is some support for Boot Environments (BE) in the inner base system.\nThey can be created and managed normally with bectl(8) or beadm(1).\n\nWhen a BE is activated, the name of the corresponding zfs datset is set in the\nzpool's bootfs property. When a regular bootloader boots from the pool, it it\nlooks for the system in that dataset and mounts it at /.\n\nWhen /root/unlock.sh has imported the zpool that contains the inner base, it\nalso reads the zpool's bootfs property and sets vfs.root.mountfrom\naccordingly. When reboot -r is issued, the system reboots with that dataset as\nthe new /, much the same as a normal boot.\n\nThe main difference with this setup is that /boot is not part of the inner\nbase system, since it must reside on the outer base UFS partition. Therefore,\n/boot is not covered by BE protection when doing upgrades for example.\n\nOtherwise, BEs should work as expected, but haven't been exhaustively tested.\n\n### characteristics of the installed systems\n\nThese are the unique/surprising/nonstandard properties of the systems\ninstalled by this install script. For tunable options, see variables in the\ninstall script above. For a description of the booting process, see installing\nand booting and unlocking above.\n\nThe target drive it set up as follows (using a 75GB disk at /dev/ada0 as\nexample):\n\n    \n    \n    ada0 (75G) type: GPT ada0p1 (10M) type: efi label: efi ada0p2 (2G) type: freebsd-ufs label: outer ada0p3 (4G) type: freebsd-swap label: swap ada0p4 (69G) type: freebsd-zfs label: inner\n\nThe inner partition takes up all available space after the others are set up.\nThe install script aligns partitions on 1MB boundaries.\n\nIf swap is configured, it is used by the inner base only, and encrypted.\n\nThe zpool containing the inner base consists of a single vdev without\nredundancy, created atop the gpt/inner.eli geom with -o ashift=12. The layout\nof the datasets is an exact replication of the default in FreeBSD\n13.2-RELEASE.\n\nThe boot loader gets the following settings in /boot/loader.conf:\n\n    \n    \n    autoboot_delay=\"4\" vfs.root.mountfrom=\"ufs:/dev/gpt/outer\" geom_eli_load=\"YES\" zfs_load=\"YES\"\n\nThe outer base is a stock FreeBSD base system (except when using a custom\nminimal outer base as described below) on a single UFS root partition. For\nthis partition, the free-space reserve as determined by newfs -m is set to\njust 2% (down from the default of 8%).\n\nThe script to unlock the inner base and reboot into it is placed at\n/root/unlock.sh (see booting and unlocking above).\n\nThis is /etc/fstab for the outer base. Note the noauto entry for the ESP and\nthe size-limited tmpfs entries:\n\n    \n    \n    /dev/gpt/outer / ufs rw,noatime 1 1 /dev/gpt/efi /boot/efi msdosfs rw,noauto 1 1 tmpfs /var/log tmpfs rw,size=100m,noexec 0 0 tmpfs /tmp tmpfs rw,size=500m,mode=777,nosuid 0 0\n\nThe install script sets zfs_enable=NO for the outer base. This way, no auto-\nimport of the zpool is attempted at boot, which would fail anyway because\ngpt/inner.eli is locked.\n\nBoth outer base and inner base share the same host id. This avoids complaints\nwhen importing the zpool. The install script also sets sendmail_enable=NONE\nfor both outer and inner outer base.\n\nThe install script also creates SSH host keys (either identical or separate\nfor inner and outer base, see variables in the install script above) and sets\nsshd_enable=YES for both outer and inner base. Optionally, PermitRootLogin is\nset to yes in /etc/ssh/sshd_config.\n\nThe inner base has zfs_enable=YES set to ensure zfs mount -a is run on boot.\nThis is /etc/fstab for the inner base:\n\n    \n    \n    /dev/gpt/outer /outer ufs rw,noatime 1 1 /dev/gpt/efi /boot/efi msdosfs rw,noauto 1 1 tmpfs /tmp tmpfs rw,mode=777,nosuid 0 0 /dev/gpt/swap.eli none swap sw 0 0\n\nCrucially, the outer base UFS partition is mounted at /outer. In the inner\nbase, /boot is a protected symlink to /outer/boot, because that is what the\nsystem actually uses to boot the outer base.\n\nNote that the mountpoint for the ESP is /boot/efi, even though /boot itself is\na symlink. This is preferred over /outer/boot/efi, because /boot/efi is the\nmore canonical mountpoint, and it is the same for both the outer and inner\nbase, hopefully avoiding confusion and mistakes.\n\n### custom minimal outer base\n\nCompiling your own FreeBSD base system for the outer base allows you to make\nit smaller and simpler, in accordance with its role as a 'login-and-unlock-\nonly system'. A src.conf for such a minimal outer system is part of this\nrepository. The resulting sizes, as last tested for 13.0-RELEASE, are as\nfollows:\n\nbase.txz| installed| with kernel| partition  \n---|---|---|---  \n13.0-RELEASE| 181M| 972M| 1109M| 1600M  \nthis src.conf| 50M| 244M| 381M| 800M  \n  \nThe recommended partition size takes into account that upgrades require some\nfree space, including for two kernels to coexist.\n\n#### compiling the custom minimal outer base\n\nWith the FreeBSD source tree in place at /usr/src, and with the src.conf from\nthis repository in a place like /tmp/outerbase-src.conf, run the following\ncommands:\n\n    \n    \n    make -C /usr/src/ SRCCONF=/tmp/outerbase-src.conf -j7 buildworld make -C /usr/src/release SRCCONF=/tmp/outerbase-src.conf base.txz\n\nAs the configuration is very minimal (mainly by avoiding the building of llvm,\nexcluding any debug information and not building a custom kernel), the system\nbuilds rather quickly. During testing, it completed in around 10 minutes on an\ni7 with 4x 3.6GHz and 16G of RAM.\n\nThe resulting base.txz is created (in the case of the amd64 arch) at\n/usr/obj/usr/src/amd64.amd64/release/base.txz. To avoid confusion, it's best\nto rename it to outerbase.txz for use with outerbase-installer.sh.\n\n#### installing with custom minimal outer base\n\nIn outerbase-installer.sh, set the outerbasetxz variable to the location of\nyour outerbase.txz. It will then be used for installing the outer base. (The\ninner base will always use the stock /usr/freebsd-dist/base.txz instead.) The\ninstall script exits if outerbasetxz is set to a path that does not exist.\n\nYour outerbase.txz can be in any type of readable location:\n\n##### 1\\. mounted\n\nThe location of outerbase.txz can be a (read-only) mount, such as an NFS share\nor some removable media.\n\n##### 2\\. network file transfer\n\nouterbase.txz can also be transferred to the installer's file system over the\nnetwork, for example by downloading it over http, or by using nc.\n\nHowever, the writable /tmp partition of the memstick.img installer is limited\nto 20MB in size, which is probably too small for outerbase.txz. As a\nworkaround, another tmpfs with unrestricted size can be mounted under it:\n\n    \n    \n    mkdir /tmp/large mount -t tmpfs tmpfs /tmp/large\n\n##### 3\\. on the installer image\n\nIt's particularly convenient to put outerbase.txz on the bootable installer\nmedium itself. For use with FreeBSD-13.2-RELEASE-amd64-memstick.img, a USB\nstick or SD card of 2GB or more is appropriate. After writing the image to a\n2GB medium at /dev/da0, its partition layout as shown by gpart show da0 should\nlook like this:\n\n    \n    \n    => 1 3842047 da0 MBR (1.8G) 1 66584 1 efi (33M) 66585 2064080 2 freebsd [active] (1.0G) 2130665 1711383 - free - (836M)\n\nIn order to fit outerbase.txz, the main partition needs to be grown. Because\nthe installer image is MBR-partitioned, an extra step is needed to grow the\npartition inside its BSD slice before growing the file system. By not\nspecifying a size, first the slice, then the partition and finally the file\nsystem is grown to use all available space:\n\n    \n    \n    gpart resize -i2 da0 gpart resize -i1 da0s2 growfs /dev/da0s2a\n\nThen, the file system can be mounted for writing and copying outerbase.txz\nonto it:\n\n    \n    \n    mount /dev/da0s2a /mnt/ cp outerbase.txz /mnt/usr/freebsd-dist/\n\nWhile you're at it, you can also copy along outerbase-installer.sh. Make sure\nto set\n\n    \n    \n    outerbasetxz=/usr/freebsd-dist/outerbase.txz\n\nin outerbase-installer.sh so it will find your outerbase.txz.\n\nNote that the installer mounts its main partition read-only. If you copy\nouterbase-installer.sh to the installer image, but then you need to edit it\nbefore running: copy it to /tmp, edit and run the copy.\n\n### Update procedure\n\n#### stock outer base\n\nWhen using a stock system as the outer base, the update procedure is as easy\nas calling freebsd-update for the outer base and inner base resepctively.\nWhile booted into the inner base, run:\n\n    \n    \n    # freebsd-update -b /outer fetch # freebsd-update -b /outer install\n\n#### custom minimal outer base: building on the target machine\n\nA custom minimal outer base needs to be re-built with every update (e.g. from\n13.2-RELEASE-p4 to -p5). The following steps describe the procedure for\nbuilding and installing on the same machine. Further down, there's also a\ndescription on how to update a non-build machine.\n\n##### step 1: sources\n\nFirst your should have the sources on hand. Download them like so:\n\ngit clone --branch releng/13.2 https://git.FreeBSD.org/src.git /usr/src\n\n... or simply git pull in /usr/src, if it is already populated. You can check\nfor the correct version you're trying to update to by running:\n\ngrep -e ^REVISION -e ^BRANCH /usr/src/sys/conf/newvers.sh\n\n##### step 2: building\n\nThen, build the system. You need to provide make with the src.conf that\ncorresponds to your custom minimal outer base. You can specify its location\nlike this:\n\nmake SRCCONF=/root/outerbase-src.conf buildworld\n\n... or simply run make buildworld if you have the correct file in place at\n/etc/src.conf (which is assumed for the follwing commands).\n\n##### step 3: updating /etc\n\nNormally, etcupdate is meant to have a persistent database in\n/var/db/etcupdate. Here, a temporary storage location in /tmp used, which will\nbe erased on reboot. This way, the operation takes longer, but leaves no\nclutter behind on the /outer partition.\n\nFrom /usr/src, run:\n\n    \n    \n    # etcupdate extract -D /outer/ -d /tmp/etcupdate # etcupdate -p -D /outer -d /tmp/etcupdate\n\n##### step 4: installing\n\nFrom /usr/src, run:\n\n# make DESTDIR=/outer installworld\n\nThen complete the etcupdate operation:\n\n# etcupdate -D /outer -d /tmp/etcupdate\n\nYou may now want to clean the installation of unneeded files and directories.\nSpecifically, installing an update for the custom minimal outer base may leave\nbehind a number of empty directories associated with unused system components.\nTo find out which those are, run from /usr/src:\n\n# make DESTDIR=/outer check-old\n\nIf the deletion list presented by the previous command makes sense, you may\nrun the cleanup:\n\n# make DESTDIR=/outer BATCH_DELETE_OLD_FILES=yes delete-old delete-old-libs\n\n#### custom minimal outer base: building on a remote machine\n\nIf you want to update a custom minimal outer base on a machine that cannot (or\nshould not) build the system itself, you may use another FreeBSD machine for\nbuilding, mount the source and build directories, and install it as normal.\nIt's pretty neat, and it's been tested to work with the build machine offering\nits /usr/src and /usr/obj for NFSv4 mounts.\n\nFor this procedure, you're going to need the correct src.conf in place on both\nthe build machine and the target machine. You may either supply its location\nas in make SRCCONF=/root/outerbase-src.conf, or just place it at /etc/src.conf\non both machines (which is assumed for the follwing commands).\n\nFirst, follow the above steps 1 and 2 on the build machine. Then, on the\ntarget machine, mount the necessary directories (read-only works fine):\n\n    \n    \n    # mount_nfs -o nfsv4,ro buildbox:/usr/src /usr/src # mount_nfs -o nfsv4,ro buildbox:/usr/obj /usr/obj\n\nThen, follow the above steps 3 and 4 on the target machine. Don't forget to\nhave the correct src.conf in place.\n\nIf you see warnings like: make[2] warning: /usr/src/: Read-only file system.,\nthese have been seen in testing and appeared to be harmless.\n\nAfter installing, just unmount the directories and you're done:\n\n    \n    \n    # umount /usr/obj # umount /usr/src\n\n#### inner base\n\nThe inner base can be updated as normal when booted:\n\n    \n    \n    # freebsd-update fetch # freebsd-update install\n\nNote that /outer/boot and /boot are the same directory, so its contents will\ncorrespond to whatever update process you ran last.\n\n## Ohrwurm\n\nIf the name of this project didn't make you think of this song before, it will\nnow!\n\n## About\n\ninstall script for a remote-unlockable FreeBSD system with geli-encrypted\nroot-on-zfs\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n5 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n1 fork\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Shell 100.0%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
