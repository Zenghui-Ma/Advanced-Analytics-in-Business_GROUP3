{"aid": "40133857", "title": "Notebooks in Production?", "url": "https://blog.gitnotebooks.com/blog/notebooks-in-production/", "domain": "gitnotebooks.com", "votes": 1, "user": "smith-kyle", "posted_at": "2024-04-23 16:33:23", "comments": 0, "source_title": "Notebooks in Production?", "source_text": "Notebooks in Production? |\n\n# Notebooks in Production?\n\n2024-04-23\n\nA recruiter once told me it\u2019s rare to meet someone who likes building\ndeveloper tools. This is hard for me to believe. In what other product space\ncan you change code using the code you wrote? Some of you may have heard of my\nprevious team, GitKraken. Writing code for a git client, then using that\nclient to commit changes is what got me hooked. The GitHub developers were so\nexcited to see us using Electron they eventually did the same with their own\ngit client!\n\nFast forward a few years and I find myself in a similar position, building a\ndeveloper tool a bit before GitHub. But the developer tool we\u2019re talking about\ntoday is a step away from traditional software engineering. It was introduced\nto me while taking an Intro to Deep Learning course. Especially as a learning\ntool, Jupyter Notebooks was a delight to use. Splitting code into separate\ncells and keeping the heap intact between cell execution felt intuitive, and\nwas a quick way to learn from my mistakes. But after joining a real ML\ncompany, I was surprised that notebooks were used to solve real problems.\n\n## Why Did We Build This?\n\nIn an interview with Greg Brockman, he describes jumping into his first\nmachine learning project at OpenAI:\n\nOne thing I find very interesting is the different workflow that you end up\nwith when doing Machine Learning. For example, if you look at a typical\nresearch workflow you'll see a lot of files named experiment1.ipynb\nexperiment2.ipynb and they're just like slight forks of the same thing and\nyou're like, isn\u2019t this what version control is for? And after doing this\nproject I learned exactly why. It\u2019s because [...] you actually do want the old\nthing running side by side with the new thing, and if you're constantly\nstashing and unstashing then you're just gonna be sad.\n\nA lot has changed since 2017. The industry has created new and creative ways\nto put notebooks in production. Netflix famously debuted their framework to\ntrigger notebooks from other notebooks. Project Jupyter released a notebook\nscheduler. Fast.ai wrote a library to write python libraries in notebooks.\nWe\u2019re not just experimenting in notebooks anymore, we\u2019re using them to do\nproduction-y things.\n\nWith all of this important work being done by notebooks, you\u2019d expect a\ncommensurate level of developer tooling. Jumping into my first machine\nlearning project at Large Fintech, I was surprised to find that this was not\nthe case. Every git hosting service has code reviews covered, but when it\ncomes to notebooks, you find mixed support. So why are these big players\nignoring such a common problem?\n\n## What Did We Build\n\nIt turns out it\u2019s hard to build a notebook review tool. What makes notebooks\nso useful and diffing them so hard is the multitude of ways you can display\ninformation. When diffing code files, you\u2019re diffing text. When diffing\nnotebooks, you\u2019re diffing: code, markdown, HTML, LaTex, and images. That\u2019s a\nlot of limes to hold!\n\nWe took it one piece at a time. When approaching markdown diffs, we quickly\nrealized we also needed to diff arbitrary HTML \u2014 a tough nut to crack.\nLibraries will do this for you, but there\u2019s an added constraint when diffing\nfor a review. You have to know which line number each HTML element originated\nfrom. This way, comments will stay in place as new commits are pushed. The\napproach that we took was to render the markdown into an AST that includes\nsource positions and compare elements that share unchanged text. This allows\npretty cool things, like aligning bits of markdown on the left and right,\nmaking long markdown cells easier to read.\n\nFor code cells, we started with CodeMirror, the in-browser editor that Project\nJupyter uses. This offered a familiar look and feel, but a fully functional\neditor is an overkill when you just want to view a diff. To boost performance\nwe built our own code diffing component, making it easier to introduce\nfeatures like comments, multi-line comments, and code lines that wrap. No more\npesky side-scrolling!\n\nSo all of that to say, we built a diff that looks exactly like a notebook with\nthe ability to comment anywhere. Over the past year we\u2019ve seen GitNotebooks\nused in educational spaces, as well as companies in finance, computer vision,\nand biotech. Our customers tell us our diffs blow the competition out of the\nwater.\n\n## Yes, Notebooks in Production\n\nIf your team relies on Jupyter Notebooks we\u2019d love to talk. Or better yet, try\nit yourself!\n\nBuilding a developer tool a bit before GitHub affords an opportunity to set\nthe bar. For all of those serious about Jupyter Notebooks, we\u2019ll continue to\nraise it.\n\n", "frontpage": false}
