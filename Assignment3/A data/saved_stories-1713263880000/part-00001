{"aid": "40048408", "title": "Topfew (command-line util) release 0.5", "url": "https://www.tbray.org/ongoing/When/202x/2024/04/12/Topfew-release", "domain": "tbray.org", "votes": 1, "user": "p4bl0", "posted_at": "2024-04-16 04:37:30", "comments": 0, "source_title": "Topfew Release 0.5", "source_text": "ongoing by Tim Bray \u00b7 Topfew Release 0.5\n\n# Topfew Release 0.5\n\nBack in 2021-22, I wrote a series of blog posts about a program called\n\u201ctopfew\u201d (tf from your shell command-line). It finds the field values (or\ncombinations of values) which appear most often in a stream of records. I\nbuilt it to explore large-scale data crunching in Go, and to investigate how\nperformance compared to Rust. There was plentiful input, both ideas and code,\nfrom Dirkjan Ochtman and Simon Fell. Anyhow, I thought I was finished with it\nbut then I noticed I was using the tf command more days than not, and I have\npretty mainstream command-line needs. Plus I got a couple of random pings\nabout whether it was still live. So I cleaned it up a bit and on April 12th,\ndid its first actual release, 0.5.0. Here it is.\n\nIts test coverage is much improved compared to a couple weeks ago and,\nexpectedly, there are fewer bugs. Also, better docs.\n\nPlan \u00b7 I think it\u2019s stable, and fast enough (see below). Unless someone finds\ngross breakage or painfully-obvious improvements, I\u2019m going to release 1.0 in\na week or so. At some point, I\u2019ll look into Homebrew recipes and suchlike, if\nI get the feeling they might be used. \u00b6\n\nObviously, please send issues or PRs if you see the opportunity.\n\nWho needs this? \u00b7 It\u2019s mostly for log files I think. Whenever I\u2019m poking\naround in one of those I find myself asking questions like \u201cwhich API call was\nhit most often?\u201d or \u201cWhich endpoint?\u201d or \u201cWhich user agent?\u201d or \u201cWhich\nsubnet?\u201d \u00b6\n\nThe conventional hammer to drive this nail has always been something along the\nlines of:\n\n    \n    \n    awk '{print $7}' | sort | uniq -c | sort -nr | head\n\nWhich has the advantage of Just Working on any Unix-descended computer. But\ncan be slow when the input is big, and worse than linear too. Anyhow, tf is\nlike that, only faster. In some cases, orders of magnitude faster. Plus, it\nhas useful options that take care of the grep and sed idioms that often appear\nupstream in the pipe.\n\nTopfew\u2019s got a decent README so I\u2019m not going invest any more words here in\nexplaining it.\n\nBut it\u2019s worth pointing out that it\u2019s a single self-contained binary compiled\nfrom standalone Go source code with zero dependencies.\n\nPerformance \u00b7 This subject is a bit vexed. After I wrote the first version,\nDirkjan implemented it in Rust and it was way faster, which annoyed me because\nit ought to be I/O-bound. So I stole his best ideas and then Simon chipped in\nother good ones and we optimized more, and eventually it was at least as fast\nas the Rust version. Which is to say, plenty fast, and probably faster than\nwhat you\u2019re using now. \u00b6\n\nBut you only get the big payoff from all this work when you\u2019re processing a\nfile, as opposed to a stream; then tf feels shockingly fast, because it\ndivides the file up into segments and scans them in parallel. Works remarkably\nwell.\n\nUnfortunately that doesn\u2019t happen too often. Normally, you\u2019re grepping for\nsomething or teeing off another stream or whatever. In which case, performance\nis totally limited by reading the stream; I\u2019ve profiled the hell out of this\nand the actual tf code doesn\u2019t show up in any of the graphs, just the\nI/O-related buffer wrangling and garbage collection. Maybe I\u2019m missing\nsomething. But I\u2019m pretty sure tf will keep up with any stream you can throw\nat it.\n\nTooling \u00b7 Over the years I\u2019ve become an adequate user of GitHub CI. It\u2019s good\nto watch that ecosystem become richer and slicker; the things you need seem to\nbe there and for an OSS hobbyist like me, are generally free. Still, it\nbothers me that Everything Is On GitHub. I need to become aware of the\nalternatives. \u00b6\n\nI still live in JetBrains-land, in this case specifically Goland, albeit\nunfashionably in Light mode. It scratches my itches.\n\nAnyhow, everything is easier if you have no dependencies. And our whole\nprofession needs to be more thoughtful about its dependencies.\n\nDirty secret \u00b7 I\u2019ve always wanted to ship a two-letter shell command that\nsomeone might use. Now I have. And I do think tf will earn a home in a few\nfolks\u2019 toolboxes. \u00b6\n\nUpdated: 2024/04/13\n\n## Contributions\n\nComment feed for ongoing:\n\nFrom: Mat\u011bj Cepl (Apr 15 2024, at 13:21)\n\nI completely agree with your feeling of unease over the total monopoly of\nGitHub over the humankind. Just to note that aside from the obvious\ncompetitors (GitLab, Codeberg, Gitea, et al.), I have discovered recently\nSourcehut and git send-email-based workflow and I have to say that I had a lot\nof fun with it. Yes, it is hard core geekery, not for everybody, but life is\nmuch more fun than filling-in webforms.\n\n[link]\n\nongoing\n\nWhat this is \u00b7 Truth \u00b7 Biz \u00b7 Tech\n\nauthor \u00b7 Dad colophon \u00b7 rights\n\nApril 12, 2024 \u00b7 Technology (90 fragments) \u00b7 \u00b7 Concurrency (76 more) \u00b7 \u00b7\nSoftware (84 more)\n\nBy Tim Bray.\n\nThe opinions expressed here are my own, and no other party necessarily agrees\nwith them.\n\nA full disclosure of my professional interests is on the author page.\n\nI\u2019m on Mastodon!\n\n", "frontpage": false}
