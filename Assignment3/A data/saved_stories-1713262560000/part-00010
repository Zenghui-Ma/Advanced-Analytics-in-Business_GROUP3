{"aid": "40046429", "title": "The Perfect Paragraph (2011)", "url": "https://www.smashingmagazine.com/2011/11/the-perfect-paragraph/", "domain": "smashingmagazine.com", "votes": 1, "user": "spacebuffer", "posted_at": "2024-04-15 22:28:54", "comments": 0, "source_title": "The Perfect Paragraph", "source_text": "The Perfect Paragraph \u2014 Smashing Magazine\n\nSkip to main content Start reading the article Jump to list of all articles\nJump to all topics\n\n  * Heydon Pickering\n  * Nov 29, 2011\n  * 0 comments\n\n# The Perfect Paragraph\n\n  * 17 min read\n  * UX, Typography, Design, CSS\n  * Share on Twitter, LinkedIn\n\n#### About The Author\n\nHeydon Pickering (@heydonworks) has worked with The Paciello Group, The BBC,\nSmashing Magazine, and Bulb Energy as a designer, engineer, writer, editor,\nand ... More about Heydon \u21ac\n\n#### Email Newsletter\n\nWeekly tips on front-end & UX. Trusted by 200,000+ folks.\n\n  * Flexible CMS. Headless & API 1st\n\n  * Accessibility for Designers, with St\u00e9phanie Walter\n  * Design System Planning and Process, with Nathan Curtis\n\n  * SmashingConf Freiburg 2024\n  * Smart Interface Design Patterns, 10h video + UX training\n\n  * Register!\n\nIn this article, I\u2019d like to reacquaint you with the humble workhorse of\ncommunication that is the paragraph. Paragraphs are everywhere. In fact, at\nthe high risk of stating the obvious, you are reading one now. Despite their\nubiquity, we frequently neglect their presentation. This is a mistake.\n\nThis is a mistake. Here, we\u2019ll refer to some time-honored typesetting\nconventions, with an emphasis on readability, and offer guidance on adapting\nthem effectively for devices and screens. We\u2019ll see that the ability to embed\nfonts with @font-face is not by itself a solution to all of our typographic\nchallenges.\n\nBe sure to check out the following articles:\n\n  * 8 Simple Ways to Improve Typography In Your Designs\n  * How To Become a Better Reader\n  * Photoshop-Inspired Techniques with 100% CSS\n  * Applying Macrotypography For A More Readable Web Page\n\n## A Web Of Words\n\nIn 1992, Tim Berners-Lee circulated a document titled \u201cHTML Tags,\u201d which\noutlined just 20 tags, many of which are now obsolete or have taken other\nforms. The first surviving tag to be defined in the document, after the\ncrucial anchor tag, is the paragraph tag. It wasn\u2019t until 1993 that a\ndiscussion emerged on the proposed image tag.\n\nMeet Smashing Workshops on front-end, design & UX, with practical takeaways,\nlive sessions, video recordings and a friendly Q&A. With Brad Frost, St\u00e9ph\nWalter and so many others.\n\nJump to the workshops \u21ac\n\nBursting with imagery, motion, interaction and distraction though it is,\ntoday\u2019s World Wide Web is still primarily a conduit for textual information.\nIn HTML5, the focus on writing and authorship is more pronounced than ever.\nIt\u2019s evident in the very way that new elements such as article and aside are\nnamed. HTML5 asks us to treat the HTML document more as... well, a document.\n\nIt\u2019s not just the specifications that are changing, either. Much has been made\nof permutations to Google\u2019s algorithms, which are beginning to favor better\nwritten, more authoritative content (and making work for the growing content\nstrategy industry). Google\u2019s bots are now charged with asking questions like,\n\u201cWas the article edited well, or does it appear sloppy or hastily produced?\u201d\nand \u201cDoes this article provide a complete or comprehensive description of the\ntopic?,\u201d the sorts of questions one might expect to be posed by an earnest\ncollege professor.\n\nThis increased support for quality writing, allied with the book-like\nconvenience and tactility of smartphones and tablets, means there has never\nbeen a better time for reading online. The remaining task is to make the\nwriting itself a joy to read.\n\n## What Is The Perfect Paragraph?\n\nAs designers, we are frequently and incorrectly reminded that our job is to\n\u201cmake things pretty.\u201d We are indeed designers \u2014 not artists \u2014 and there is no\nplace for formalism in good design. Web design has a function, and that\nfunction is to communicate the message for which the Web page was conceived.\nThe medium is not the message.\n\nNever is this principle more pertinent than when dealing with type, the bread\nand butter of Web-borne communication. A well-set paragraph of text is not\nsupposed to wow the reader; the wowing should be left to the idea or\nobservation for which the paragraph is a vehicle. In fact, the perfect\nparagraph is unassuming to the point of near invisibility. That is not to say\nthat the appearance of your text should have no appeal at all. On the\ncontrary: well-balanced, comfortably read typography is a thing of beauty;\nit\u2019s just not the arresting sort of beauty that might distract you from\nreading.\n\n(Image: Marcin Wichary)\n\nAs a young industry that champions innovation and rates its practitioners\nbased on their ability to apprehend (sorry, \u201cgrok\u201d) the continual emergence of\nnew technologies, frameworks, protocols and data models, we are not\nparticularly familiar with tradition. However, the practice of arranging type\nfor optimal pleasure and comfort is a centuries-old discipline. As long ago as\n1927, the noted typographer Jan Tschichold spoke of the typesetting \u201cmethods\nand rules upon which it is impossible to improve\u201d \u2014 a set of rules it would be\nfoolish to ignore.\n\nSo, please put your canvas element and data visualization API to one side just\nfor a short while. We are about to spend a little time brushing up on our\ntypesetting skills. It\u2019s called \u201chypertext,\u201d after all.\n\n## Setting Your Paragraphs\n\n### The Typeface\n\nYour choice of font is important, but the kind of \u201cfamily\u201d you choose is\nproject-specific, and we won\u2019t discuss it here except to make one point: the\nconventional wisdom among Web designers that only sans-serif fonts are\nsuitable for body text is just a rule of thumb. Although serif fonts, with\ntheir greater complexity, may tend to be less effective at small sizes, there\nare many other factors to consider. A diminutive x-height, for example, could\nimpair the readability of a font from either camp. Some serif fonts are highly\nlegible and attractive for paragraph text if they are set properly. Matthew\nCarter\u2019s screen-sympathetic Georgia is a case in point.\n\nX-height is the distance between the baseline and midline \u2014 a measure of\nlowercase character height. (Image: adactio)\n\nHaving dispensed with the subject of preference, let\u2019s cover some important\ntechnical issues relating to one\u2019s choice of typeface.\n\nThe first thing to consider when choosing a Web font (read: @font-face font)\nis the breadth of the family. Does the font include all of the necessary bold,\nitalic (or even better, semi-bold and bold-italic) styles? One style is fine\nfor headings, but paragraphs need greater variety. Without these variations at\nyour disposal, not only will your text look insipid, but the lack of proper\nemphasis will make your writing difficult to follow.\n\nI personally don\u2019t like Bitstream, but it is fully functional for paragraph\ntext\n\nWith the full gamut of stylistic variations at your disposal, you will not\nhave to rely on the unsatisfactory \u201cfaux\u201d styles that are applied to a regular\nfont when font-style: italic or font-weight: bold is called. Typefaces are not\ndesigned to be contorted in this way. Using the proper styles provided by a\nfamily like Bitstream (above) will make your typography not only more\nattractive but more accessible: dedicated italic glyphs have a much clearer\nintent than text that is simply \u201cleaned over a bit.\u201d\n\nThe trick is to make sure that the declaration of, for example, font-style:\nitalic requests the italic resource rather than triggers the faux style. It\nshould be as effortless as using a system font family such as Georgia. This is\nprobably best explained, like so many things, in commented code. For brevity,\nwe\u2019ll set up just a regular font and an italic (not bold) style variation.\n\n    \n    \n    @font-face { font-family: 'MyWebfont'; /* Change this to whatever you like. */ src: url('mywebfont-regular.ttf') format('truetype'); /* The \"regular\" font resource. */ font-style: normal; /* Associates values of \"normal\" with this resource. */ font-weight: normal; /* As above for weight. */ } @font-face { font-family: 'MyWebfont'; /* Importantly, the same as in the above block; the family name. */ src: url('mywebfont-italic.ttf') format('truetype'); font-style: italic; /* Associates values of \"italic\" with this resource. */ font-weight: normal; /* ... It's not a bold-italic font style. */ } body { font-family:'MyWebfont', georgia, serif; /* Provides a system font fallback. */ } em { font-style: italic; /* If @font-face is supported, the italic Web font is used. If not, the italic Georgia style is lifted from the user's computer. Either way, a faux style is not allowed to creep in. */ }\n\nOur second typeface consideration relates to rendering. Some fonts, replete\nwith beautiful glyphs and exceptional kerning as they may be, simply don\u2019t\nrender very well at small sizes. You will have noticed that embedded fonts are\noften reserved for headings, while system fonts (such as Verdana here) are\nrelied on for body text.\n\nOne of the advantages of Verdana is that it is a \u201cwell-hinted\u201d font. Delta\nhinting is the provision of information within a font that specifically\nenhances the way it renders at small sizes on screen. The smaller the font,\nthe fewer the pixels that make up individual glyphs, requiring intelligent\nreconfiguration to keep the font legible. It\u2019s an art that should be familiar\nto any Web designer who\u2019s ever tried to make tiny icons comprehensible.\n\nHinting is a tricky and time-consuming process, and not many Web fonts are\nhinted comprehensively. Note the congealed upper portion of the bowl in the\nlowercase \u201cb\u201d in the otherwise impressive Crimson font, for instance. This\nsmall unfortunate glitch is distracting and slightly detracts from a\ncomfortable reading experience. The effect is illustrated below and can be\nseen in context as a demo.\n\nSlightly unsatisfactory hinting for the Crimson Roman style. I love Crimson\nall the same.\n\nThe good news is that, as font embedding becomes more commonplace, font\ndesigners are increasingly taking care of rendering and are supplying ever\nbetter hinting instructions. Typekit itself has even intervened by manually\nre-hinting popular fonts such as Museo. Your best bet is to view on-page\ndemonstrations of the fonts you are considering, to see how well they turn\nout. Save time by avoiding, sight unseen, any fonts with the words \u201cthin\u201d or\n\u201cnarrow\u201d in their names.\n\n### Font Size and Measure\n\nAs a recent Smashing Magazine article compellingly attests, you put serious\npressure on readability by venturing below a 16-pixel font size for paragraph\ntext. All popular browsers render text at 16 pixels by default. This is a good\nenough indication (given the notorious tendency among browser makers to\ndisagree) that 16 pixels is a clear standard. What\u2019s more, the standard is\ngiven credence by an equivalent convention in print typography, as the article\npoints out.\n\nWe often express 16px as 100% in the declaration block for the body in our CSS\nreset style sheets. This makes perfect sense, because it is like saying, \u201c100%\nthe same as the browser would have chosen for you.\u201d If you want the paragraph\ntext to be bigger than 16 pixels, just edit this value in the body block using\na percentage value that equates to a \u201cwhole pixel.\u201d Why whole pixels? Two\nreasons. First, whole numbers are less ungainly and are easier to use as\nmultipliers in style sheets. Secondly, browsers tend to round \u201csub-pixel\u201d\nvalues differently, giving inconsistent results. An 18-pixel font size\nexpressed as a percentage is 112.5% (1.125 \u00d7 16).\n\nNormalizing the size of default text (or \u201cparagraph text,\u201d if you\u2019re being\ngood and semantic) in such a way is extremely important because it sets us up\nto use ems as a multiplier for the size of surrounding headings and other\ntextual elements. For instance, to render an h3 heading at 1.5 times the font\nsize of the paragraph, we should give it the value of 1.5em. Because ems\n(pronounced as in \u201cEmma,\u201d not E.M. Forster) are relative units, they change\naccording to the default font size. This makes it much easier to maintain\nstyle sheets and, more pertinently, ensures that the perceived importance of\nheadings is not increased or diminished by adjusting the size of the paragraph\ntext.\n\nThe \u201cmeasure\u201d is the number of characters in a line of text. Choosing a\ncomfortable measure is important for usability, because if lines are too long,\nthen scanning back to find the start of the next line can be awkward. Without\nconscious effort, the reader might miss or reread lines. In The Elements of\nTypographic Style, Robert Bringhurst puts a good measure at somewhere between\n45 and 75 characters. It is the main reason why we use the max-width property\nwhen designing elastic layouts.\n\nWhatever your page\u2019s ideal maximum width, it is likely much narrower than what\nyou are used to seeing. According to an in-depth study of typographic design\npatterns published on Smashing Magazine, the average website exhibits a\nmeasure of 88.74 characters, far exceeding the optimal range.\n\n### Leading and Vertical Rhythm\n\n(Image: andrechinn)\n\nLeading (pronounced \u201cledding\u201d) is the spacing between consecutive lines of\ntext. Leading has a similar impact on readability as \u201cmeasure,\u201d because it\nhelps to define and demarcate the rows of glyphs that one must traverse from\nleft to right and back again. The trick with leading is to avoid adding too\nmuch: text with lines that are too far apart appears fragmented, and the\nintent of a judicious use of leading is undone by a negative result.\n\nIn mechanical typesetting, leading was set by inserting strips of lead metal\n(hence the pronunciation) between lines. In CSS, the line-height property is\nthe tool we use, and exposure to it is much less likely to make you go mad.\n\nInstead of accounting for space between lines, as with leading, line-height is\na vertical measure of the whole line \u2014 including the text itself and any\nspacing to follow. There are three ways to set it: the wrong way, the\nredundant way and the right way.\n\nThe wrong way to set line-height is in pixels. By introducing an absolute\nvalue, we would undo all of the good work from the previous section. As the\nfont-size increases (either in the style sheet or the user\u2019s browser\nsettings), the line-height would persist. This produces an interesting effect:\n\nAbsolute and relative values do not mix.\n\nSo, should we use the same em multipliers that we saw in the last section?\nThis is the redundant way. Although the method would work, providing an em\nunit is not necessary. Rather, a value of 1.5 for the line-height that is 1.5\ntimes that of the font size will suffice. The line-height property belongs to\nan exclusive club of CSS properties that accept unit-less numeric values.\n\n    \n    \n    p { font-size:; /* Silence is golden; implicity 1em. */ line-height: 1.5; }\n\nThe attentive among you will have noticed that so far I have only mentioned\nfont sizes that are even numbers. The reason is that I favor a line height of\n1.5. So, a font size of 18 pixels means lines with a height of 27 pixels or,\nif you prefer, lead strips that are 9 pixels thick. Using even numbers is\nanother bid to maintain whole pixel values \u2014 I know that any even number\nmultiplied by 1.5 will result in a whole number. A line-height stated in whole\npixels is particularly important, because it is the key value used to achieve\n\u201cvertical rhythm.\u201d\n\nAll components on the page should have a height divisible by the height of one\nline of paragraph text.\n\nMaintaining vertical rhythm (or composing to a baseline grid) is the practice\nof making sure that the height of each textual element on the page (including\nlists, headings and block quotes) is divisible by a common number. This common\nnumber (the single beat in a series of musical bars, if you will) is typically\nderived from the height of one paragraph line. You should be able to see by\nnow why an impossible value like 26.5 pixels would be a mistake for such an\nintegral measure.\n\nThe benefits of vertical rhythm to readability are much subtler than those of\nhinting, measure or leading, but they are still important. Vertical rhythm\ngives the page decorum. Because we have made sure so far that all of our\nmeasurements are co-dependent and relative, altering the font size for the\nbody (all the way up at the top of the cascade) will not damage the page\u2019s\nvertical rhythm.\n\nIt is worth noting that, although a line height of 1.5 is fairly dependable,\nnot all fonts are made equal. Fonts with a tall x-height or long descenders\nmight benefit from more generous, separative leading. When basic readability\nis at stake, adopting a more complex vertical rhythm algorithm is worth it.\n\n### Word Spacing and Justification\n\nWithout intervention, paragraph text on Web pages is set \u201cragged right\u201d (text-\nalign: left in CSS): the start of each line is flush with the left margin, but\nthe lengths of the lines vary, giving an uneven \u201cragged\u201d effect on the right\nside. If you\u2019re like me, you prefer the tidiness of full justification\n(illustrated below). But implementing justification without impairing\nreadability is not as straightforward in HTML as it is by using desktop-\npublishing software.\n\nFully justified text necessitates, arguably, a narrower measure than text set\nragged right.\n\nThe problem with justified text in HTML (text-align: justify) is word spacing.\nIn print media (such as newspapers), hyphenation is used to break up long\nwords. This results in more components (words or part words) per line, thus\nimproving distribution and curbing aggressive word spacing. Browsers do not\nhyphenate automatically, and the soft hyphen (&shy;) is implemented\ninconsistently. Besides, imagine having to manually insert &shy; all the way\nthrough your copy. CSS3\u2019s text-justify property, which aims to give us more\ncontrol over text-align: justify, could ease the problem by enabling inter-\ncharacter distribution. Bizarrely, it is currently available only with\nInternet Explorer.\n\nHyphenator.js\n\nThankfully, Firefox and Safari now support the CSS3 property hyphens, which\ncan automatically insert hyphens much as you would manually with &shy;. In\nfact, you can revert to manual hyphenation in a document set to hyphens: auto\nby using the hyphens: manual override. Browser prefixes are required, but Lea\nVerou can help you with that.\n\nUntil the other browsers catch up, a consistent cross-browser solution is\ncurrently possible only with JavaScript. Hyphenator.js is a powerful tool that\ntakes a library of syllabic patterns specific to each language and uses them\nto dynamically insert soft hyphens in the correct places. It is a bit pricey\n(two scripts at a total of 72 KB uncompressed just for the English\nimplementation), but it does work. Its effect is shown in the first screenshot\nfor this section.\n\n### Finishing Touches (Styling Contextually)\n\nNow that we have dealt with the important business of sizing, setting and\ndistributing our paragraphs compellingly, you may wish to apply a few small\nenhancements and decorations for the purpose of signposting the document.\nThese nuances concern only certain paragraphs, and choosing which paragraphs\nto set off is a question of context. With the help of special selectors and\ncombinators, we are able to target specific paragraphs depending on where they\nappear on the page, making sure that the difference in their design is\nconsistent with their intended role and meaning.\n\nParagraphs separated with a margin (such as margin: 0 0 1.5em;) do not require\nindentation. With paragraphs, margins and indentation serve the same purpose.\n\nLet\u2019s use indentation as an introductory example. Although less common in Web\ntypography than in print, indenting the first line of each paragraph is a\nconventional method of grouping paragraphs into chunks of information. In\nterms of rhythm, it is also a sort of punctuation: the reader is invited to\npause briefly before each paragraph. Because no indentation is required for\nthe first paragraph \u2014 why pause before we\u2019ve even started? \u2014 we should exclude\nthis paragraph from our CSS rule. Using the adjacent sibling combinator, we\nare able to target only paragraphs with a preceding paragraph, and so the\nconvention that has been familiar to book typography over the centuries is\nably reproduced.\n\n    \n    \n    p + p { text-indent: 1.5em /* I like to keep the indentation length equal to the line height. */ }\n\nIn the next example, I have combined the adjacent sibling combinator with the\n:first-letter pseudo-class to create a pronounced introductory glyph or\n\u201celevated cap\u201d:\n\n    \n    \n    h1 + p:first-letter { font-size: 2em; line-height: 0; /* The line-height must be adjusted to compensate for the increased font size, otherwise the leading for the overall line is disrupted. I find that any values below 0.4 work. */ }\n\nThe beauty of adding these refinements (many more of which are demonstrated by\nJon Tan, including \u201cdrop caps\u201d and \u201coutdents\u201d) contextually is that they are\nactivated only when semantically meaningful and appropriate. For instance, our\n:first-letter style above is appropriate only for introductory copy. Because\nthe introductory paragraph is always (in this particular schema) preceded by\nan h1 heading, we have a way to bind its style to its particular role in the\ndocument\u2019s flow. In other words, we can honor its meaning through its design.\n\nAs long as we rigorously adhere to semantic HTML, we can employ many nuances\nthat are impervious to both the rearrangement of the page itself and the\nintroduction of dynamic content.\n\n## Conclusion\n\n(Image: primatage)\n\nWalking down an aisle in a library, I no more than glance at the vast majority\nof books shelved on either side of me. Only a madman would suggest that my\ndisregard of these books should sanction their pages being torn out.\nNonetheless, because research has shown that visitors don\u2019t read the average\nWeb page in full, and because the \u201csuccess\u201d of a page is more easily measured\nby user action than cognition, we are often encouraged to marginalize our\nwriting in favor of visual signifiers or action cues.\n\nSure, most people will \u201cbounce\u201d your content, but if you really have something\nto say, don\u2019t alienate the people who are willing to give your writing a\nchance. Good typography does justice to your words, and good wording does\njustice to your ideas. If readers are comfortable reading your type, then they\nwill more likely be comfortable with what you are writing about.\n\nExplore more on\n\n#### Smashing Newsletter\n\nTips on front-end & UX, delivered weekly in your inbox. Just the things you\ncan actually use.\n\n#### Front-End & UX Workshops, Online\n\nWith practical takeaways, live sessions, video recordings and a friendly Q&A.\n\n#### TypeScript in 50 Lessons\n\nEverything TypeScript, with code walkthroughs and examples. And other printed\nbooks.\n\n#### Browse All Smashing Magazine Topics\n\n  * Accessibility\n  * Best practices\n  * Business\n  * Career\n  * Checklists\n  * CSS\n  * Data Visualization\n  * Design\n  * Design Patterns\n  * Design Systems\n  * E-Commerce\n  * Figma\n  * Freebies\n  * HTML\n  * Illustrator\n  * Inspiration\n  * JavaScript\n  * Mobile\n  * Performance\n  * Privacy\n  * React\n  * Responsive Design\n  * Round-Ups\n  * SEO\n  * Typography\n  * Tools\n  * UI\n  * Usability\n  * UX\n  * Vue\n  * Wallpapers\n  * Web Design\n  * Workflow\n\nWith a commitment to quality content for the design community.\n\nFounded by Vitaly Friedman and Sven Lennartz. 2006\u20132024.\n\nSmashing is proudly running on Netlify, TinaCMS and Swell.\n\nFonts by Latinotype.\n\n  * \u270e Write for us\n  * Contact us\n  * About us (Impressum)\n  * Privacy policy\n  * Membership login\n  * Delivery times\n  * Advertise\n\n", "frontpage": false}
