{"aid": "40159572", "title": "Prompt-Based Feature Engineering: Generative AI Generates Data", "url": "https://nqln.substack.com/p/prompt-based-feature-engineering", "domain": "nqln.substack.com", "votes": 1, "user": "Naa4", "posted_at": "2024-04-25 16:28:31", "comments": 0, "source_title": "Prompt-Based Feature Engineering Part 1: Generative AI Generates Data", "source_text": "Prompt-Based Feature Engineering Part 1: Generative AI Generates Data\n\n# nick\u2019s datastack\n\nShare this post\n\n#### Prompt-Based Feature Engineering Part 1: Generative AI Generates Data\n\nnqln.substack.com\n\n#### Discover more from nick\u2019s datastack\n\nI am a data practitioner with a background in machine learning, statistics,\nand economics.\n\nContinue reading\n\nSign in\n\n# Prompt-Based Feature Engineering Part 1: Generative AI Generates Data\n\n### Adding LLMs to your data pipeline can feel like magic.\n\nnick\n\nApr 24, 2024\n\nShare this post\n\n#### Prompt-Based Feature Engineering Part 1: Generative AI Generates Data\n\nnqln.substack.com\n\nShare\n\nGetting data sucks. Getting good data sucks even more. In 2024, this is still\na fundamental truth about working in the data industry. It applies to data\nanalysts, data scientists, and data engineers more or less equally and is the\nreason for memes such as the classic \"data science is 90% data cleaning\".\nThanks to generative AI, this is no longer the case.\n\nHere is a pretty basic thought: generative AI can generate data. This might\nsound trivial at first. Many people have experienced AI models generating\ntexts, images, and videos. If you put your data hat on, however, this can have\nbig implications for your workflow and pipelines.\n\nUp until now, if you wanted to add new information to your data set, you would\ntypically search on google (good luck!), visit official statistics websites\nwith UIs straight from the 90s, etc. Thankfully, the good people at OpenAI,\nMistral, and others did the hard work for us and encoded this information in\ntheir models. We only need to reconstruct it via the right prompts.\n\n##\n\nFrom Berlin to the Rhine and then Adidas\n\nTo appreciate the convenience and efficiency of this new workflow, let's build\na data set from scratch. We start from a column of three major european cities\nwith great data scenes: Berlin, London, and Paris.\n\n    \n    \n    df = pd.DataFrame(['Berlin', 'London', 'Paris'], columns=['city'])\n\nFor the analysis, we use gpt-3.5-turbo in combination with dpq. dpq is a\npython package for prompt-based feature engineering. We initialise the agent\nas follows.\n\n    \n    \n    dpq_agent = dpq.Agent( url=\"https://api.openai.com/v1/chat/completions\", api_key=YOUR_API_KEY, model=\"gpt-3.5-turbo\" )\n\nWe only need three inputs for this: an endpoint url, the API key and a model\nname. Now, we are ready to add new columns.\n\n####\n\nOne-to-One Information\n\nLet\u2019s add the country for each city. The simplest prompt is:\n\n> \"You return the country of a city.\"\n\nTo implement this functionality, we create a new function. We specify the\nmessage and pass it to dpq as follows.\n\n    \n    \n    messages = [ { \"role\": \"system\", \"content\": \"You return the country of a city.\" }, { \"role\": \"user\", \"content\": \"Italy\" }, { \"role\": \"assistant\", \"content\": \"Rome\" }, ] # Add new function dpq_agent.return_country = dpq_agent.generate_function(messages)\n\nHere, dpq creates a new function called \u201creturn country\u201d. When calling this\nfunction with a column as input, it appends the row content to the message and\nsends the API requests in parallel. When we run this, we get the following\noutput.\n\nWell, that was pretty easy. We can think about this type of information as a\none-to-one mapping with one bit of information matching one row in the data\nframe. Other examples of this would be adding the population size, time zone,\netc.\n\n####\n\nSystem: Do More Stuff\n\nIn this first example, we saved the step of trying to find information in\nanother data sets and merging in the relevant column. Next, we have the LLM do\nmore work for us. Consider the following prompt.\n\n> \u201cYou return the longest river in a country.\u201d\n\nCreating a dpq function for this prompt in the same way as above, we get the\nfollowing results.\n\nThink about what this would typically require: finding the data, then\ncleaning, sorting, and merging it. Now, we literally write a single sentence.\nIn contrast to the previous case, this is not directly one-to-one since there\nare many rivers in most countries and we let the LLM select the longest.\n\n####\n\nKick It Up a Notch\n\nAs a final, slightly contrived example, let\u2019s try this:\n\n> \u201cFor a given country, you return the company in the main stock exchange that\n> is among the top 5 in terms of market capitalisation and comes first in the\n> alphabet.\u201d\n\nImplementing this prompt, we get these three companies.\n\nThinking about how much work this saves us, it genuinely feels like magic.\n\n##\n\nMagic but not Perfect\n\nIn this first part, we saw that adding LLMs to your data pipeline is a\npotential game-changer. Using prompts to populate columns with information is\nincredibly convenient. Of course, like anything in life, this approach comes\nwith trade-offs.\n\nThe most obvious factor: hallucinations. Since LLMs are probabilistic in\nnature, we currently do not have guarantees on the outputs. Therefore, until\nwe have new tools for evaluation and data validation, we will have to check\nthe output and make sure it is what we expect. In general, however, data is\nnever perfect, just good enough. Hence, there are many use cases where the\nadded value of using an LLM will be substantial. On a related note, we also\nhaven\u2019t touched on the topic of prompt engineering. It can take a couple\niterations to get this right if we, for example, want to obtain outputs in a\ncertain format.\n\nWe will look into prompt-based data processing including formatting and other\ntopics in the upcoming parts of this series! In the meantime, feel free to add\npull requests to the dpq repo on Github with prompts you have found useful!\n\ndpq repo\n\nShare this post\n\n#### Prompt-Based Feature Engineering Part 1: Generative AI Generates Data\n\nnqln.substack.com\n\nShare\n\nComments\n\nReady for more?\n\n\u00a9 2024 nick\n\nPrivacy \u2219 Terms \u2219 Collection notice\n\nStart WritingGet the app\n\nSubstack is the home for great culture\n\nShare\n\n## Create your profile\n\n## Only paid subscribers can comment on this post\n\nAlready a paid subscriber? Sign in\n\n#### Check your email\n\nFor your security, we need to re-authenticate you.\n\nClick the link we sent to , or click here to sign in.\n\n", "frontpage": false}
