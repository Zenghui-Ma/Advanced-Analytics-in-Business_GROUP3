{"aid": "40052812", "title": "In app help evolved from paper to AI", "url": "https://www.commandbar.com/blog/in-app-help-history/", "domain": "commandbar.com", "votes": 1, "user": "FinnLobsien", "posted_at": "2024-04-16 14:58:05", "comments": 0, "source_title": "In-app \"help\" wasn't always this annoying (it was worse)", "source_text": "In-app \"help\" wasn't always this annoying (it was worse)\n\nHumane's AI pin is a victim of its own hype (Product mistakes were made)\n\nRead post \u2197\n\nAirchat: Why Naval Ravikant is building yet another social network\n\nRead post \u2197\n\nGo to Latest \u2197\n\nGo to Latest \u2197\n\nUser Assistance\n\nOur bread and butter.\n\nArtificial Intelligence\n\nThe latest from AI @ CommandBar.\n\nProduct Management\n\nThings we've uncovered on our journey.\n\nTrending Tags\n\nArtificial Intelligence Changelog\n\nCommandBar Tips Company News Customer stories Growth HelpHub LangChain Product\nManagement Startup Advice Unboxings UX Best Practices\n\nThe AI Collection\n\nThe AI Collection\n\nGo to Guide \u2197\n\nThe AI Collection\n\nThe AI Collection\n\nStart Reading \u2197\n\nBest of 2023\n\nBest of 2023\n\nGo to Guide \u2197\n\nBest of 2023\n\nBest of 2023\n\nStart Reading \u2197\n\nSee all \u2197\n\nEpisode 1 Creating Gmail\n\nGo to Episode \u2197\n\nEpisode 2 Superhuman\n\nGo to Episode \u2197\n\nEpisode 3 The Hashtag\n\nGo to Episode \u2197\n\nGo to podcast \u2197\n\nSee all episodes \u2197\n\nChangelog\n\n6 minute read \u00b7 Published April 4, 2024\n\n# In-app \"help\" wasn't always this annoying (it was worse)\n\nFinn Lobsien Content, CommandBar\n\nUX Best Practices\n\nTable of contents\n\n  1. In-app help: How it started\n  2. \u2022 Help and product were bundled\n  3. \u2022 The knowledge base era\n  4. \u2022 How SaaS changed in-app help\n  5. \u2022 Why you still need a knowledge base\n  6. Where in-app help is now\n  7. Where in-app help is going\n\nLatest Update April 8, 2024\n\nImagine you run into an issue with a SaaS product. With a sigh, you poke\naround to make it work, swatting away the product tours and hints coming to\n\u201chelp\u201d you. If that fails, you scour the docs for an answer with elevated\nblood pressure. Can\u2019t find anything? Bring up AI chat, which hallucinates an\nanswer. With your blood boiling, you write a support ticket you\u2019ll only get an\nanswer to in a few hours.\n\nIt\u2019s crazy that we consider this experience frustrating. Not too long ago,\nthis bad boy right here would\u2019ve been your only option:\n\nToday, we complain about \u201cannoying\u201d in-app help that any internet user 20\nyears ago would dream of. Few people know that better than Tonia Sharp. She\u2019s\nworked with documentation and technical writing for decades, all within the\nsoftware industry including for on-prem, private cloud, and SaaS applications.\nWith 30 years of documentation and technical writing experience, Tonia is\npassionate about user-focused content that makes customers\u2019 jobs easier.\n\nI spoke with her about how in-app help has evolved, how user expectations have\nskyrocketed and the potential future of user assistance.\n\n## In-app help: How it started\n\nToday, we can ship product improvements right after writing the code. Need to\nedit something in a doc? Make the change and hit save.\n\nWhen Tonia started her career, creating documentation and help was harder:\n\n### Help and product were bundled\n\nToday, we link out to documentation without thinking about it. But before\nubiquitous high-speed internet, help came with the product.\n\nUsing a format called WinHelp, software came with .hlp files which opened as\nseparate windows and looked like this:\n\nThese were hard-coded, Tonia told me, meaning you had to wait for a new\nproduct release before you could make any changes. And product releases were\nmore sporadic in those days, when software was still burned onto CD-ROMs.\n\nThis made documentation harder:\n\n  * You couldn\u2019t refer to elements in the products directly as you can with modern solutions like CommandBar nudges. This increased the chance of users misunderstanding what you meant.\n  * Documentation had to be perfect because you couldn\u2019t fix mistakes without major costs.\n\nWith the advent of the internet, the era of hard-coded in-app help faded.\n\n### The knowledge base era\n\nLike a lot of things, the internet changed in-product help. As Tonia describes\nit \u201cEveryone loved [...]knowledge bases. Now you had it on a website\u2014it was a\nlot easier and it wasn\u2019t involved with the app build at all.\u201d\n\nThe same way the internet helped blogs ignore the schedule newspapers went to\nprint, documentation became easier to update. Web-hosted help docs made it\neasier to fix errors, restructure docs or add missing parts.\n\nTonia shares that this created a new primitive: First, a help button emerged\nthat opened the knowledge base in your browser to its home page. This required\nno developer input. You could edit the knowledge base to ship updates and\nusers could see that updated knowledge base.\n\nBut there was an issue: Users still had to navigate to the relevant parts of\nthe documentation. And if documents aren\u2019t named intuitively or users are too\nfrustrated, the might never realize their intent.\n\nPage-level linking fixed this: You could couple where someone is in your\nproduct with a specific help doc. Clicking the \u201c?\u201d button from the design\nsettings directly sent you to the help docs for that setting. This sent users\ndirectly where they needed to go\u2014but also put engineers back into the\nequation: They needed to tie different buttons to different pages in help\ndocs.\n\nThis was great, but Tonia described it as brittle. Ultimately, developers\nstill had to maintain the links and keep them current. Automatic redirects\nhelped with this, but it still created more dependencies.\n\nThis practice is still in use with many software products. But that doesn\u2019t\nmean in-app help stopped evolving. Because the internet enabled the cloud,\nwhich enabled SaaS:\n\n### How SaaS changed in-app help\n\nWhile SaaS is a business model, we often use the term for any cloud-hosted,\nbrowser-run software. And if you no longer need to install your app in the\nuser\u2019s operating system, in-app help changed as well.\n\nTonia started her next sentence \u201cAs we move over to SaaS, or with any product\nthat relies on adoption and feature discovery...\u201d\n\nI\u2019ll share her insights on this in a second, but I want to highlight something\nimportant in this half-sentence. Before SaaS made software ubiquitous and\ncheap(er), adoption and engagement weren\u2019t much of an issue.\n\nFirst, because it was hard to get data and second, because users didn\u2019t have\nmany options. If you were lucky enough to have an alternative, switching meant\npaying hundreds of dollars for the program and spend a few hours installing it\nfrom 9 DVD-ROMs.\n\nThis means worrying about user engagement is a relatively recent phenomenon,\nwhich influenced in-product help: \u201cDocumentation teams as a whole were getting\nfrustrated with leading people out of the product for documentation answers.\u201d\n\nTonia remembers then being involved in UX writing and tooltips. This coupled\nin-app help more directly with what a user does in the product. Instead of\nwriting \u201cfind the button that says \u201csubmit\u201d, you could now highlight the\nsubmit button with a tooltip or emphasize it importance with poignant UX copy.\n\nThis improved the user experience. Instead of opening two windows, they saw\neverything in one window with a more personalized experience, which boosted\nuser engagement. But this better experience also required more work:\n\n\u201cIt still wasn\u2019t easy to change, and it still involved really tight\nintegration with engineering.\u201d\n\nShe relates a story about help breaking whenever a URL changed, which required\ndevelopers to fix the problem. Engineering time is one of the scarcer\nresources in most tech companies\u2014and they\u2019re unlikely to prioritize\ndocumentation.\n\nThere were better tools for UX, but that didn\u2019t mean UX got better: When a\nsystem is great in theory, but breaks when tested, it\u2019s not such a great\nsystem.\n\nOne of the most important pillars of in-app help is availability. It should be\nthere when the user needs it. Unless that\u2019s guaranteed, the user assistance\ngets worse.\n\n### Why you still need a knowledge base\n\nImprovements in in-app help didn\u2019t make knowledge bases worthless. Tonia told\nme that knowledge bases and public documentation are now sales tools: They\nconvince developers to buy because they accurately describe the product\n(sometimes, they\u2019re even funny).\n\nSo far, there have been two categories of help: Knowledge bases you link to\nand in-app help like tooltips. Now, they\u2019re merging.\n\n## Where in-app help is now\n\nIn 2024, in-app user assistance is in flux yet again: With tools like\nCommandBar, you can bring what used to be an external knowledge base in-app.\nGenerative AI user assistance tools like HelpHub and Copilot feed off of\npublic help documentation, they can surface the most relevant content inside\nthe app.\n\nInstead of only surfacing the right page, AI can surface the right part of a\npage, or even combine multiple sources to generate an answer.\n\nTonia also mentioned that (as is inevitable with new technology), this has\ncreated another challenge: You\u2019re no longer writing for users, but you need to\nmake sure the AI needs to pick up what you wrote correctly.\n\n## Where in-app help is going\n\nAI has put the software world into upheaval. Having seen so many\ntransformations in in-app help, Tonia is under no illusion that it won\u2019t\nchange again. I asked her where she thought help might evolve in the age of\nAI.\n\nShe believes AI solutions like HelpHub will be mandatory moving forward: After\nthe user inputs a text query, they surface a helpful paragraph, not a maybe-\nhelpful link.\n\nTonia\u2019s mention of internal testing surprised me: Using LLMs for testing\ndocs\u2014if the AI used the correct docs but spat out an awkward answer, that\nmight require updating the docs.\n\nWe also briefly jammed about the idea of personalizing in-app help by\ncustomizing responses to specific user types. An example of this would be\nusing the same source material, but instructing the AI (based on analytics) to\nanswer differently:\n\n  * If the user is a power user (skip the basics and make it short)\n  * If the user has never used the product (explain everything in detail, use metaphors where necessary)\n\nThis feels futuristic, but is possible in CommandBar today by inserting a\nsystem prompt based on user properties. That might look something like this:\n\nThose are the exact things we pursue with user assistance: Personalization,\nbetter targeting, fewer clicks and, most importantly of all, non-annoyingness.\n\nFinn Lobsien Finn\u2019s passion for technology started early, when he appointed\nhimself chief installer of bloated freeware on the family computer. Since\nthen, his taste in products has improved (no more browser toolbars!) while his\nresearch skills still serve him well as a writer and all around creative\nperson at CommandBar. When he\u2019s not writing, you\u2019ll find him climbing, hiking\nor reading about obscure parts of history.\n\n### We are not accepting new subscribers at this time.\n\n#### Join the waitlist\n\nand we\u2019ll see what we can do.\n\nUp Next\n\n## Harnessing the power of LangChain: A deep dive into five innovative\nprojects\n\nRead Now\n\n## What's hot\n\nArticle\n\n## Introducing Nudges and Questlists\n\nGareth Wilson\n\nCompany News\n\nArticle\n\n## What happens when the GUI meets AI?\n\nJames Evans\n\nProduct Management\n\nArticle\n\n## Announcing our Series A\n\nJames Evans\n\nCompany News\n\nShop the latest UX accessories at CommandBar today.\n\nShow me CommandBar\n\nCopyright \u00a9 Foobar, Inc. 2024\n\n", "frontpage": false}
