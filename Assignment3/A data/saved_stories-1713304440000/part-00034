{"aid": "40052752", "title": "How to use conditional targeting to improve an app's rating", "url": "https://criticalmoments.io/blog/improve_app_ratings", "domain": "criticalmoments.io", "votes": 5, "user": "scosman", "posted_at": "2024-04-16 14:53:57", "comments": 0, "source_title": "Boost Your App's Rating: A Practical Guide to App Review Prompts", "source_text": "Boost Your App's Rating: A Practical Guide to App Review Prompts\n\n  * Docs\n  * Blog\n  * Pricing\n  * Account\n\n  * Docs\n  * Blog\n  * Pricing\n  * Account\n\nBack to Blog\n\nApr 16, 2024\n\n# Boost Your App's Rating: A Practical Guide to App Review Prompts\n\n## Tips for targeting app review prompts to increase your App Store rating.\n\n    \n    \n    app_\n\n\u2605\n\n\u2605\n\n\u2605\n\n\u2606\n\n\u2606\n\nEvery mobile app developer is well aware of the significant role app reviews\nand ratings play. Insufficient reviews can breed distrust towards your app. A\nlow average rating can deter users from downloading your app due to concerns\nabout its quality.\n\nDevelopers have been trying to find an edge for app ratings for years. Over a\ndecade ago, Appirater [1] launched the first tool for optimizing the timing of\nwhen to ask users for an app review. It demonstrated that politely requesting\na user to rate your app at the optimal moment can significantly increase the\nvolume and significantly improve your average rating. Developers have been\nrefining this strategy over the years by experimenting with various targeting\nand timing tactics to boost their ratings. In interviews with mobile\ndevelopers, we found that almost every app has custom conditional logic for\ndetermining when to request users to post a review.\n\nThis blog post distills app-rating best practices we've gleaned from\ndeveloping apps and interviewing other developers. We cover 19 strategies,\nincluding avoiding review prompts when a user's battery is low, steering clear\nof distracted users, and pausing prompts after significant updates. We also\nguide you on integrating these tactics into your app with minimal effort.\nContinue reading to learn how to optimize your app review prompts effectively!\n\nJust want the code?\n\nThroughout this blog post, we'll illustrate examples of targeting review\nprompt timings using strings like device_battery_level > 0.2. Our SDK can use\nthese conditional strings directly, without hardcoding and with the ability to\nupdate your logic any time over-the-air. Naturally, these strategies can also\nbe implemented in your own codebase.\n\nTo learn about how the Critical Moments SDK can be used to implement all of\nthese concepts, refer to the Tooling section.\n\n## About Rating Optimization\n\nThere are two types of users who review your app.\n\nFirst, users who visit the App Store for the sole purpose of reviewing your\napp. Second, users you request to provide a review, following which they do.\n\nYou have little control over the first group of users who actively go to the\nApp Store to review your app. You cannot predict their actions, nor can you\nprevent them. A secret we've learned from years of tuning app reviews is that\nthe average rating from these users is usually significantly lower than the\nratings from the second group, those who agree to leave a review when\nprompted.\n\nWhy is this so? Well, it turns out that users who are dealing with an issue or\nfrustration are more inclined to leave a review than those who are content\nwith your application.\n\nFor instance, let's compare Apple's built-in Calculator app to a third-party\ncalculator app:\n\nApple CalculatorThird Party Calculator\n\nWhy does the Apple Calculator app, presumably with a much larger user base,\nhave less than 1% of the review count, and 15x more one-star ratings per\ncapita? The answer is simple: Apple doesn't prompt users to review its\nCalculator app. The ratings are primarily composed of the vocally dissatisfied\nminority (type 1 users), and it shows. Apple doesn't need to prioritize\nratings as their app comes preinstalled and most users will likely never visit\nits App Store page. As an app developer, you don't have such an option.\n\nHere is a great way to think about prompting users to review your app:\n\n> You solicit reviews from your users to ensure that the silently satisfied\n> majority have representation in the App Store rating. If you don't, your\n> rating will soon be overpowered by the vocal discontented minority.\n\nFortunately for quality apps, the satisfied group is generally a lot larger\nthan the unhappy minority. It's always a good time to initiate prompts for\nreviews to significantly enhance your app's rating in the App Store. Fine-\ntuning frequency, user selection, and timing can greatly influence your app\nrating.\n\n## Check Device Conditions\n\nThere are certain moments that are universally poor for asking users to rate\nan app.\n\nLow Battery alert via MKBHD\n\n#### Low Battery or Low Power Mode\n\nWhen the battery level is critically low users are unlikely to want to spend\ntime reviewing an app.\n\nExample condition: device_battery_level > 0.2 && !device_low_power_mode\n\n#### No Internet Connection or Low Data Mode\n\nIt's ineffective to request reviews if the user lacks an internet connection.\nSince review prompts can only be shown a limited number of times per app [2],\navoid wasting them when the user is offline or in low data mode.\n\nExample filter: has_active_network && !low_data_mode\n\n#### User Distractions\n\nA user who is on a call, listening to a podcast, or driving is likely\ndistracted and not in a good position to provide a review.\n\nExample: !on_call && !other_audio_playing && !has_car_audio\n\n#### Device is Inactive\n\nOften, people set down or lock their phones right after accomplishing a task\nin an app. Avoid showing the review prompt if the device is placed face-up or\nface-down, or if the screen is locked. Remember, Apple restricts the frequency\nof review prompts, so each opportunity counts.\n\nExample: device_orientation != 'face_up' && device_orientation != 'face_down'\n&& foreground\n\n## Don't Ask Too Often\n\nRegularly prompting users for reviews can become annoying. Apple even sets\nlimits on how often you can display the review prompt. If you decide to\nimplement a pre-prompt asking users about reviewing, it's important to check\nwhen you last asked them before showing it.\n\nExample: (eventCount('ask_for_review') == 0 || lastEventTime('ask_for_review')\n< now() - duration('21d'))\n\n## Check App Version\n\nAlways consider the version of the app that the user is running before asking\nfor a review. Be aware that these values can change over time, hence requiring\nover-the-air update capabilities to push the new values to old clients.\n\nOut of date apps\n\n#### Avoid Outdated App Versions\n\nSome users may not update their apps frequently. Avoid asking these users for\nreviews, especially if they are running an older app version that may have\nknown bugs or service API compatibility issues.\n\nExample: versionGreaterThan(app_version, '2.4.0')\n\n#### Buggy Releases\n\nAvoid asking users to review your app if they are using a version with serious\nknown bugs.\n\nExample: app_version not in ['buggy_version_1', 'buggy_version_2']\n\nMoreover, consider leveraging our messaging tools to notify users on impacted\nbuilds about available updates that address these bugs!\n\n## Consider Their Device\n\nThe type and condition of the device a user operates may negatively impact\ntheir experience. You may want to filter based on device characteristics.\n\n#### Exclude Older OS Versions\n\nIf your app relies on newer APIs or performs better on the latest OS versions,\navoid prompting for reviews on outdated OS versions.\n\nExample: !versionLessThan(os_version, '17.0')\n\n#### Exclude OS Versions With Known Bugs\n\nSometimes new OS updates from Apple/Google come with bugs that negatively\naffect app functionality and lead to poor reviews. Filter out these versions\nto avoid getting reviews during these periods. Use OTA updates to prevent\nreview prompts on problematic OS versions.\n\nExample: os_version not in ['14.3.2', '14.3.3']\n\n#### Device Category\n\nIf your app is optimized for specific device types like phones, tablets,\nCarPlay, or TVs, concentrate your review prompts accordingly to that platform:\n\nExample: user_interface_idiom == 'phone'\n\n#### Exclude Older Devices\n\nApps that are memory or graphics-intensive may not perform as well on older\ndevices. While it's good to allow older devices access to your app, it is\nadvisable to target review requests to devices where the app performs\noptimally.\n\nExample: ((device_model_class == 'iPhone' &&\nversionGreaterThan(device_model_version, '13.0') || (device_model_class ==\n'iPad' && versionGreaterThan(device_model_version, '11.0')))\n\n#### Check Localization\n\nNot every app supports every language. Users who aren't native speakers of\nyour app's interface languages might not experience it as seamlessly as\nothers.\n\nExample: locale_language_code IN ['en', 'es', 'de']\n\n## Pause After Major Updates\n\nPeople Hate Change\n\nAfter introducing significant user experience (UX) changes in your app, give\nusers some time to adjust before asking for reviews. Major updates might\ninitially confuse or frustrate users, which can lead to a temporary drop in\nratings, even if the update is beneficial in the long term. This pause also\ngives you time to find and fix any real UX issues you might have introduced in\nthe update!\n\nExample for a significant app overhaul, version 2.0: app_version not in\n['2.0', '2.0.1', '2.0.2']\n\n## Check Essential Permissions\n\nSome apps require specific permissions to function optimally. If a user has\ndenied these essential permissions, consider waiting until it's resolved to\nask for a review.\n\nWaze without GPS? It's unlikely to get a positive review.\n\nExamples:\n\n  * For a photo editor that needs access to the camera or photo library: (camera_permission == 'authorized' || photo_library_permission == 'authorized')\n  * For a run tracker app that relies on GPS: location_permission_detailed == 'authorized_always'\n  * For a smart home app, where Bluetooth is essential: bluetooth_permission == 'authorized'\n  * For a chat app which which is much better if it can access contacts: contacts_permission == 'authorized'\n\nSee below for examples of how Critical Moments can help address issues like\nthese.\n\n## Prompt at the Right Time\n\nTiming is crucial when it comes to asking for app reviews. Here are some\nthings to consider to optimize the timing of your review prompts.\n\n#### Ensure Sufficient User Experience Before Review\n\nAllow users adequate time to engage with your app's core features before\nasking for a review. This assures that they have a well-rounded experience to\nbase their review on. For example:\n\n  * For a game: max_level_reached >= 5\n  * For a language learning app: eventCount('picked_language') > 0 && eventCount('completed_written_lesson') > 2 && eventCount('completed_spoken_lesson') > 2\n  * For a meditation app: eventCount('completed_meditation') > 3\n  * Ensure the app is not too recently installed:app_install_date < now() - duration('7d')\n\n#### Ask After an \u201cAha Moment\u201d\n\nEach app has a special moment where the user feels its value: reaching a\nstreak in Duolingo, completing a meditation in Calm, or finishing backing up\nyour photos in Google Photos. In that moment the user feels maximal\nappreciation for the app, and its place in their life. This is the best time\nto prompt for an app review!\n\nOh, and please don't ask right after an app launch, or when the user is in the\nmiddle of a task. That's a sure fire way to get frustrated reviews.\n\nWith Critical Moments, you can try different triggers for when the app review\nprompt is shown to find the best one for your app. This includes updating the\ntrigger over the air, without app updates.\n\n#### Avoid Users Having Negative Experiences\n\nIt's best not to prompt users who are clearly having a negative experience\nwith your app. Some examples of how different apps might detect this:\n\n  * For a game where the user is frequently losing: eventCount('level_failed') / eventCount('level_passed') < 2.0\n  * For a social app where user hasn't followed many people: followed_count < 5\n  * For a backup app hindered by slow internet speeds, or the backup is still in progress: total_bytes_backed_up / total_backup_time_s > 750 && total_bytes_backed_up / total_bytes_to_back_up > 0.95\n\nIf users are struggling, the inverse conditions can be used to help impacted\nusers resolve their issue!\n\n#### Pause Prompting When Appropriate\n\nSometimes external factors like a service outage or a recent price increase\ncan make it wise to temporarily stop asking users for reviews.\n\n#### Be Creative!\n\nUltimately, each app has unique moments where users are most likely to give\npositive feedback. Identify and target these opportunities effectively. For\nexample:\n\n  * For a concert suggestion app which uses your Spotify library: canOpenUrl('Spotify:')\n  * For an app used for navigating the New York subway, best used by a local: location_approx_city == 'New York' && location_approx_region == 'NY'\n  * For a weather app during specific weather conditions: weather_condition IN ['Rain', 'Snow'] && weather_cloud_cover > 0.80\n  * For a business-focused app during business hours: formatTime(now(), 'hod') => 9 && formatTime(now(), 'hod') < 17\n  * An audiophile app where the quality can't be heard over bluetooth audio: !has_bt_headphones\n\nCritical Moments have over 100 targeting properties, which might make sense\nfor your app. Check out the list for more ideas!\n\n#### Don't be Too Restrictive\n\nRemember that maintaining a significant volume of review prompts is crucial.\nThis helps balance the influence of the discontent minority. Make sure you\naren't too restrictive with filters you add, or else you risk having too few\nreviews.\n\nThe suggestions built into our template are either temporary or affect a small\npercentage of your user base.\n\n## Tooling: How to Build the Ultimate App-Review Prompt System\n\nThe strategies discussed above can significantly boost your app rating, but\nimplementing them from scratch isn't trivial. Critical Moments is designed to\nsimplify the integration of a sophisticated targeting system for review\nprompts (and other optimizations).\n\n> Yes, this is where we highlight how awesome our tool is and why using it\n> could be more efficient than developing your own solution. Read on to see if\n> you agree \ud83d\ude09\n\n### Over the Air Updates (OTA)\n\nUsing OTA updates to adjust the logic for showing app review prompts is\ncrucial for ongoing optimization.\n\n  * Updates are essential for strategies like stopping review prompts on buggy releases or outdated app versions, which aren't known in advance and can't be hardcoded.\n  * Updates enable rapid adaptation of your strategy across all client devices. Without OTA, each update would require an additional app update and rollout, slowing down the process considerably.\n  * Remote update enables the rapid A/B testing of different strategies (we plan to cover this more in an upcoming blog post!).\n\nRemember, if you go the route of developing your own, your OTA updates should\ninclude both the logic and the triggers for when the logic is executed.\n\n### Powerful Properties\n\nWe've mentioned about 20 properties helpful for app reviews in this blog (like\ndevice_battery_level, os_version, has_active_network, etc). Implementing,\ntesting, and maintaining each property individually across OS updates can be\ndemanding. Critical Moments maintains these properties, along with\napproximately 100 others that could assist in optimizing your review\nstrategies.\n\n### User Engagement Database\n\nCritical Moments tracks your users' journey through the app by establishing a\nprivate, local database on each device. This allows for over-the-air updates\nof conditional strings, which can query the frequency and recency of events\nwithin the app. We offer powerful built-in events for tracking sessions, app\nlaunches, and completed actions. Additionally, you can customize this system\nwith events that are specific to your app's needs.\n\nAll this is done without compromising user privacy: the data remains entirely\non the device, and conditions are evaluated locally.\n\n## Addressing the Root Cause\n\nWhile avoiding review prompts for users facing issues is beneficial, it's even\nmore effective to address their problems directly. This generally means\ndeveloping a high-quality app and quickly fixing any bugs. However, sometimes\nunexpected issues can slip into a release.\n\n> With Critical Moments, you can deploy targeted fixes over the air to your\n> apps, preventing negative reviews before they happen.\n\nIf users are struggling with an aspect of your app, use in app messaging to\npoint them to a solution or conditional feature flags to disable the issue for\nimpacted users.\n\nProactive notification can prevent negative reviews.\n\nMore examples:\n\n  * During a service outage, push native messaging to impacted users over the air. Explain the issue is known, and a solution is on the way.\n  * If you discover an issue with dark mode on iOS 15, disable it for impacted devices with a remote conditional feature flag: dark_mode_enabled = !versionLessThan(os_version, '16.0').\n  * Notify users who have an app version with a known bug that a new release is available which includes a fix for the issue. This can be done with an in-app banner, which includes a direct link to the update in the App Store.\n  * Deliver an important announcement via an in-app banner and/or in-app browser. This can include showing native UI in app versions released before the announcement was known.\n  * User blocked permissions? Show a modal or banner explaining the issue, including a deeplink into settings to resolve it.\n  * If a user is stuck on a difficult game level, recommend repeating the tutorial or give them a hint.\n\n## Get Started\n\nBoosting your app's rating isn't just about collecting as many reviews as\npossible\u2014it's about smartly navigating when and whom to ask. The tools and\nstrategies we've covered are designed to make this easier, helping you get\nbetter feedback and showcase the best of what your app has to offer.\n\nIf you're looking to improve your app's reviews, why not try out some of the\ntargeted tactics we've discussed? Start with the easy wins and experiment to\nsee what works best for your app. Remember, every app is unique, and the best\nstrategy for you will depend on your specific audience and their needs.\n\nWe're here to help you on this journey, and we'd love to hear how these\nstrategies are working for you. Got a story to share, or maybe a question?\nDrop us a note, we're all about sharing insights and learning together.\n\nIf you're ready to take your app review game up a notch, check out our App\nRating Developer Guide for step-by-step instructions on how to implement these\nideas.\n\nGet Started\n\nProduct Tour\n\nFootnotes:\n\n  * [1] Appirater on Github\n  * [2] Apple - Ratings, reviews, and responses\n\nOn this page:\n\nAbout Rating Optimization\n\nCheck Device Conditions\n\nDon't Ask Too Often\n\nCheck App Version\n\nConsider Their Device\n\nPause After Major Updates\n\nCheck Permissions\n\nPrompt at the Right Time\n\nTooling\n\nAddressing the Root Cause\n\nGet Started\n\nContributors:\n\nSteve Cosman\n\nShare this article:\n\nJump to section\n\n  * About Rating Optimization\n  * Check Device Conditions\n  * Don't Ask Too Often\n  * Check App Version\n  * Consider Their Device\n  * Pause After Major Updates\n  * Check Permissions\n  * Prompt at the Right Time\n  * Tooling\n  * Addressing the Root Cause\n  * Get Started\n\n# The Mobile Growth SDK\n\n## Critical Moments helps you increase conversions, improve app ratings, and\nmake bugs disappear.\n\nProduct Tour\n\nGet Started\n\nHome Docs Blog Pricing Account Github Contact Legal\n\n", "frontpage": false}
