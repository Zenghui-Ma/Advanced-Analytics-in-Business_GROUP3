{"aid": "40133773", "title": "JavaScript-Based Style Sheets (1996)", "url": "https://www.w3.org/submissions/1996/1/WD-jsss-960822", "domain": "w3.org", "votes": 1, "user": "vintagedave", "posted_at": "2024-04-23 16:24:57", "comments": 0, "source_title": "JavaScript-Based Style Sheets", "source_text": "JavaScript-Based Style Sheets\n\n# JavaScript-Based Style Sheets\n\n### \"JSSS\" Initial Proposal\n\nAuthors:\n\n    Lou Montulli montulli@netscape.com\n    Brendan Eich brendan@netscape.com\n    Scott Furman fur@netscape.com\n    Donna Converse converse@netscape.com\n    Troy Chevalier troy@netscape.com\nDate:\n\n    Aug 19, 1996\n    Aug 22, 1996\n\n## Abstract\n\nThis document specifies a method to attach styles to HTML documents using the\nexisting property-based language JavaScript. This document does not attempt to\nexplain the JavaScript syntax. JavaScript documentation can be found at\nhttp://home.netscape.com/comprod/products/navigator/version_2.0/script/script_info/index.html.\n\n## 1 Basic Concepts\n\nDesigning simple style sheets is easy. One only needs to know a little HTML\nand some simple JavaScript assignment statements. For example, to set the text\ncolor of 'H1' elements to blue, one can say:\n\n    \n    \n    document.tags.H1.color = \"blue\"\n\nThe example above is a simple example of using JavaScript to set the color\nproperty of all 'H1' tags to \"blue\". While the example influences only one of\nmanyproperties used in rendering an HTML document, it qualifies as an\nindependent style sheet. Combined with other style sheets it will determine\nthe final presentation of the document.\n\nFurther examples within this specification assume \"document\" is implicitly\nscoped. Therefore the above example would read:\n\n    \n    \n    tags.h1.color = \"blue\"\n\n### 1.1 Containment in HTML\n\nIn order for style sheets to influence presentation, the user agent (UA) must\nbe aware of their existence. Another W3C working draft, HTML3 and Style Sheets\n[4], describes how to link HTML with style sheets:\n\n    \n    \n    <HTML> <HEAD> <TITLE>title</TITLE> <LINK REL=STYLESHEET TYPE=\"text/Javascript\" HREF=\"http://style.com/cool\" TITLE=\"Cool\"> <STYLE TYPE=\"text/javascript\"> tags.H1.color = \"blue\" </STYLE> </HEAD> <BODY> <H1>Headline is blue</H1> <P STYLE=\"color = 'green'\">While the paragraph is green. </BODY> </HTML>\n\nThe example shows three ways to combine style directives and HTML:\n\n* the 'LINK' element to link an external style sheet\n* a 'STYLE' element inside the 'HEAD' element\n* and a 'STYLE' attribute on an element inside 'BODY'. This option mixes style with content with a corresponding loss of the advantages of traditional style sheets\n\nThe 'LINK' element references alternative style sheets that the reader can\nselect, while imported style sheets are automatically merged with the rest of\nthe style sheet.\n\nTraditionally, UAs have silently ignored unknown tags. As as result, old UAs\nwill ignore the 'STYLE' element, but its content will be treated as part of\nthe document body, and rendered as such. During a transition phase, 'STYLE'\nelement content may be hidden using SGML comments:\n\n    \n    \n    <STYLE><!-- tags.H1.color = \"blue\" --></STYLE>\n\nSince the 'STYLE' element is declared as \"CDATA\" in the DTD (as defined in\n[4]), conformant SGML parsers will not consider the above style sheet to be a\ncomment that is to be removed.\n\n### 1.2 Inheritance\n\nIn the first example, the color of 'H1' elements was set to blue. Suppose we\nhave an 'H1' element with an emphasized element inside:\n\n    \n    \n    <H1>The headline <EM>is</EM> important!</H1>\n\nIf no color has been assigned to 'EM', the emphasized \"is\" will inherit the\ncolor of the parent element, so it will also appear in blue. Other style\nproperties are likewise inherited.\n\nInheritance starts at the oldest ancestor, at the top-level element. In HTML,\nthis is the 'HTML' element which is followed by the 'BODY' element. In order\nto set a \"default\" style property, one can use 'BODY' as selector:\n\n    \n    \n    with(tags.BODY) { color = \"black\"; bgColor = \"white\"; }\n\nThis will be effective even when the author has omitted the 'BODY' tag (which\nis legal) since the parser will infer the missing tag. The example above sets\nthe text color to be black and the background color to white.\n\nSome style properties are not inherited from the parent element to the child\nelement. Most often it is intuitive why this is not the case. For example, the\n'background' property does not inherit, but the parent element's background\nwill shine through by default.\n\n### 1.3 Class as Selector\n\nTo increase the granularity of control over elements, HTML3 proposes a new\nattribute: 'CLASS'. All elements inside the 'BODY' element can be classed and\nthe class can be addressed in the style sheet. The keyword 'all' is used to\nspecify that all tags within the class are effected by the style property:\n\n    \n    \n    <HTML> <HEAD> <TITLE>Title</TITLE> <STYLE TYPE=\"text/javascript\"> classes.punk.all.color = \"#00FF00\" </STYLE> </HEAD> <BODY> <H1 CLASS=punk>Way too green</H1> </BODY> </HTML>\n\nThe normal inheritance rules apply to classed elements; they inherit values\nfrom their ancestors in the document structure.\n\nOnly one class can be specified per selector. 'classes.punk.rap' is therefore\nan invalid selector. (Contextual selectors, described below, can have one\nclass per simple selector.)\n\n### 1.4 ID as Selector\n\nHTML3 also introduces the 'ID' attribute which is guaranteed to have a unique\nvalue over the document. It can therefore be of special importance as a style\nsheet selector. The 'ID' attribute allows particular stylistic exceptions to\nbe expressed.\n\n    \n    \n    ids.z098y.letterSpacing = \"0.3em\" <P ID=z098y>Wide text</P>\n\n### 1.5 Combining Classes and IDs as Selectors\n\nIt is sometimes desirable to reference only those tags that are within a\nparticular set defined by a class. By specifying the tag name instead of using\nthe 'all' keyword, only those tags matching the name and within the class will\nbe effected.\n\n    \n    \n    <style type=\"text/javascript\"> classes.foo.H1.color = \"red\" </style> <h1 class=\"foo\">This should be red</h1> <h1>This should be in the normal document color</h1>\n\nThis example sets all 'H1' tags that belong to the class \"foo\" to the color\nred.\n\n### 1.6 Contextual Selectors\n\nInheritance saves designers typing. Instead of setting all style properties,\none can create defaults and then list the exceptions. To give 'EM' elements a\ndifferent color, one may specify:\n\n    \n    \n    with(tags) { H1.color = \"blue\"; EM.color = \"red\"; }\n\nWhen this style sheet is in effect, all emphasized sections within or outside\n'H1' will turn red. Perhaps one only wanted 'EM' elements within 'H1' to turn\nred; this can be specified with a native JavaScript method that assigns a\nsearch pattern, based on arguments, to a function called \"contextual\":\n\n    \n    \n    contextual(tags.H1, tags.EM).color = \"red\"\n\nThe selector is now a search pattern on the stack of open elements. This type\nof selector is referred to as a \"contextual selector\". Contextual selectors\nconsist of several simple selectors as arguments to the \"contextual\" function.\nOnly elements that match the last simple selector (in this case the 'EM'\nelement) are addressed, and only so if the search pattern matches. Contextual\nselectors look for ancestor relationships, but other relationships (e.g.\nparent-child) may be introduced in later revisions. In the example above the\nsearch pattern matches if 'EM' is a descendant of 'H1'; that is, if 'EM' is\ninside an 'H1' element.\n\n    \n    \n    with(tags) { contextual(UL, LI).color = \"red\"; contextual(UL, UL, LI).color = \"blue\"; }\n\nHere, the first selector matches 'LI' elements with at least one 'UL'\nancestor. The second selector matches a subset of the first: 'LI' elements\nwith at least two 'UL' ancestors. The conflict is resolved by the second\nselector being more specific due to the longer search pattern.\n\nContextual selectors can look for tags, classes, IDs or combinations of these:\n\n    \n    \n    contextual(tags.DIV, tags.P).color = \"green\"; contextual(classes.reddish.all, tags.H1).color = \"red\"; contextual(ids.x78y, tags.CODE).background = \"blue\";\n\nThe first selector matchies all P tags within a DIV tag. The second selector\nmatches all H1 elements with an ancestor class 'reddish'. The third selector\nmatches all 'CODE' elements that are descendants of the element with\n'ID=x78y'.\n\n### 1.7 Comments\n\nTextual comments are defined by JavaScript and are similar to those in the C\nand C++ programming language:\n\n    \n    \n    tags.EM.color = \"red\"; /* red, really red!! */ tags.B.color = \"blue\"; // blue, really blue\n\nComments cannot be nested.\n\n## 2.0 Typographical Elements\n\nSome common typographic effects are associated not with structural elements\nbut rather typographical items as formatted on the canvas. Here we attempt to\ndemonstrate some common effects.\n\n### 2.1 The 'firstLine' Style\n\nThe following is used to apply special styles to the first line as formatted\non the canvas:\n\n    \n    \n    <STYLE TYPE=\"text/javascript\"> tags.P.firstLine.fontStyle = \"small-caps\"; </STYLE> <P>The first line of an article in Newsweek.\n\nOn an text-based UA, this could be formatted as:\n\n    \n    \n    THE FIRST LINE OF AN article in Newsweek.\n\n(In the above example, the UA chose to replace small-caps text with capital\nletters since small-caps fonts were not available. This specification does not\ndescribe how UAs should render documents when the necessary resources, such as\ncolors and fonts, are not available.)\n\nThe lines array can be indexed to apply a style to any particular line within\na block element.\n\n### 2.2 The 'firstLetter' Style\n\nThe 'firstLetter' style is used for \"initial caps\" and \"drop caps\" which are\ncommon typographic effects. This is how you could make a dropcap initial\nletter span two lines:\n\n    \n    \n    <HTML> <HEAD> <TITLE>Title</TITLE> <STYLE TYPE=\"text/javascript\"> with(tags){ P.fontSize = \"12pt\"; P.lineHeight = \"12pt\"; P.firstLetter.fontSize *= 2; // 200% P.firstLetter.float = \"left\"; SPAN.textTransform = \"uppercase\"; } </STYLE> </HEAD> <BODY> <P><SPAN>The first</SPAN> few words of an article in The Economist.</P> </BODY> </HTML>\n\n(The 'SPAN' element is being proposed as a new character-level element for\nHTML3.)\n\nIf a text-based UA supports the 'firstLetter' style, the above could be\nformatted as:\n\n    \n    \n    ___ | HE FIRST few words | of an article in the Economist..\n\nThe 'firstLetter' style can be attached only to a block-level element.\n\n## 3.0 Using Programming Language Constructs in Style Sheets\n\nJavaScript is a powerful programming language. It can therefore be used to do\nthings ordinary style sheet languages could not. For instance, functions and\nassigned values may be used to make the expression of style information easier\nfor the style sheet creator. In addition, complex calculations and the\nquerying of external properties reflected into the JavaScript scope maybe used\nto calculate property values in new and unique ways.\n\n### 3.1 Assigning Style-Evaluating Functions\n\nTo assign a style function to a tag, one can use the \"apply\" property. The\nfunction assigned to the \"apply\" property will be run each time the tag is\nencountered:\n\n    \n    \n    <style type=text/javascript>\n    \n    \n    evaluate_style() {\n    \n    \n    if (color == \"red\"){ color = \"blue\"; fontStyle = \"italic\"; } else if (color == \"blue\"){ color = \"green\"; fontWeight = \"bold\"; fontStyle = \"normal\"; } else if (color == \"green\") { color = \"red\"; fontStyle = \"medium\"; } }\n    \n    \n    tag.UL.color = \"green\"; tag.UL.apply = evaluate_style();\n    \n    \n    </style>\n\nThis style when applied to a nested list can have the following effect:\n\n  * First nesting\n    * second nesting\n      * third nesting\n        * fourth nesting\n          * etc...\n\nFunctions can be assigned to any addressable tag as follows:\n\n    \n        tags.DIV.apply = evaluate_style(); classes.foo.all.apply = evaluate_style(); ids.foo.apply = evaluate_style(); contextual(tags.DIV, tags.H1).apply = evaluate_style();\n\nMuch more complicated and/or useful examples can be imagined.\n\n### 3.2 Evaluating Expressions for Property Values\n\nAny property can be assigned the result of a JavaScript expression. JavaScript\nexpressions can be used to calculate complicated values and to query other\nproperties which may be reflected.\n\nHere is an example:\n\n    \n    \n    tags.IMG.width = (500 * 4/3) * .3; tags.IMG.width = .50 * document.width; if(visual.colorDepth > 2) { body.bgColor = \"white\"; body.color = \"blue\"; } else { body.bgColor = \"black\"; body.color = \"white\"; }\n\nAs more properties are reflected into JavaScript, the expressive power\nincreases dramatically. Style sheets will be able to customize the document to\nthe user's particular environment.\n\n### 3.3 Simplifying Assignment Using Methods\n\nMethods can be used to simplify the assignment of some values. For instance\nthe assignment of margins can be made easier as follows:\n\n    \n    \n    // manual assignment with(tags.P) { topMargin = 30; bottomMargin = 30; rightMargin = 30; leftMargin = 30; } // assignment using a method tags.P.margins(30, 30, 30, 30);\n\n## 4 Precedence Rules\n\nMore than one style sheet can influence the presentation simultaneously. There\nare two main reasons for this feature: modularity and author/reader balance.\n\n  * modularity\n\n    A style sheet designer can combine several (partial) style sheets to reduce redundancy:\n    \n    \n    <style src=\"http://www.style.org/punk\"></style> <style src=\"http://www.style.org/funk\"></style> <style language=text/javascript> tags.H1.color = \"red\" /* override imported sheets */ </style>\n\n  * author/reader balance\n\n    Both readers and authors can influence the presentation through style sheets. To do so, they use the same style sheet language thus reflecting a fundamental feature of the web: everyone can become a publisher. The UA is free to choose the mechanism for referencing personal style sheets.\n\nSometimes conflicts will arise between the style sheets which influence the\npresentation. The order in which styles are read in defines the precedence\norder with the last style taking precedence. The exception to that rule is\nthat reader's style sheets always take precedence over author's style sheets.\nBoth reader and author rules override UA's default values.\n\n### 4.1 Precedence Order for Tags, ID's and Classes\n\nTo find the value for an element/property combination, the following algorithm\nshould be followed:\n\n  1. Find all declarations that apply to the element/property in question. Declarations apply if the selector matches the element in question. If no declarations apply, the inherited value is used. If there is no inherited value (this is the case on the root element and for properties that do not inherit), the initial value is used.\n  2. Sort the declarations by explicit weight.\n  3. Sort by origin: the reader's style sheets override the author's style sheets which override the UA's default values.\n  4. Sort by specificity of selector: more specific selectors will override more general ones. To find the specificity, count the number of ID attributes in the selector (a), the number of CLASS attributes in the selector (b), and the number of tag names in the selector (c). Concatenating the three numbers (in a number system with a large base) gives the specificity. Some examples:\n    \n        tags.LI /* a=0 b=0 c=1 -> specificity = 1 */ contextual(UL LI)^* /* a=0 b=0 c=2 -> specificity = 2 */ contextual(UL OL LI)^* /* a=0 b=0 c=3 -> specificity = 3 */ classes.foo.all /* a=0 b=1 c=0 -> specificity = 10 */ classes.foo.LI /* a=0 b=1 c=1 -> specificity = 11 */ ids.x34y /* a=1 b=0 c=0 -> specificity = 100 */ *arguments have been shortened for these examples. UL == tags.UL, etc.\n\n  5. Sort by order specified: if two rules have the same weight, the latter specified should live.\n\nThe search for the property value can be terminated whenever one rule has a\nhigher weight than the other rules that apply to the same element/property\ncombination.\n\nA 'STYLE' attribute on an element should be considered as if an ID attribute\nhad been specified at the end of the style sheet. For example:\n\n    \n    \n    <P style='color = \"blue\"'>a paragraph of text</p>\n\nThe UA may choose to honor other stylistic attributes (e.g. 'ALIGN') as if a\n'STYLE' attribute had been used. When in conflict with other stylistic\nattributes, the 'STYLE' attribute should win.\n\n## 5 Formatting model\n\nThis document suggests a simple box-oriented formatting model. Each block-\nlevel element (e.g. 'H1' and 'P', but not 'EM') is surrounded by a box. The\nsize of the box is the sum of the element width (i.e. formatted text or\nimage), the padding, the border and the margins:\n\n    \n    \n    _______________________________________ | | | margin (transparent) | | _________________________________ | | | | | | | border | | | | ___________________________ | | | | | | | | | | | padding | | | | | | _____________________ | | | | | | | | | | | | | | | content | | | | | | | |_____________________| | | | | | |___________________________| | | | |_________________________________| | |_______________________________________| | element width | | box width |\n\nThe size of the margin, border and padding are set with the 'margin', 'border'\nand 'padding' properties respectively. The padding area uses the same\nbackground as the element itself (set with the 'background' property). The\ncolor and style for the border is set with the 'border' property. The margins\nare always transparent, so the parent element will shine through.\n\nThe following example shows how margins and padding format a 'UL' element with\ntwo children. To simplify the diagram there are no borders.\n\n    \n    \n    <STYLE TYPE=\"text/javascript\"> with(tags.UL) { bgColor = \"red\"; topMargin = A; rightMargin = B; bottomMargin = C; leftMargin = D; topPadding = E; rightPadding = F; bottomPadding = G; leftPadding = H: } with(tags.LI) { color = \"white\"; background = \"blue\"; /* so text is white on blue */ margins(a, b, c, d); /* margins is a method that simplifies the assignment of the 4 margin widths */ paddings(e f g h); } </STYLE> .. <UL> <LI>1st element of list <LI>2nd element of list </UL>\n    \n    \n    _______________________________________________________ | | | A UL margin (transparent) | | _______________________________________________ | | D | | B | | | E UL padding (red) | | | | _______________________________________ | | | | H | | F | | | | | a LI margin (transparent, | | | | | | so red shines through) | | | | | | _______________________________ | | | | | | d | | b | | | | | | | e LI padding (blue) | | | | | | | | | | | | | | | | h 1st element of list f | | | | | | | | | | | | | | | | g | | | | | | | |_______________________________| | | | | | | | | | | | | max(a, c) | | | <- note the max | | | | | | | | | _______________________________ | | | | | | | | | | | | | | d | e LI padding (blue) | | | | | | | | | | | | | | | | h 2nd element of list f | | | | | | | | | | | | | | | | g | | | | | | | |_______________________________| | | | | | | | | | | | | c LI margin (transparent, | | | | | | so red shines through) | | | | | |_______________________________________| | | | | | | | | G | | | |_______________________________________________| | | | | C | |_______________________________________________________|\n\nTechnically, padding and margin properties are not inherited. But, as the\nexample shows, the placement of an element is relative to ancestors and\nsiblings so these elements' padding and margin properties have an effect on\ntheir children.\n\nIf the border width had been set (the default value is '0'), the border would\nhave appeared between the padding and the margins.\n\n### 5.1 Vertical formatting\n\nThe width of the margins specify the minimum distance to the edges of\nsurrounding boxes. Two or more adjoining margins (i.e., with no border,\npadding or content between them) are collapsed to use the maximum of the\nmargin values. In the example above, the margins between the two 'LI' elements\nare collapsed by using the maximum of the first LI element's 'margin-bottom'\nand the second LI element's 'margin-top'. Similarly, if the padding between\nthe 'UL' and the first 'LI' element (the \"E\" constant) had been zero, the\nmargins of the UL and first LI elements should have been collapsed.\n\nIn the case of negative margins, the absolute maximum of the negative\nadjoining margins should be deducted from the maximum of the positive\nadjoining margins.\n\n### 5.2 Horizontal formatting\n\nSeven length units influence the horizontal dimension of a box: left margin,\nleft border, left padding, width, right padding, right border, right margin.\nAdded up, these have to be equal to the width of the parent element.\nTherefore, one cannot specify values for all properties and expect them to be\nhonored. The relative strengths between them are as follows:\n\n  1. left border\n  2. right border\n  3. left padding\n  4. right padding\n  5. width\n  6. left margin\n  7. right margin\n\nBy default, the value of the 'width' property is 'auto' which means it will be\nautomatically calculated based on the other properties' values. However, if\n'width' is assigned another value, or the dimensions don't add up for other\nreasons, the property with the lowest rank will be assigned 'auto', i.e.\nautomatically calculated.\n\n### 5.3 Lists\n\nElements with a 'display' property value of 'list-item' are preceded by a\nlabel. The type of label is determined by the 'list-style' property. The label\nis not considered to be a part of the content, and will be placed outside the\ncontent. The rendering of the label should be based on the font and color\nproperties of the element it belongs to.\n\n### 5.4 The Canvas\n\nThe canvas is the part of the UA's drawing surface onto which documents are\nrendered. No structural element of a document corresponds to the canvas. This\ncreates a problem when the document doesn't fill the whole canvas: how should\nthe unfilled area be rendered? HTML extensions have set a precedence in this\narea; attributes on the 'BODY' element set the background of the whole canvas.\nTo support designers' expectations, we introduce a special rule to find the\ncanvas background:\n\n> If the 'background' value of the 'HTML' element is different from\n> 'transparent' then use it, else use the 'background' value of the 'BODY'\n> element. If the resulting value is 'transparent', the rendering is\n> undefined.\n\nThis rule allows:\n\n    \n    \n    <HTML STYLE=\"background = 'http://style.com/marble.png'\"> <BODY STYLE=\"bgColor = 'red'\">\n\nIn the example above, the canvas will be covered with \"marble\". The background\ncolor of the 'BODY' element (which may or may not fully cover the canvas) will\nbe red.\n\nUntil other means of addressing the canvas become available, we recommend\nsetting canvas properties on the 'BODY' element.\n\n### 5.5 Floating elements\n\nUsing the 'float' property, elements can be declared to be outside the normal\nflow of elements. For example, by setting the 'float' property of an image to\n'left', the normal flow will wrap around on the right side. The image's\nposition will be taken from the margin properties.\n\n    \n    \n    <STYLE> with(tags.IMG) { float = \"left\"; leftMargin = \"2em\"; } </STYLE> <BODY> <IMG SRC=star.gif> <P>Some text to show how text wraps around floating images </BODY>\n\nThe above example could be formatted as:\n\n    \n    \n    ___ | |Some text | * |to show how |___|text wraps around floating images\n\nVertical bars and underscore characters are used to indicate the bounding box\nof the image.\n\nTypically, only image elements are set to be floating. However, there is\nnothing that prevents the 'float' property to be used on other elements:\n\n    \n    \n    with(tags.H1) { fontSize = \"medium\"; float = \"left\"; /* run-in header */ }\n\n### 5.6 Replaced Elements\n\nA replaced element is an element which is replaced by content pointed to from\nthe element. For example, in HTML, the IMG element is replaced by the image\npointed to by the SRC attribute. One can assume that replaced elements come\nwith their own intrinsic width and height. If the value for 'width' is 'auto',\nthe intrinsic width should be used as the width of the element. If a value\nother than 'auto' is specified in the style sheet, this value should be used\nand the replaced element should be resized accordingly (the resize method will\ndepend on the media type). The 'height' property is used in the same manner.\n\n## 6 Properties\n\nStyle sheets influence the presentation of documents by assigning values to\nstyle properties. This section lists the defined style properties and their\ncorresponding list of possible values.\n\n### 6.1 Notation for Property Values\n\nIn the text below, the allowed values for each property are listed with a\nsyntax like the following:\n\n> Value: N | NW | NE Value: [ <length> | thick | thin ]{1,4} Value: <url>? <color> [ / <color> ]? Value: <url> || <color>\n\nThe words between \"<\" and \">\" give a type of value. The most common types are\n<length>, <percentage>, <url>, <number> and <color>; these are described in\nthe section on units. The more specialized types (e.g. <font-family> and\n<border-style>) are described under the property where they appear.\n\nOther words are keywords that must appear literally. The slash (/) is also\nconsidered a keyword.\n\nSeveral things juxtaposed mean that all of them must occur, in the given order. A bar (|) separates alternatives: one of them must occur. A double bar (A || B) means that either A or B or both must occur, in any order. Brackets ([]) are for grouping. Juxtaposition is stronger than the double bar, and the double bar is stronger than the bar. Thus \"a b | c || d e\" is equivalent to \"[ a b ] | [ c || [ d e ]]\".\n\nEvery type, keyword, or bracketed group may be followed by one of the\nfollowing modifiers:\n\n  * An asterisk (*) indicates that the preceding type, word or group is repeated zero or more times.\n  * A plus (+) indicates that the preceding type, word or group is repeated one or more times.\n  * A question mark (?) indicates that the preceding type, word or group is optional.\n  * A pair of numbers in curly braces ({A,B}) indicates that the preceding type, word or group is repeated at least A and at most B times.\n\n### 6.2 Font Properties\n\nSetting font properties will be among the most common uses of style sheets.\nUnfortunately, there exists no well-defined and universally accepted taxonomy\nfor classifying fonts, and terms that apply to one font family may not be\nappropriate for others. E.g. 'italic' is commonly used to label slanted text,\nbut the term is not appropriate for sans-serif fonts (whose slanted fonts are\ncalled 'oblique'). This specification suggests a liberal terminology for\ndescribing fonts, and a level of detail similar to common desktop publishing\napplications.\n\nAdditional font characteristics are being worked on in the W3C Fonts working\ngroup.\n\n#### 6.2.1 'fontSize'\n\nValue: <absolute-size> | <relative-size> | <length> | <percentage> Initial: medium Applies to: all elements Inherited: yes Percentage values: relative to parent element's font size\n\n<absolute-size>\n\n    An <absolute-size> keyword is an index to a table of font sizes computed and kept by the UA. Legal values are: [ xx-small | x-small | small | medium | large | x-large | xx-large ]. On a computer screen a scaling factor of 1.5 is suggested between adjacent indexes; if the 'medium' font is 10pt, the 'large' font could be 15pt. Different media may need different scaling factors. Also, the UA should take the quality and availability of fonts into account when computing the table. The table may be different from one font family to another.\n<relative-size>\n\n    A <relative-size> keyword is interpreted relative to the table of font sizes and the font size of the parent element. Legal values are: [ larger | smaller ]. For example, if the parent element has a font size of 'medium', a value of 'larger' will make the font size of the current element be 'large'. If the parent element's size is not close to a table entry, the UA is free to interpolate between table entries or round off to the closest one. The UA may have to extrapolate table values if the numerical value goes beyond the keywords.\n\nIf the value is a number, it is interpreted as a relative keyword where a\nvalue of '1' is equivalent to 'bigger'. For example, if the parent element has\na font size of 'medium', a value of '-2' will make the font size of the\ncurrent element be 'x-small'.\n\nLength and percentage values should not take the font size table into account\nwhen calculating the font size of the element.\n\nFor most properties, length values refer to the font size of the current\nelement. On the 'font-size' property' length units (e.g. 'em' and 'ex'), refer\nto the font size of the parent element.\n\nNote that an application may reinterpret an explicit size, depending on the\ncontext. For example, inside a VR scene, a font may get a different size\nbecause of perspective distortion.\n\nExamples:\n\n    \n    \n    tags.P.fontSize = \"12pt\"; /* absolute size: be careful! */ tags.BLOCKQUOTE.fontSize = -1; tags.EM.fontSize = +1; /* the '+' is optional */ tags.EM.fontSize *= 1.50; /* increase by 150% */ tags.EM.fontSize = \"1.5em\";\n\nIf the suggested scaling factor of 1.5 is used, the latter three rules are\nidentical.\n\n#### 6.2.2 'fontStyle'\n\nValue: normal | italic || small-caps | oblique || small-caps | small-caps Initial: normal Applies to: all elements Inherited: yes Percentage values: N/A\n\nLegal combinations of the values are:\n\n  * one of the four values ('normal', 'italic', 'oblique', 'small-caps')\n  * 'italic' or 'oblique', combined with 'small-caps'\n\nIf the preferred font style cannot be accomplished, the UA should make best\nefforts to find acceptable substitutions. Often, an 'oblique' font can be\nsubstituted by an 'italic' font. If 'small-caps' are not available, capital\nletters of a smaller font size can be used to render small characters if the\nresolution of the output medium is appropriate for this.\n\n    \n    \n    tags.H1.fontStyle(small-caps, italic); // a helper method is called contextual(tags.H1, tags.EM).fontStyle = \"italic\";\n\nIn the example above, emphasized text within 'H1' will appear in normal lower-\ncase italic.\n\n#### 6.2.3 'lineHeight'\n\nValue: <number> | <length> | <percentage> Initial: UA specific Applies to: block-level elements Inherited: yes Percentage values: refers to the font size of the element itself\n\nThe property sets the the distance between two adjacent lines' baselines. It\nonly applies to block-level elements.\n\nWhen a numerical value is specified, the line height is given by the font size\nof the current element multiplied with the numerical value. This differs from\na percentage value in the way it inherits: when a numerical value is\nspecified, child elements will inherit the factor itself, not the resultant\nvalue (as is the case with percentage and other units).\n\nNegative values are not allowed.\n\nThe three rules in the example below have the same resultant line height:\n\n    \n    \n    with(tags.DIV) {\n    \n    \n    lineHeight = 1.2; fontSize = \"10pt\"; /* number */ lineHeight = \"1.2em; fontSize = \"10pt\"; /* length */ lineHeight *= 1.20 /* 120% */ fontSize = \"10pt\"; /* percentage */\n\nIt is suggested that UAs set the initial value to be a number in the range of\n1.0 to 1.2.\n\n### 6.3 Color and Background Properties\n\n#### 6.3.1 'color'\n\nValue: <color> Initial: UA specific Applies to: all elements Inherited: yes\nPercentage values: N/A\n\nThis property describes the text color of an element, i.e. the \"foreground\"\ncolor. There are different ways to specify red:\n\n    \n    \n    with(tags.EM) {\n    \n    \n    color = \"red\"; /* natural language */ color = rgb(255,0,0); /* RGB rage 0-255 */ }\n\n#### 6.3.2 'background'\n\nValue: <url> Initial: empty Applies to: all elements Inherited: no Percentage\nvalues: N/A\n\n* This property describes the background of an element, the surface onto which the content (such as text) is rendered.\n\nCorresponding example:\n\n    \n    \n    tags.BODY.background = \"http://foo.com/background.jpg\";\n\n#### 6.3.3 'bgColor'\n\nValue: <color> Initial: empty Applies to: all elements Inherited: no\nPercentage values: N/A\n\n* This property describes the background of an element, the surface onto which the content (such as text) is rendered.\n\nCorresponding example:\n\n    \n    \n    tags.BODY.bgColor = \"red\";\n\n### 6.4 Text Properties\n\n#### 6.4.1 'wordSpacing'\n\nValue: normal | <length> Initial: normal Applies to: all elements Inherited: yes Percentage values: N/A\n\nThe length unit indicates an addition to the default space between words.\nValues can be negative, but there may be implementation-specific limits. The\nUA is free to select the exact spacing algorithm. The word spacing may also be\ninfluenced by justification (which is a value of the 'align' property).\n\n    \n    \n    tags.H1.wordSpacing = 4\n\nHere, the word-spacing between each word in 'H1' elements would be increased\nwith 4 pixels.\n\n#### 6.4.2 'letter-spacing'\n\nValue: normal | <length> Initial: normal Applies to: all elements Inherited: yes Percentage values: N/A\n\nThe length unit indicates an addition to the default space between characters.\nValues can be negative, but there may be implementation-specific limits. The\nUA is free to select the exact spacing algorithm. The letter spacing may also\nbe influenced by justification (which is a value of the 'align' property).\n\n    \n    \n    tags.BLOCKQUOTE.letterSpacing = \"0.1em\"\n\nHere, the word-spacing between each character in 'BLOCKQUOTE' elements would\nbe increased with '0.1em'.\n\n#### 6.4.3 'text-decoration'\n\nValue: none | [ underline | overline | line-through | blink ]+ Initial: none Applies to: all elements Inherited: no, but see clarification below Percentage values: N/A\n\nThis property describes decorations that are added to the text of an element.\nIf the element has no text (e.g. the IMG element in HTML) or is an empty\nelement (e.g. \"<EM></EM>\"), this property has no effect.\n\nThe color(s) required for the text decoration should be derived from the\n'color' property value.\n\nThis property is not inherited, but children elements should match their\nancestor. E.g., if an element is underlined, the line should span the child\nelements. The color of the underlining will remain the same even if descendant\nelements have different 'color' values.\n\n    \n    \n    tags.BLOCKQUOTE.textDecoration = \"underline\"\n\nWe expect UA vendors to propose several new values on this property.\nFormatters should treat unknown values as 'underline'.\n\n#### 6.4.4 'verticalAlign'\n\nValue: baseline | sub | super | top | text-top | middle | bottom | text-bottom | <percentage> Initial: baseline Applies to: all elements Inherited: yes Percentage values: refer to the 'line-height' of the element itself\n\nThe property affects the vertical positioning of the element. One set of\nkeywords is relative to the parent element:\n\n'baseline'\n\n    align the baseline of the element with the baseline of the parent\n'middle'\n\n    align the vertical midpoint of the element (typically an image) with the baseline plus half the x-height of the parent\n'sub'\n\n    subscript the element\n'super'\n\n    superscript the element\n'text-top'\n\n    align the top of the element with the top of the parent element's font\n'text-bottom'\n\n    align the bottom of the element with the bottom of the parent element's font\n\nAnother set of properties are relative to the formatted line that the element\nis a part of:\n\n'top'\n\n    align the top of the element with the tallest element on the line\n'bottom'\n\n    align the bottom of the element with the lowest element on the line\n\nUsing the 'top' and 'bottom' alignment, unsolvable situations can occur where\nelement dependencies form a loop.\n\nPercentage values refer to the 'line-height' of the element itself. E.g., a\nvalue of '-100%' will lower the element to where the baseline of the next line\nshould have been.\n\n#### 6.4.5 'textTransform'\n\nValue: capitalize | uppercase | lowercase | none Initial: none Applies to: all elements Inherited: yes Percentage values: N/A\n\n'capitalize'\n\n    uppercases the first character of each word\n'uppercase'\n\n    uppercases all letters of the element\n'lowercase'\n\n    lowercases all letters of the element\n'none'\n\n    neutralizes inherited value.\n\nThe actual transformation in each case is human language and UA dependent.\n\n    \n    \n    tags.H1.textTransform = \"uppercase\";\n\nThe example above would put 'H1' elements in uppercase text.\n\n#### 6.4.6 'textAlign'\n\nValue: left | right | center | justify Initial: UA specific Applies to: block-level elements Inherited: yes Percentage values: N/A\n\nThis property describes how text is aligned within the element. The actual\njustification algorithm used is UA and human language dependent.\n\nExample:\n\n    \n    \n    tags.P.textAlign = \"center\"\n\nNote that alignments are relative to the width of the element, not the canvas.\nIf 'justify' is not supported, the UA will supply a replacement. Typically,\nthis will be 'left' for western languages.\n\n#### 6.4.7 'textIndent'\n\nValue: <length> | <percentage> Initial: 0 Applies to: block-level elements Inherited: yes Percentage values: refer to parent element's width\n\nThe property specifies indentation that appears before the first formatted\nline. 'text-indent' may be negative, but there may be implementation-specific\nlimits. An indent is not inserted in the middle of an element that was broken\nby another (such as 'BR' in HTML).\n\nExample:\n\n    \n    \n    tags.P.textIndent = \"3em\"\n\n### 6.5 Box Properties\n\nSee the formatting model (section 4) for examples on how to use the box\nproperties.\n\n#### 6.5.1 'leftMargin', 'rightMargin', 'topMargin', 'bottomMargin', 'margins'\n\nValue: [ <length> | <percentage> | auto ]{1,4} (for 'margin' property) Initial: 0 Applies to: all elements Inherited: no Percentage values: refer to parent element's width\n\nThese properties set the margin of an element: the 'margin' property sets the\nborder for all four sides while the other properties only set their respective\nside.\n\nFor the 'margin' property, the four lengths apply to top, right, bottom and\nleft respectively.\n\n    \n    \n    tags.BODY.margins(\"1em\", \"2em\", \"3em\", \"2em\"} /* top=1em, right=2em, bottom=3em, left=2em */\n\nThe 'margins' method is a shorthand way of setting all the margin values at\nthe same place in the style sheet. These properties allow only one value. The\nlast rule of the example above is equivalent to the example below:\n\n    \n    \n    with(tags.BODY) { topMargin = \"1em\"; rightMargin = \"2em\"; bottomMargin = \"3em\"; leftMargin = \"2em\"; }\n\nThe margins express the minimal distance between the borders of two adjacent\nelements. See the formatting model (section 4) for an example.\n\nWhen margin properties are applied to replaced elements (e.g. IMG), they\nexpress the minimal distance from the replaced element to any of the content\nof the parent element.\n\nNegative margin values are allowed, but there may be implementation-specific\nlimits.\n\n#### 6.5.2 'topPadding', 'rightPadding', 'bottomPadding', 'leftPadding', and\n'paddings'\n\nValue: [ <length> | <percentage> | auto ]{1,4} Initial: 0 Applies to: all elements Inherited: no Percentage values: refer to parent element's width\n\nThe property describes how much space to insert between the border and the\ncontent (e.g. text or image). The order is top, right, bottom, left.\n\nThe surface of the padding area is set with the 'background' property.\n\n    \n    \n    tags.H1.paddings(\"1em\", \"2em\", \"3em\", \"2em\"} /* top=1em, right=2em, bottom=3em, left=2em */ tags.H1.bgColor = \"white\"\n\nThe 'paddings' method is a shorthand way of setting all the padding values at\nthe same place in the style sheet. These properties allow only one value. The\nlast rule of the example above is equivalent to the example below:\n\n    \n    \n    with(tags.BODY) { topPadding = \"1em\"; rightPadding = \"2em\"; bottomPadding = \"3em\"; leftPadding = \"2em\"; }\n\nThe example above sets a 1em padding on all sides. The 'em' unit is relative\nto the element's font.\n\nPadding values cannot be negative. See the formatting model (section 4) for\nmore on these properties.\n\n#### 6.5.3 'borderStyle'\n\nValue: none | solid Initial: medium none Applies to: all elements Inherited: no Percentage values: N/A\n\nSets the existance and style of a border around an object. Any unknown border\nstyle should be treated as \"so \u0327\u00a6\ufffd.\n\n#### 6.5.3 'borderWidth'\n\nValue: number Initial: medium none Applies to: all elements Inherited: no\nPercentage values: N/A\n\nSets the width of a border around an object in pixels, points or \"em\" units.\n\n#### 6.5.4 'width'\n\nValue: <length> | <percentage> | auto Initial: auto Applies to: all elements Inherited: no Percentage values: refer to parent element's width\n\nThis property can be applied to text elements, but it is most useful with\ninline images and similar insertions. The width is to be enforced by scaling\nthe image if necessary. When scaling, the aspect ratio of the image should be\npreserved if the 'height' property is 'auto'.\n\nExample:\n\n    \n    \n    ids.first-image.width = 100;\n\nSee the formatting model (section 5) for a description of the relationship\nbetween this property and the margin and padding.\n\n#### 6.5.5 'height'\n\nValue: <length> | auto Initial: auto Applies to: block-level and replaced elements Inherited: no Percentage values: N/A\n\nThis property can be applied to text, but it is most useful with inline images\nand similar insertions. The height is to be enforced by scaling the image if\nnecessary. When scaling, the aspect ratio of the image should be preserved if\nthe 'width' property is 'auto'.\n\nExample:\n\n    \n    \n    ids.first-image.height = 50;\n\nIf applied to a textual element, the height can be enforced with e.g. a\nscrollbar.\n\n#### 6.5.6 'float'\n\nValue: <side-flow> Initial: none box Applies to: all elements Inherited: no\nPercentage values: N/A\n\nUsing the 'float' property, one can set an element to be floating and indicate\nhow other content will wrap around it.\n\n<side-flow>\n\n    Legal values are: [left | right | none]. If no value is specified, 'none' is assumed. With the value 'none', the element will be displayed where it appears in the text. With a value of 'left' ('right') the margin properties will decide the horizontal positioning of the image and the text will float on the right (left) side of the image. With a value of 'left' or 'right', the element is treated as block-level (so, e.g. the 'text-align' property can be set).\n\nThis property is most often used with inline images.\n\n#### 6.5.7 'clear'\n\nValue: none | left | right | both Initial: none Applies to: all elements Inherited: no Percentage values: N/A\n\nThis property specifies if an element allows floating elements on its sides.\nMore specifically, the value of this property lists the sides where floating\nelements are not accepted. With 'clear' set to 'left', an element will be\nmoved below any floating element on the left side. With 'clear' set to 'none',\nfloating elements are allowed on all sides. Example:\n\n    \n    \n    tags.H1.clear = \"left\"\n\n### 6.6 Classification Properties\n\nThese properties classify elements into categories more than they set specific\nvisual parameters.\n\n#### 6.6.1 'display'\n\nValue: block | inline | list-item | none Initial: according to HTML Applies to: all elements Inherited: no Percentage values: N/A\n\nThis property indicates if an element is inline (e.g. 'EM' in HTML), block-\nlevel (e.g. 'H1' in HTML), or a block-level list item (e.g. 'LI' in HTML). For\nHTML documents, the initial value will be taken from the HTML specification.\n\nA value of 'none' turns the display of the element, including children\nelements and the surrounding box, off.\n\n    \n    \n    with(tags) { P.display = \"block\" EM.display = \"inline\" LI.display = \"list-item\" IMG.display = \"none\" }\n\nThe last rule turns the display of images off.\n\nNote that HTML defines what elements are block-level (called \"Block\nStructuring Elements\") and inline (called \"Phrase Markup\"), and this may be\nhardcoded into some UA implementations.\n\n#### 6.6.2 'listStyle'\n\nValue: <keyword> Initial: disc outside Applies to: elements with 'display'\nproperty value 'list-item' Inherited: yes Percentage values: N/A\n\nThe 'list-style' property describes how list items (i.e. elements with a\n'display' value of 'list-item') are formatted.\n\n<keyword>\n\n    Legal values are: [disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none]. If no value is specified, 'disc' is assumed.\n\nThis property can be set on any element, and it will inherit normally down the\ntree. However, the 'list-style' will only be displayed on elements with a\n'display' value of 'list-item'. In HTML this is typically the case for the\n'LI' element.\n\n    \n    \n    with (tags) { UL.listStyle = \"disc\" OL.listStyle = \"decimal\" /* 1 2 3 4 5 etc. */ OL.listStyle = \"lower-roman\" /* a b c d e etc. */ }\n\n#### 6.6.3 'whiteSpace'\n\nValue: normal | pre | nowrap Initial: according to HTML Applies to: block-level elements Inherited: yes Percentage values: N/A\n\nDeclares how white space inside the element should be handled: the 'normal'\nway (where white space is collapsed), as 'pre' (which behaves like the 'PRE'\nelement in HTML) or as 'nowrap' (where wrapping is done only through BR\nelements):\n\n    \n    \n    tags.PRE.whiteSpace = \"pre\" /* initial value */\n\n## 7 Units\n\n### 7.1 Length Units\n\nThe format of a length value is an optional sign character ('+' or '-', with\n'+' being the default) immediately followed by a unit converting function\nwhich contains a number as an argument\n\nSome properties allow negative length units, but this may complicate the\nformatting model and there may be implementation-specific limits. If a\nnegative length value cannot be supported, it should be clipped to the nearest\nvalue that can be supported.\n\nThere are three types of length units: relative, pixel and absolute. Relative\nunits specify a length relative to another length property. Style sheets that\nuse relative units will more easily scale from one medium to another (e.g.\nfrom a computer display to a laser printer). Percentage units (described\nbelow) and keyword values (e.g. 'x-large') offer similar advantages.\n\nChild elements inherit the computed value, not the relative value:\n\n    \n    \n    with (tags.BODY) { fontSize = \"12pt\" textIndent = \"3em\" /* i.e. 36pt */ } tags.H1.fontSize = \"15pt\"\n\nIn the example above, the 'textIndent' value of 'H1' elements will be 36pt,\nnot 45pt.\n\nThese relative units are supported:\n\n    \n    \n    with(tags) {\n    \n    \n    H1.margin: \"0.5em\" /* ems, the height of the element's font */ H1.margin: \"1ex\" /* x-height, ~ the height of the letter 'x' */ P.font-size: \"12px\" /* pixels, relative to canvas */\n\nPixel units, as used in the last rule, are relative to the resolution of the\ncanvas, i.e. most often a computer display. If the pixel density of the output\ndevice is very different from that of a typical computer display, the UA\nshould rescale pixel values. The suggested \"reference pixel\" is the visual\nangle of one pixel on a device with a pixel density of 90dpi and a distance\nfrom the reader of an arm's length.\n\nAbsolute length units are useful only when the physical properties of the\noutput medium is known. These absolute units are supported:\n\n    \n    \n    with(tags) { H1.margin: \"0.5in\" /* inches, 1in = 2.54cm */ H2.line-height: \"3cm\") /* centimeters */ H3.word-spacing: \"4mm\" /* millimeters */ H4.font-size: \"2pt\" /* points, 1pt = 1/72 in */ H4.font-size: \"1pi\" /* picas, 1pc = 12pt */ }\n\n### 7.2 Color Units\n\nA color is a either a color name or a numerical RGB specification.\n\nThe suggested list of color names is: aqua, black, blue, fuchsia, gray, green,\nlime, maroon, navy, olive, purple, red, silver, teal, white, and yellow. These\n16 colors are taken from the Windows VGA palette and will also be used in\nforthcoming HTML 3.2. The RGB values for these color name are not defined in\nthis specification.\n\n    \n    \n    with(tags) { BODY.color = \"black\" bgColor = \"white\" H1.color = \"maroon\" H2.color = \"olive\" }\n\nRGB colors are specified in the sRGB color space as defined in the appendix of\n[6]. UAs should make reasonable efforts to render colors accurately according\nto the sRGB specification.\n\nValues outside the numerical ranges should be clipped. The three rules below\nare therefore equivalent:\n\n    \n    \n    with(tags.EM.color) { rgb(255,0,0) /* integer range 0 - 255 */ rgb(300,0,0) /* clipped to 255 */ rgb(110%, 0%, 0%) /* clipped to 100% */ }\n\n### 7.4 URL\n\nA Uniform Resource Locator (URL) is identified with a functional notation:\n\n    \n    \n    tags.BODY.background = \"http://www.bg.com/pinkish.gif\"\n\nPartial URLs are interpreted relative to the source of the style sheet, not\nrelative to the document:\n\n    \n    \n    tags.BODY.background = \"yellow\"\n\n## Section 8 Editing considerations\n\nExpressing styles through JavaScript allows the author to generate dynamic\neffects for the document. While this is highly desirable in an interactive\nmedium it can cause problems when using an editor designed for static\ndocuments.\n\nIt is suggested that editors that are designed to edit static documents render\na page using the dynamic style sheet as input and then create a static\nrepresentation from the rendered instance. This process does lose information\nsince the document will no longer have dynamic expressions.\n\nAuthers who generate dynamic styles by hand or by using a dynamic editor\nshould not expect to be able to use a static editor, just as those authors who\ngenerate GIF animations should not expect to be able to use GIF editors that\ndo not support animation.\n\n## Section 9 Printing considerations\n\nThis section is unfinished\n\nSpecial considerations should be made by authors for how a page should look\nwhen printed. Since JavaScript can query the capabilities of a rendering\nengine it should be possible to dynamically adjust the appearence of a\ndocument when printing. For example, a style sheet author may use a JavaScript\nexpression to test if the rendering engine supports color. Since most printers\nare black and white the author may choose to use italics and bold, or\ndifferent fonts to represent what otherwise may have been expressed using\ndifferent colors.\n\nIn the future this specification should be extended to set printer specific\nstyles like page headers and footers. Page break boundaries would also be a\ndesirable feature.\n\n## 10 References\n\n[4] HTML3 and Style Sheets (http://www.w3.org/pub/WWW/TR/WD-style.html)\n\n", "frontpage": false}
