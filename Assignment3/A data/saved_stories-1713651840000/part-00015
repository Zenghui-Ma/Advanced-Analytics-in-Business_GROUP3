{"aid": "40098284", "title": "10x Engineers vs. -10x Burdens", "url": "https://vadimkravcenko.com/shorts/10x-engineers/", "domain": "vadimkravcenko.com", "votes": 3, "user": "bndr", "posted_at": "2024-04-20 15:54:39", "comments": 0, "source_title": "10x Engineers vs -10x Burdens", "source_text": "10x Engineers vs -10x Burdens\n\nVadim Kravcenko\n\n\ud83d\udd25 Newsletter\n\n\ud83d\udd25 Roast my Resume\n\n# 10x Engineers vs -10x Burdens\n\n20 April 2024\n\ncareer development newsletter startups teams\n\n## Table of Contents\n\nI've been reflecting on our engineers\u2019 diverse impact on our projects and the\ntrue meaning behind labels like \"10x engineer\". Over the years, many articles\nhave discussed this concept, some labeling it a myth and others saying you\nneed to have at least one on your team. It\u2019s a hot topic; understandably, this\nterm often sparks debate. Still, I think it's essential to understand the real\nvalue a developer brings to the team beyond any numerical label and their\nleetCode score.\n\nI\u2019m part of the group that thinks 10x engineers are great, and no, it\u2019s not a\nmyth. But I have a more nuanced perspective \u2014 I don't think 10x engineer has\nanything to do with coding and more than that, I think anyone can be a 10x\nengineer. It\u2019s not a personal quality; it\u2019s a cumulative effect of all the\nsmall decisions you make as a software developer \u2014 the tools you choose, the\nway you debug, the way you act with your team mates.\n\nIn my early career, I witnessed first-hand how an average developer can turn\ninto a 10x engineer overnight: We had a high-load project with thousands of\nrequests per second that was developed by a small team \u2014 it was a search\nmodule that had to work fast, and scan a lot of data to match a\nmultidimensional query. Everything was smooth at first glance; the code was\nrunning in production for some time, but some users complained that they\nrandomly received no response.\n\nOver time, the error rates kept climbing, but we had nobody to ask. The\noriginal development team had departed to another project and had zero time to\nhelp us. The product was live, and customers were justifiably upset due to the\nunpredictable behavior resulting from unresolved concurrency issues.\n\nThen, our lead developer steps up. He spends a few days trying to zero down on\nthe issue debugging every line of code. Was he the best engineer I\u2019ve known?\nNo, he wasn\u2019t, but at that moment, his contribution to the project was 10x of\nanyone else on the team. He single-handedly solved the issue we had been\nbattling for over half a year.\n\nReflecting on this, the term \"10x developer\" hardly does justice to the\nessential contributions made. It's not about being ten times faster than\nanother engineer; it's about making the right decisions that lead to\nsignificant positive outcomes for the entire team. If you're fast, but\neverything else brakes, are you really a 10x or a -10x? And it works the other\nway around, too. Someone who is great overall can derail the project overnight\nbecause of wrong assumptions or lack of knowledge.\n\nTherefore, instead of getting hung up on labels that quantify an individual's\noutput, we should focus on recognizing and cultivating the expertise and\ndecision-making skills that drive our projects forward.\n\n## 10x is skewed by perception biases\n\nThe 10x term is flashy. It grabs attention. Someone hacks a solution in a day,\nand boom \u2014 they\u2019re labeled a 10x engineer. The problem is that the term is\nskewed by our perception biases. While we're all busy watching these stars, we\noften overlook the steady, reliable engineers who keep the engines running.\n\nWhy does this happen? Well, our brains love a hero story. We\u2019re wired to\nadmire outliers because they stand out. It\u2019s a survival thing from way back.\nIf someone\u2019s dramatically better at something, we notice, even if it happens\nonce every full moon. This heuristic, while useful in the wild, can skew our\njudgment.\n\nSuch a bad examples of 10x engineer, and completely wrong as well.\n\nOne very common bias is the halo effect. This occurs when our overall\nimpression of a person is skewed by one outstanding trait or achievement. For\nexample, if a team member once solved a high-profile bug efficiently, we might\noverlook their ongoing struggles with project deadlines, still viewing them as\na top performer based on that one time they did something amazing. This can\nlead us to overestimate their abilities, potentially placing undue\nexpectations on them.\n\nThe contrast effect can lead us to undervalue someone\u2019s skills simply because\nthey are less immediately noticeable than those of a more flashy colleague.\nThis might cause us to overlook the steady contributions that are just as\nvital to our success but less visible. It also happens when we compare two\nengineers directly to each other instead of judging them on their own merits.\nLet's say one of our devs just did a killer feature demo right after another's\ndemo didn\u2019t go so well. The second might unfairly come off worse in everyone\u2019s\nminds \u2014 not because their work was bad, but because it was overshadowed.\n\nThe next bias that contributes to a skewed perception of a 10x engineer is\nconfirmation bias. This is when we saw them do something great once and start\npicking up on details that support our narrative and ignore the ones that\ndon\u2019t. If we, for example, label someone as \"-10x,\" we might unconsciously\noverlook their successes and hyper-focus on any slip-ups, reinforcing our\ninitial judgment. \u201cThere\u2019s a bug in production. It must be David again pushing\nsomething buggy.\u201d\n\nThe issue here is that while we\u2019re giving gold stars for flashiness, we might\nnot see the team member who's quietly refactoring code to make it cleaner or\nthe one spending hours mentoring a new colleague. These actions might not\nscream \u201c10x engineer at work\" but are crucial for the long-term success of any\nteam.\n\n## Typical Scenarios and Behavior\n\nAs I mentioned before, 10x vs -10x Engineers debate is mostly related to\ncountless daily decisions, how we react to different situations; it does not\nnecessarily relate to code quality nor to \u201chow smart\u201d the implemented\nalgorithm is. Let\u2019s explore a few scenarios that might better illustrate how\neasy it is to be perceived as a 10x engineer rather than -10x (and vice\nversa).\n\nHandling Bugs in Production: Imagine a situation where a client or a\nstakeholder found some inconsistencies in the application that are related to\nthe functionality that you developed. Think of it as a general rule of thumb\nhow to react when somebody says that your code doesn't work.\n\n    \n    \n    \u2705 10x Engineer: \u201cWe\u2019ll check it out and come back to you.\u201d They quickly isolate the issue using logging tools, fix the bug, update the documentation, and share the resolution in a post-mortem to prevent future occurrences.\n    \n    \u274c -10x Engineer: \u201cIt works on my machine.\u201d Ignores initial reports, blames the environment or user error, and when finally addressing it, applies a hot fix that must be revisited later.\n\nResponding to Code Reviews: A more senior developer is scrutinizing your code,\nsuggesting alternative implementation, and saying you should first refactor it\naccording to the company-wide standards before the Pull Request will be\napproved.\n\n    \n    \n    \u2705 10x Engineer: \u201cThanks for the feedback. I appreciate the suggestions!\u201d Genuinely appreciates feedback, integrates suggestions promptly, and thanks colleagues for their insights. Focuses on what\u2019s better for the product, not pushing their own agenda.\n    \n    \u274c -10x Engineer: \u201cYou\u2019re wrong; my code is perfect.\u201d Reacts defensively to feedback, ignores suggestions, or argues without justification, slowing down the review process. Focuses on ego \u2014 the code that they have written is more important than the overall product improvement.\n\nHandling Overhead and Administration: As you know, software engineering is not\nonly about writing code; there\u2019s a lot of overhead attached to releasing any\nfeature. So, imagine a situation where during the daily meeting the managers\nstart pushing for more transparency through project management tools. They say\nthey lack context and have a hard time keeping the whole boat afloat.\n\n    \n    \n    \u2705 10x Engineer: \u201cYeah, Jira is annoying, but I hear you, it keeps everyone updated and allows you to do your job.\u201d Efficiently manages time to balance development work with necessary administrative tasks, ensuring neither is neglected.\n    \n    \u274c -10x Engineer: \u201cJira sucks; nobody cares about it; it\u2019s not even real work.\u201d Gets annoyed at every presentation, diagram, and ticket management work. Complains about administrative tasks, often letting them pile up or completing them last minute, which impacts project timelines.\n\nIntroducing New Technologies:\n\nIt's been five years since your project was properly refactored. There have\nbeen a lot of changes to the business, a lot of hacks were added to the\ncodebase to cover all the new edge cases that the business growth has\nintroduced. It's about time to do it right, start from scratch to adapt to the\nevolving business needs.\n\n    \n    \n    \u2705 10x Engineer: \u201cLet\u2019s do a proof of concept and see which technology suits us best before we decide which technology to commit to\u201d Evaluates new technologies thoughtfully, considering team capability and project needs, and provides a clear rationale. Strategically addresses technical debt, balancing new technologies with necessary refactoring.\n    \n    \u274c -10x Engineer: \u201cWe should go with angular, as it's the best, because that\u2019s the only framework I worked with and I\u2019m going to argue with you for the next 45 minutes\u201d Pushes for the adoption of new technologies without proper evaluation. Allows technical debt to accumulate unchecked, prioritizing new development at the cost of long-term project health.\n\nDuring Team Meetings:\n\nYou sit down with your team to discuss alternative ways to develop the\nrequested feature. There's many different ways it can be implemented, some are\nsuggesting going serverless, some suggest you should build it with Rust and\non-premise. A lot of good ideas are being thrown back and forth.\n\n    \n    \n    \u270510x Engineer: \u201cLet\u2019s hear everyone\u2019s opinion\u201d Contributes constructively, keeps discussions on track, and respects time limits. Everyone get's to voice their opinion and the best course of action is selected based on the collective decision.\n    \n    \u274c -10x Engineer: \u201cLet\u2019s hear my opinion for 45 minutes.\u201d Dominates conversations, derails topics to irrelevant subjects, argues, or remains disengaged. No decision is made because of wasted time arguing emotionally.\n\nHandling Failed Projects\n\nNot everything goes right. Sometimes you fail. How you act during failures can\nalso separate you from a -10x Engineer. These small interactions matter a lot.\n\n    \n    \n    \u2705 10x Engineer: \u201cOkay, Team, let\u2019s figure out what went wrong without blaming anyone and make sure this never happens.\u201d Analyzes the failure constructively, leads a blame-free retrospective to understand what can be improved, and shares these learnings with the team to prevent future issues. \u274c -10x Engineer: \u201cIt\u2019s Jane\u2019s fault; her code is always buggy.\u201d Shifts blame to others and avoids taking shared responsibility, often obscuring the real reasons behind the project's failure to safeguard their own position.\n\nDealing with Tight Deadlines:\n\nTight Budgets and tight deadlines is the de facto standard in our industry,\nvery few can say they have unlimited budget and they can take it slowly.\nSometimes the management has constraints that they pass down to you that you\nneed to properly act upon.\n\n    \n    \n    \u2705 10x Engineer: \u201cOkay Team, let\u2019s see what we can realistically build\u201d Prioritizes essential features, communicates clearly with stakeholders about realistic expectations, and manages to deliver quality work on time.\n    \n    \u274c -10x Engineer: \u201cOkay I\u2019m out, it\u2019s not my problem\u201d Disengages, cuts corners in testing or documentation, and pushes out subpar work that requires immediate fixes.\n\nScalability Concerns:\n\nTo overengineer or to underengineer? That is the question every developer has\nwhen architecting their microservice.\n\n    \n    \n    \u2705 10x Engineer: \u201cLet\u2019s discuss how much scalability we really need, before over engineering, or under engineering\u201d Designs systems with appropriate level of scalability in mind from the start, allowing for easy adaptation as the user base grows.\n    \n    \u274c -10x Engineer: \u201cLet\u2019s get ready to handle billion requests for this online luggage shop in Nebraska\u201d Neglects scalability as a concept and assumes fantasy numbers, causing the system to be either overengineered and take too long to develop or underengineered and struggle under increased load and necessitating costly redesigns.\n\nMinimum Viable Product (MVP) Development:\n\nI you're a founding engineer or a newly minted technical co-founder, your CEO\nwill go to your for advice on what to build an when to release. It's important\nto understand that the work fills the time allocated for it.\n\n    \n    \n    \u2705 10x Engineer: \u201cLet\u2019s make it good enough and ship it\u201d Focuses on delivering an MVP with just enough features to satisfy early adopters and validate the product concept.\n    \n    \u274c -10x Engineer: \u201cLet\u2019s make it perfect and never ship\u201d Aims for perfectness and feature-complete product at launch, significantly delaying the feedback loop and increasing the risk of failure.\n\nFeature Prioritization:\n\nEvery software engineer has managers they work with. Most of the time the\nmanagers discuss the prioritization with the team and the team gives their\nopinion what should be developed next.\n\n    \n    \n    \u2705 10x Engineer: \"So what do our customers say, what are their biggest pain points?\" Works closely with product management to prioritize features that deliver the most value to customers, ensuring the product roadmap aligns with business goals.\n    \n    \u274c -10x Engineer: \"I want to roll out Kubernetes\" Insists on implementing complex, less impactful features that showcase technical prowess but do not align with user needs or business objectives.\n\nIntegrating Cutting-Edge Technologies:\n\nEveryone is familiar with the technical debt and how carelessly adding new\ntechnologies can quickly push the project into non-maintainability due to all\nthe different frameworks involved.\n\n    \n    \n    \u2705 10x Engineer: \u201cLet\u2019s do a proof of concept and see which technology suits us best before we decide which technology to commit to\u201d Evaluates new technologies thoughtfully, considering team capability and project needs, and provides a clear rationale.\n    \n    \u274c -10x Engineer: \u201cWe should go with angular because that\u2019s the only framework I worked with and I\u2019m going to argue with you for the next 45 minutes\u201d Pushes for the adoption of new technologies without proper evaluation, often leading to increased technical debt.\n\nI hope these scenarios served their purpose in showing that you don't have to\npull all-nighters to deliver highly-complicated software to be considered a\n10x engineer, you just have to choose the right way to act during routine\ntasks while committing solid code.\n\n## The average as the moving force\n\nBig projects move because of the collective effort, not just because of one\nrockstar developer. Sure, having someone who can blast through problems and\ncode like a machine is great. But one person can only do so much, even if they\nare the 10x engineer. They get sick. They take vacations. They have off days.\nThey can quit. Projects that rely too heavily on these superheroes can find\nthemselves in a tough spot when the superhero needs a break.\n\nHiring 10x engineers. Source: workchronicles.com\n\nAs you can see from the scenarios above, stepping up with the right attitude\nis enough to be a 10x engineer in almost any team. And if everyone steps up\nlike that, then you have a 10x team. Think about any major software update or\nproduct launch that went well. Was it just one person? Hardly ever. It was a\nteam who handled thousands of small tasks/complaints/issues/tickets, to get\neverything right.\n\nSo, if you ever feel like you\u2019re just average, remember that it\u2019s the averages\nwho truly run the show. They\u2019re the ones who proactively step up for the 10x\nburst of brilliance and then go back to making something solid and reliable\nthat can last.\n\nLet's aim to appreciate all spectrums of contribution equally. After all, it\u2019s\nthe combined efforts of all types that create truly successful projects\u2014not\njust the moments of individual brilliance.\n\nOther Newsletter Issues:\n\n  * Mental Health in Software Engineering\n  * Falsehoods Junior Developers believe about becoming Senior\n  * Habits of great software engineers\n  * Proper Software Development Estimations\n\n### Reactions\n\nHot! The last couple of years I've been writing about CTO / Tech lead job.\nI've compiled all my knowledge into a printable PDF. I called it \"256 Pages of\nNo Bullshit Guide for CTOs\". So if you're interested, take a look.\n\nHot! If you're a software engineer looking for a job, I started a Roast my\nResume service, where I record a personalized video of me \"roasting\" your CV,\nwhich basically means taking a hard look at your resume as a CTO and\ncommenting on all the good and the bad parts.\n\nNew! \ud83d\ude80 15% OFF for HackerNews Visitors for No Bullshit Guide for CTOs. Give it\na click if you like.\n\nCancel\n\n  * 1\\. Preface\n  * 2\\. 10x is skewed by perception biases\n  * 3\\. Typical Scenarios and Behavior\n  * 4\\. The average as the moving force\n\n#### For Startups\n\n  * \ud83c\udfad Managing difficult software engineers\n\n  * \ud83d\udce2 The silent majority\n\n  * \ud83d\udcda Healthy Documentation\n\n#### For Techies\n\n  * \ud83d\udd52 Rules of Thumb for Software Development Estimations\n\n  * \ud83e\udd77 Things they didn\u2019t teach you about Software Engineering\n\n  * \ud83e\udd39\u2642\ufe0f Habits of great software engineers\n\n#### Popular Issues\n\n  * \ud83d\udcdc Contracts you should never sign\n\n  * \ud83e\udd2b Falsehoods Junior Developers believe about becoming Senior\n\n  * \ud83d\udd10 Security at Startup\n\n  * \ud83e\udd2f Mental Health in Software Engineering\n\n  * \ud83d\uddc4\ufe0f Database Migrations\n\n  * \ud83c\udf93 Product Owner vs Project Managers\n\nNew!\ud83d\udd75\ufe0f\u2642\ufe0f Roast My Resume Hot!\ud83e\udd16 No-Bullshit CTO Guide \ud83d\udd25 Watch Youtube \ud83d\udcda\nDeveloper Q&A\n\n89+ people joined this week\n\n### Get insights from a CTO into your inbox every two weeks.\n\nYou've probably read a few of my articles already, that's the kind of content\nyou should expect in the newsletter. I share my thoughts as a CTO. Some of the\ntopics that I like writing about: building SaaS products, growing teams,\nscaling technology and in general being a good founder and a decent person.\n\nNo spam, unsubscribe at any time\n\n## Developer Q&A Latest\n\n  * How can you tell if you\u2019re a good developer?\n  * I\u2019m finishing university, scared about future career prospects\n  * I have a very poor work-life balance. How can I escape the grind?\n  * What is your unethical CS career\u2019s advice?\n  * My coworker rewrote all my code, what should I do?\n  * How do you know when to use which programming language?\n  * How to get programming experience when you can\u2019t find a job?\n  * Do some people just not have the talent for Software Engineering?\n\n## Popular Issues\n\n  * \ud83d\udd52 Rules of Thumb for Software Development Estimations\n  * \ud83d\udcdc Contracts you should never sign\n  * \ud83e\udd77 Things they didn\u2019t teach you about Software Engineering\n  * \ud83e\udd39\u2642\ufe0f Habits of great software engineers\n  * \ud83e\udd2b Falsehoods Junior Developers believe about becoming Senior\n  * \ud83c\udfad Managing difficult software engineers\n  * \ud83d\udce2 The silent majority\n  * \ud83d\udcda Healthy Documentation\n  * \ud83d\udd10 Security at Startup\n\n## Popular Tags\n\n  * Engineering Growth\n  * Management Tips\n  * Development\n  * Startups\n\n## Work with me\n\n  * CTO-as-a-Service\n  * Fractional CTO\n  * Consulting\n\n\u00a9 2024 Vadim Kravcenko. Built with \u2665 in Zurich. All opinions are my own. I use\nPlausible to track certain anonymous events. Some links are affiliate links\nwhere I earn a commission. Contact me at hi@vadimkravcenko.com\n\n", "frontpage": false}
