{"aid": "40047256", "title": "No I don't want 2, Emacs", "url": "https://www.emoses.org/posts/dont-write-2/", "domain": "emoses.org", "votes": 14, "user": "todsacerdoti", "posted_at": "2024-04-16 00:47:43", "comments": 0, "source_title": "No I don't want 2, Emacs", "source_text": "No I don't want 2, Emacs - Evan Moses\n\n# Evan Moses\n\nMy blog and projects\n\n# No I don't want 2, Emacs\n\n  * Apr 15, 2024\n  * Categories: blog\n  * #emacs , #evil , #elisp\n  * One minute read\n\nThis blog, and the vast majority of the code I write, is written in Emacs with\nevil (a vim emulation mode). I have a nasty habit of mashing :w2<ret> when I\nreally was trying to save the current buffer with :w<ret> . :w2 writes the\ncurrent buffer to a new file called 2, which I don\u2019t believe I have ever done\non purpose.\n\nSo, I added this little gem to my .emacs, and it\u2019s saved me any number of\ntimes:\n\n    \n    \n    (defun my:evil-write (&rest args) \"I constantly hit :w2<ret> and save a file named 2. Verify that I want to do that\" (if (equal \"2\" (nth 3 args)) (y-or-n-p \"Did you really mean to save a file named 2?\") t)) (advice-add #'evil-write :before-while #'my:evil-write)\n\nThe :before-while advice lets you run a function that gets the same arguments\nas the advised function. If it returns a truthy value, the advised function is\nrun as usual, but if it returns nil, the original function is never run.\n\nShare and enjoy.\n\n  * Representing State as interfaces in Go\n\n  * ###### Rendered by Hugo | Subscribe\n\n", "frontpage": true}
