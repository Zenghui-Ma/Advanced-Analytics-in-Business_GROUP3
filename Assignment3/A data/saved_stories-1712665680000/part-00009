{"aid": "39975274", "title": "Chinchilla Squeaks Podcast: Modern Solutions for Securing Software Supply Chains", "url": "https://socket.dev/blog/modern-solutions-for-securing-software-supply-chains", "domain": "socket.dev", "votes": 1, "user": "feross", "posted_at": "2024-04-09 00:51:37", "comments": 0, "source_title": "Chinchilla Squeaks Podcast: Modern Solutions for Securing Software Supply Chains - Socket", "source_text": "Chinchilla Squeaks Podcast: Modern Solutions for Securing Software Supply\nChains - Socket\n\nSign inDemo\n\n# Chinchilla Squeaks Podcast: Modern Solutions for Securing Software Supply\nChains\n\n## On the most recent episode of the Chinchilla Squeaks podcast, Socket CEO\nFeross Aboukhadijeh discusses some of the overlooked risks of using open\nsource code and how modern tools can leverage AI to secure dependencies.\n\nSarah Gooding\n\nApril 9, 2024\n\nSocket CEO Feross Aboukhadijeh recently joined Chris Chinchilla on his\nChinchilla Squeaks podcast to discuss modern solutions for securing software\nsupply chains.\n\nThis episode extends into broader themes of open source maintenance, the\nevolution of dependency management, and the risks of selecting packages simply\nbased on whether they have no known vulnerabilities.\n\nFeross noted the irony in how much scrutiny developers apply to the direct\ncode contributions of their teammates, versus the cursory approval of external\ndependencies, which can carry significantly higher risks, including potential\nsupply chain attacks:\n\n> In a weird way, the teams actually tend to review the source code of their\n> teammates more thoroughly, because when you open a pull request, you get to\n> see the code that they wrote and you get to review it and leave comments on\n> it. But when they bring in like five dependencies that themselves ended up\n> bringing in 150 additional transitive dependencies, everyone just says,\n> \"Yeah, it looks good to me.\" And no one even opens the code up and looks at\n> it. And some of these supply chain attacks - the bar is so low that if you\n> just open up the file, you can often just see, there was no attempt made\n> really to hide this.\n\nThis critical gap \u2014 where developers install any packages they want to use but\ndon\u2019t thoroughly vet them, is what Socket was designed to secure. Many of\nthese packages contain obvious security threats that would be easily\nidentified with minimal examination, but the reality is nobody is reading all\nthe code in their transitive dependencies.\n\nFeross explained how Socket uses static analysis and LLMs to provide real-time\ndetection of supply chain attacks across hundreds of thousands of packages by\ndownloading and reading the source code. By automating this crucial aspect of\nsecuring open source code, Socket enables developers to build secure software\nwith confidence, focusing their code review efforts where they matter most.\n\nListen to the episode on the Chinchilla Squeaks website, and check out the\ntranscript below.\n\nTRANSCRIPT:\n\nChris: I'm Christian Chinchilla. Welcome to my podcast, an enthusiastic ramble\nthrough whatever has taken my interest the past week or so. Expect technology,\ngames, history, travel, geekery, and as always, much, much more.\n\nHello everybody, welcome to another chinchilla squeeze with me, Chris\nChinchilla. This is an episode of interview show and my interview this episode\nis one back from last year i think i have one more from last year after this\none and it was with Feross from Socket.dev, one of the many companies involved\nin software supply chain security. They have an interesting product that deals\nwith vulnerabilities, but also provides visibility, reporting, policy\nenforcement, and all of that. All these various different aspects of software\nsupply chain security, not just looking at vulnerabilities and helping you\nidentify and potentially fix those, but kind of the full gamut and with an\ninteresting chat, an interesting product, one that I will probably look into a\nvideo of soon.\n\nChris: You actually have quite an interesting story, but I think we should\nprobably start a little bit with Socket first, and then, and then come back to\nyou, maybe.\n\nSo Socket is in this fairly active, at the moment, space of software supply\nchain security. Where do you fit into that wider landscape, which is growing,\nso it's always interesting to know which part the companies in it think they\nfit into the most.\n\nFeross: It's a great question because so many people use the word software\nsupply chain.\n\nYou know, that phrase has become a bit of a marketing buzzword. So it's\nimportant to really dig in and say, okay, what do you actually do? Yeah. What\nwould, what would you say you do here?Socket is a developer first security\ntool focused around dependencies and basically helping developers to pick\ndependencies that are safe and secure.\n\nAnd then on the other hand, once dependencies have already been included in an\napplication, we help the security team to understand the risk of those\ndependencies, both in terms of vulnerabilities, which is traditionally been\nwhat tools in the space focus on, but beyond vulnerabilities Socket also helps\ndetect malicious dependencies and other types of risky dependencies.\n\nAnd there's a whole bunch of different angles when it comes to risk that we\nlook at that go really far beyond what a traditional CVE scanning tools.\n\nChris: And you're right because I think a lot of other tools will look for\njust known vulnerabilities in dependencies, but I'm getting the impression\nthat you go further than that.\n\nIs that the case?\n\nFeross:\n\nCorrect. Yeah. Perfect example of the limitations of the known vulnerability\napproach would be, say you have a developer on your team that makes a typo\nwhen they're installing a package and they get one letter wrong. It turns out\nthat a lot of these package managers like npm and pypi, they let anybody\npublish packages under any name with really no vetting process at all.\n\nAnd so a simple mistake like a typo doing during an install command can bring\nin untrusted code from a random publisher. And a lot of the times, I mean,\nI've done this myself and I'm a very security conscious developer and what\nwill happen is, you know, that code in many cases may run, you know, the\nattacker's code immediately using something called an install script.\n\nThat's a huge risk. Just getting a typo there, but then say that package\nactually ends up getting merged and it, you know, maybe it's just something\nthat isn't very popular. You know, maybe it has a hundred downloads a week or\nsomething like that. That's going to be something that almost certainly has no\nknown vulnerabilities, but that doesn't mean it's because the package is safe.\n\nIt's because nobody's really bothered to look at it. You know, it's really\nrelying on human researchers to actually care about. Doing the work to go and\nlook at that package. And so that's one really big problem with the known\nvulnerability approach is just, you know, it'll tell you, Hey, there's no\nknown vulnerabilities, but that doesn't mean it's safe.\n\nChris: That's actually, that's actually a good point. Yeah. And, you know,\nmuch like people squat on website domains that sound a little bit like other\nwebsite domains that people might mistype. I would imagine there's a few\npeople who probably less of a less lucrative, but, well, I suppose it depends,\nbut squatting on.\n\nI don't react with a K. Or And all sorts of strange things like that. But I\nalso noticed because you're So you've got these kind of five tabs of the\nfeatures you cover. And we've mentioned the sort of vulnerability side, but\nyou also cover things like licensing, which is often kind of a secondary\nsecondary tool in the kind of policy tool chain for many companies, I think\nfitting into what you said about the no known vulnerabilities because no one's\nusing it.\n\nYou've also mentioned strange things that I wouldn't even think about here\nwith licensing, like changing licensing, uh, mixed licensing, um, even\nmaintenance, uh, deprecated, no bug tracker, again, that fits into the, you\nknow, if no one's using it. Okay. It's safe, but that's because no one's\ntouched it in five years.\n\nLike that doesn't make it any more safe. Yeah. So there's lots of little more\nsubtleties to some of the things that you're doing that I haven't seen so much\nin, in some of the others. Yeah. That wasn't really a question. That was more\nof astatement.\n\nFeross: No, I mean, I think what we're doing is pretty unique.\n\nIt's, it's something that, you know, we got really interested in doing because\nour whole team is open source maintainers. And so we've really seen the\nproducer side of this equation. More than the consumer side. And so, you know,\nI've seen my fair share of supply chain attacks that, you know, involve\npackages getting compromised, hijacked in various ways.\n\nAnd one of the things that always disappointed me about the way that the\ncommunity the security community handled it, is it, it always felt like it was\nvery reactive. Waiting around for a happy accident for somebody to find that\nbad code was added to one of these packages in one case, you know, the\nmalicious code wasn't caught except for the fact that a new version of the\nnode JS runtime had come out and it happened to deprecate.\n\nOne of the functions that the attacker used in their attack code. And then\nthat started producing a deprecation warning. And then the developers traced\nit, you know, community traced it back to, to the attack in, you know, in this\npackage. So this package was actually, you know, was, was a compromise with\nthe supply chain attack.\n\nBut, you know, it was like if five, six days until it was found and it was a\ntotal accident that, that allowed the community to find it. And so it just, it\njust seemed like, you know, we could write rules to detect these types of\nthings. And, you know, we had seen enough of these attacks that, you know, it\nfelt like we could.\n\nReally produce a pretty comprehensive set of, you know, what do attackers do\nonce they get their hands on a package? And so because of that, we ended up\nbuilding something that, you know, it really is a, it's pretty different in\nthe, in the space of software composition analysis tools or SCA tools, which\nis typically what this area is called.\n\nAnd, and yeah, so we do vulnerabilities of course, but because everybody does\nthat and it's a, it's, you know, it's worth tracking that stuff, it's\nimportant. But we also, we also do. Do a whole bunch of other things, but\n\nChris: actually something, another thing on the front page of your website,\nI'd like to ask more about is, so you've mentioned that a lot of the time, a\nlot of other companies in this space do sort of lean off of fairly large\ndatabases of, of known vulnerabilities and then adds maybe some, some things\non top of those.\n\nBut one thing you're saying here is real time, how, without giving too much\naway, how are you managing to do. Real time across, you know, the hundreds of\nthousands of potential sources of that real time information.\n\nFeross: Great question, and I'm happy to share it. We've been pretty open\nabout how we do this. So the first step is we, you know, we need to have a\ncopy of all the source code of, of all the, all the dependencies that you\nmight possibly use.\n\nUm, this is something that all those known vulnerability vendors don't do.\nThey really just have a database of these known issues, uh, that says, Hey,\nthis version is bad. Here's the version you got to update to, but they, you\nknow, that's basically a human curated database that's maintained by the\nfederal government, actually in the U S uh, the national vulnerability\ndatabase is what it's called and basically, every vendor just downloads that\nand resells it in various ways.\n\nWhat we do is we start from the source of truth, which is what is the code\ngoing to do when you, when you run it, you know, and, and we download all that\nopen source code. And then we, we start by running a static analysis over it\nusing our own in house static analysis engine. And we look for a bunch of\nthings, things like what is this package's capabilities?\n\nDoes it read files? Does it access the network? Does it create child\nprocesses? Does it contain. High entropy blobs of code indicating that there\nmight be obfuscated code or or minified code added that is trying to hide what\nit's doing by being, you know, by obfuscating itself like that, you know, that\ntype of thing.\n\nAnd And so if you see a package that has been around in the community for five\nyears, and suddenly now there's a new patch release that's come out that needs\nto access the network and open up, you know, run some shell commands and\ndownload an exe file, then like probably it's worth having a human take a look\nat that.\n\nAnd so the product will, will tell companies that, and if they'd like to just\nbe told anytime a package, you know, has the use of use of certain\ncapabilities, we can do that. We can send them an alert and say. Hey, you\nknow, this is a new package that's using the network and, and they can, they\ncan then, you know, review it themselves if they'd like.\n\nAnd that's very easy to do in a real time sense, because we have all this\ncode. And when, whenever we see a new package get published, we immediately\nscan it. So we just have a whole bunch of worker servers that are sitting\naround doing this. And if there does happen to be, for example, some package\nthat we haven't scanned and a customer asks us about it through our API or\nthrough an integration, we can actually just.\n\nAnd now analyze it on demand for them and give, give them the results. So, so\nwe're, we're, we're always scanning stuff and looking for these, for these\ntypes of risks. But then the next step we do for, for a lot of teams, they\ndon't want to have, they don't want to waste the time of their developers to\nactually review these, these potentially potential risks, malicious changes or\nthese potentially risky changes. They just want us to tell them when we find\nsomething that's bad in their dependencies and to stop it from getting in the\nfirst place. And so to do that, we, we actually introduced and apologies. It's\ngoing to sound like I'm using buzzwords and stuff here because I'm going to\nsay AI, and I'm going to say LLMs, but we actually found a pretty cool use for\nLLMs here, which is that rather than just, you know, throwing a chat bot\ninterface onto our existing product like, like a lot of people are doing and\ncalling it AI or even, you know, introducing some summarization or something\nlike that into the product. We, we actually use the LLM in a way as a security\nresearcher intern. So how I like to think about it, like we have this, this\nLLM that can look at code, it can describe what it's going to do, even if it's\nobfuscated and it can say, this is the data source.\n\nThis is the data sync. This is what the code seems to be doing. And then we\ncan kind of get it to say, like, does it seem like it's malicious potentially.\nAnd if it does, if it does determine that it does have a, it does have a\nnotion of maliciousness and it's not perfect and there are a ton of false\npositives, but if it does think that something is malicious, we can actually\nlook into it further.\n\nAnd that's actually allowed us to cut down on, on, you know, instead of having\nour human team reviewing, You know, the 7 million NPM package versions that\nhave been published. We can have our team focusing on, on, on stuff that just\nseems very, very high risk and do that approach. We've actually been able to\nfind around 400 malicious packages that are published every week that we take,\nwe get taken down from NPM and PyPI and we protect all of our customers.\n\nAnd while we're in parallel, trying to get those taken down. Yeah. So. So\nyeah, there's a human in the loop and, and, you know, and so it's not, you\nknow, it's not going to be like instant instant if you, if you do want that\nhuman in a loop, but for, for some teams, they they're paranoid enough that\nthey're willing to say, you know, what, like any package that the AI thinks is\nsuspicious, like just.\n\nJust block it until we've had a chance to look at it. And then even more\nparanoid people will go in and say, look, anything that's touching the\nnetwork, anything that's using the file system, any of these capabilities that\nare sensitive also, you know, put those into a, you know, into a review before\nletting them in.\n\nSo just really what risk level you want to accept. And so some of those are\nmore instant than others. Obviously the. human in the loop on our end is\ngonna, it takes a little bit of time, but we're pretty fast. So yeah, does\nthat make sense?\n\nChris: You know, for sure. I just wondered, though, I think this is leading a\nlittle bit towards your, your background and how you got here, which we'll\ncome to next.\n\nBut so you, as far as I can see, you are currently And I think this is\npossibly relating to a lot of the kind of extras you're adding on top. You\nsupport NPM, Go, Maven, PyPi packages. Whereas a lot of other vendors might\nalso have things like containers and I don't know, any, I honestly can't think\nof many other, I suppose, crates or something, you know, you know, there's a\nlot of other things that they also support, but I guess that slightly more.\n\nYou're going for a slightly more curated experience, but are there, are there\nthings that are next on the list to, to add to those four sources?\n\nFeross: Yeah, for sure. The number one request we have right now is more\nlanguage support. And so it's, our main priority is getting more languages so\nthat when we come into a company, we can protect all their repos.\n\nBut I will say that one of the things that I'm proud of is that we're very\nfocused on doing this. One thing and doing it really well. And since it is\nsomething that no one elseis really doing in the way we are. I think it's been\nreceived pretty well by the market because they, they see that, Oh, you know\nwhat, this is a gap that we have, you know, we're letting our developers\ninstall whatever packages they want.\n\nAnd we're not even, you know, in a weird way, the teams actually tend to\nreview the source code of their teammates, you know, more, more thoroughly,\nbecause when you, when you open a pull request, you get to see the code that\nthey wrote and you get to review it and leave comments on it. But when they\nbring in like five dependencies that themselves ended up bringing in.\n\nYou know, 150 additional transitive dependencies. Everyone just says, yeah, it\nlooks good to me. And no one even opens the code up and look, looks at it. And\nsome of these supply chain attacks are so like the bar is so low that if you\njust open up the file, you can often just see, there was no attempt made\nreally to hide this.\n\nThey'll just drop a giant blob of high entropy, you know, encrypted code that\ngets evaluated at runtime right into the bottom of some file. And it's like,\nif you just looked at that, you would have seen it, but no one's doing that.\nAnd, and I mean, and so. To answer to answer your question, I think, I mean,\nat some point we, you know, we, we will expand further into, into different\nareas, but one of the things that.\n\nI'd like to be careful of is you see a lot of security companies do this where\nthey'll basically go for breadth and then, and they'll do this through\nacquiring startups and kind of poorly integrating everything together just so\nthey can say that they have this coverage, but in reality it doesn't really\nwork that well.\n\nAnd, and so our approach, I mean, Our whole team is open source maintainers.\nWe, we really pride ourselves on our craft. I don't think we want to go down\nthe route of, of building, you know, low quality enterprise software and just\nselling it to executives. And then the executives forced the developers to use\nit, even though it's terrible to use.\n\nAnd it makes everybody upset. You know, that's definitely, that would be so\nagainst our, the way we would want to do things that, you know, we're going\nto, we're probably going to take a more, Careful approach than that.\n\nChris: And for the most part, it seems like your main interface is a, is a\nGitHub app. So I guess it sits on those aforementioned pull requests and, and\ndigs a little deeper.\n\nFeross: Yeah, yeah, exactly. I mean, we do have an API and, uh, and other,\nbut, but, but yeah, the GitHub app is definitely the quickest way to get\ngoing. It's a two click install. You just, you Click it. It comes from the\nGitHub marketplace and then you pick the repos you want to protect and then\nthat's it. And then we start, we start scanning all the repos, no changes\nneeded, needed to CI or CD, no tech, you know, developers to go and do a bunch\nof work to add it to every repo and that type of thing.\n\nChris: And I, I wonder if this is a little bit, you know, you, you have NPM,\nGo, Maven, PyPy, but PyPy, I can never remember what it is. And especially\nwith Go and Maven, that's sort of a lot of backend code, but you are sort of\npushing the JavaScript first, uh, quite a bit. And when I look at, and this\ncomes to your background a little bit, but I also see some of your clients\nlike Figma, Versal, Next. js, sort of same people, Brave, Metamask, Storybook,\na lot of very much front end JavaScript people. So it sort of feels like\nthat's definitely the world that you've, you've captivated first anyway. And\nof course, whenever we think of packages, we tend to think of JavaScript\nfirst, even though it's not an original concept, of course.\n\nBut that tends to be the stereotype of where we think so is, is a lot of that\njust because that's the world that you've come from and we can talk about some\nof your projects in a minute, but is it, was it sort of JavaScript first and\nthen the others came later or.\n\nFeross: Yeah, we started with JavaScript first for a couple of reasons.\n\nOne, that's the community that a lot of us came from, so it was easier to get\nadoption there to begin with. But the other big reason, and honestly, even if\nwe came from another community, We would have started with JavaScript first\nbecause it's the largest ecosystem. And it's also had the most, you know, high\nprofile incidents and the most supply chain attacks, frankly, because it has a\nvery, what's the word permissive and welcoming culture where there's very few\nbarriers to entry.\n\nI would say, you know, npm was one of the first package managers to create\nlike a one line, kind of a one command publish. You just type npm publish.\nThere's no signing step. There's no keys to set up. There's nobody to approve\nyour packages. You just, it's just, you can register whatever name you want\nwith one line with a one line command in your terminal.\n\nAnd for that reason, I think they, they were super successful at getting\npeople to publish to npm. And that's why it's one of the reasons why it's the\nlargest, you know, package manager by far. I'll say the other, the other\nreason that npm, uh, both became one of the largest and also has sort of the\nmost attacks that we hear about all the time is because of this culture of\nsmall packages.\n\nAnd I would say this came about for, I think it's a kind of interesting\nreason, which is that it's funny, the phrase dependency, hell, It used to mean\none thing. And now people think of it as they think of npm as dependency hell,\nbecause it's like, you know, you have a thousand dependencies when you just\nget hello world working on your website.\n\nAnd, but the dependency hell used to mean something else. And npm was actually\nthe solution to dependency hell, believe it or not. The dependency hell used\nto mean, used to mean a specific thing. It was when you had, if I have package\nA in my project and it depends on package C. And let's say at version 1.0, I\nneed package C at version 1. 0. And then I add package B to my project. And B\nalso happens to have a dependency on C, but it's version two of C. Now I have\na problem where I have a, and I have B and they both need C, but they need\ndifferent versions of C. And it turns out that like almost every package\nmanager that came before NPM, maybe all, I don't know, but every single one\nthat I've, I've ever used before NPM would just, the package manager would\nthrow up its hands and say, Sorry, you know, I can't we can't install this\nbecause you need two versions of C pick one and and the problem is it's not\nlike it's even in your control.\n\nYou're not even using C. You don't even know what C is. C is a dependency of\nyour dependencies. So now you're just in a situation where you're screwed and\nthere's nothing you can do. And so NPM said, Hey, this is really dumb. Let's\njust install both versions of C. We'll install version one and we'll install\nversion two.\n\nYeah, and then it says we'll just give version one to A and we'll give version\ntwo to B and now everybody gets the version that they want. Now it's not a\nperfect solution because in some cases you might end up with objects.\nDuplication of code. You might end up with an object that you create in, you\nknow, create.\n\nIf A returns the raw, like, Object that C produces and it's a version one of\nthat object that might not be compatible with a version two of that object\nThat's coming from the other library, but in in general it kind of just works\nto do this um And so it solved dependency hell, which was getting yourself\ninto an incompatible situation where you can't proceed but the flip the the\neffect of that was that now suddenly There's no downside as a maintainer For\nadding additional dependencies.\n\nIt used to be that you'd have to worry that you were going to create\ndependency health for your users by adding dependencies, but now you can just\nadd like a hundred dependencies and you'll never create a situation where your\nusers won't be able to install your package.\n\nChris: So including now when we get to NPM trying to install Python and C\ndependencies, which is where it gets really weird.\n\nAnyway, that's a separate, definitely a separate conversation. And I feel like\nI've had that conversation with someone on the show before, but let's just, I\nwould really like to, to know. How you got to where you are, because you've\nbeen around open source for a little while. I can see some of the things that\nintrigued me.\n\nYou've got this MIDI player. I've been experimenting a lot with MIDI and music\nXML again recently. So I've been going back down the MIDI path for the first\ntime in ages, but that's probably not your best known ones. You have a\nWebTorrent client and standard JS, which definitely does ring some bells. And\nthat's Starguide. and Linting. I am actually super into Starguides and\nLinting. Mostly, actually, with English language, I help maintain Some tools\nin, in that department. And I can start to see how that might have led you\ntowards something like Socket. But I don't see a complete path through some of\nthese projects into something like Socket.\n\nSo how did you, how did you get there and why? What, what, what, what was the\nepiphany, the nightmare that you had that made you want to go down this path?\n\nFeross: Yeah, you know, it's hard to connect the dots sometimes for how I\narrived at this place. But I will say that. You know, I got obsessed with a\nweb torrent and this idea of building a torrent client that works in the\nbrowser and that project really Was my main thing from, from, you know, most\nof my twenties, honestly, like, and, and one of the things that you learn with\npeer to peer projects is that security is actually really important because\nyou're dealing with peers on the network that you don't trust.\n\nSo you always have to think about security from the very beginning. It's not\nsomething you can, you can add on later. Um, and so that's always been kind of\nthere. And then also that project is what got me into being an open source\nmaintainer. So while building that, I ended up making standard JS to mostly\njust to prevent people from sending me PRs, which were mostly good, but then\nhad a bunch of problems stylistically or didn't handle errors and things like\nthat, that I could catch with a linter.\n\nAnd, and so before I knew it, I found myself maintaining about a hundred\npackages on NPM and it's one of these things where you start off and you're\nlike, Hooray. Like, you know, I have these users using my code. It's so cool.\nLike, I, I feel like, you know, I'm doing useful work for the world, but\neventually you end up, you end up overburdened with, with, when you get enough\nusers of, of your, of your project and you're just a single maintainer.\n\nAnd so you end up adding other people to help you end up really just having\nmore issues than you can fix and, and, and, and, and so a lot of, a lot of\nquestions start to come up when, when, when, when you are maintaining stuff,\nwhich is like, how do I trust this additional person to, should I give them\naccess to the package or not?\n\nI mean, I, I have a, I have history of maintaining this in a certain way. And\nif I add this additional person, they could just take it in a completely\ndifferent direction. They could be a bad actor, especially if I've never met\nthem in person before. I don't know who they are. And so we, you know, I had a\nfriend who this happened to and, and in 2017, it was, it was very, pretty big\nincident in the NPM community where the event stream package was hacked.\n\nYou might've remembered this basically happened that, And a maintainer was\nadded to a package and he pretended to be good for about a month and made\nreally good changes and then eventually put in a backdoor that targeted a\nspecific company. And so, you know, seeing kind of the way that, you know, the\nway that maintainers do things, but then also just seeing that, that all these\ncompanies, these fortune 500 companies were using my code when I was like a 20\nsomething year old, you know, that was also very, very humbling.\n\nAnd it made me realize that these companies don't really know what's in their\nsupply chains. They're just pulling in this code. Their developers\nspecifically are pulling in this code and hoping For the best. And so it got\nme interested in kind of supply chains and security and how do we trust the\ncode that we're using?\n\nAnd, and yeah, and then the final kind of nail in the coffin that made, that\npushed me over the edge to want to work on, on this company socket was my,\nmyself and two other people were building this product called the wormhole.\nWormhole. app is the URL. Oh\n\nChris: yeah. It sounds like a, it's like an ngrok type.\n\nFeross: No.\n\nIt's a file transfer tool for like sending files across the web to other\nfolks. Yeah. Was it IPFS based or no? He uses WebTorrent under the hood.\n\nChris: Oh, WebTorrent. Okay. I might have come across it when I was messing\naround more with the decentralized crypto world.\n\nYeah. Oh, or maybe we used it. Oh, I can't remember. It definitely rings a\nbell, but anyway. Yep. Yep.\n\nFeross: Yeah. So it's, it's basically a way to, it's like Firefox send. If\nanybody remembers that, that tool, you drop your files on the browser, you get\na link, you send it to somebody, they can download the files, but it has a\ncouple of really important attributes.\n\nOne is it's end to end encrypted. The, the link automatically expires and the,\nthe files are streamable, meaning that, uh, even before they finished\nuploading. So like within a second of you dropping the files on the page. You\nget a URL that you can send. And that means that the recipients can actually\nstart streaming the files from you, meaning like the encryption is streaming.\n\nAnd if they were to say, click on a video that you're trying to send them,\nthey could seek the video to halfway through the video. And even if you've\nonly uploaded like 0. 1%, it smartly reprioritizes the part of the file that\nyou're uploading to. Yeah. So it's pretty, it basically gives them the video\nthat they need and uses it's peer to peer too.\n\nSo it can, it can literally. Directly send this to them without going through\nthe server. But then, you know, if, if they, you know, if, if you, if you\nfinish the upload, then of course, you know, you can then shut your browser\ndown and then they'll be able to use the link even after you've, you've gone\nfor up to 24 hours.\n\nSo it's kind of a hybrid between a traditional, like file hosting thing where\nyou'd upload the files and a peer to peer system where they can, you know, get\nthe performance benefits. It's kind of sad.\n\nChris: Cause it sort of feels like there was a lot. More call for these sorts\nof very clever peer to peer sharing applications a few years ago, and now\npeople don't really use them as much anymore because internet is better or\nwhatever the reason may be.\n\nAnd I don't know, I feel like we used to be clever about file sharing in the\npast.\n\nFeross: I feel the same way, although I still have to say, it's, it's funny\nhow much Dropbox and Google drive still actually haven't, haven't innovated in\nthis area. I mean, If you're trying to send somebody like, you know, a 10 gig\nfile, you do, you do really have to wait for like a while to upload in the\nmeantime, you can't get a link to send.\n\nChris: That is true, actually. Yeah. No, anyway, I feel like, so just out of\ninterest, because we're running a little bit out of time, but for anyone who\nfound this interesting, you do come from open source background. You do have\nan open source. Yes. Which is pretty generous. I think the only thing that's\nmissing that could be useful on the free open source tier is license\nenforcement, but I'm not sure how much open source developers would really\nneed that more beyond just being, you know, very strict open source license\npeople.\n\nSo there's definitely a lot people can play with. If we were to speak in six\nto 12 months, what have you got on the roadmap next?\n\nFeross: Way more programming languages supported. You mentioned that. Yeah.\nYeah. And we'll have a lot more. Analyses, different things we're going to be\nlooking for, hopefully better coverage of different types of threats that\nwe're seeing, so that's going to keep improving.\n\nOverall, we want to make the website we have today is pretty useful for a\ndeveloper just to go and search packages and see like what the risks there are\nand just kind of what, what they need to know about a package before they\ninstall it. And one of the things we want to do is keep improving that so that\nit's really the best place to start when you're looking for open source\npackages.\n\nChris: Well, it's, it's also, you'll be pleased to hear. I see that they're\none of your customers, but have also supported you a lot through some of your\nprojects. I have been using Brave the whole time. So it's just, it's during\nthis, during this call, which is also sort of nice to see that people have\ncome with you on your journey as well.\n\nFeross: So the Brave team is great. They're just really good people and, and\nit's a, it's an important product, I think. It's a really interesting browser.\nIt has so many things in it. It does. It does a lotof experiments.\n\nChris: I will mostly use Safari, but if I have to use a Chromium browser, I\nwill only use Brave.\n\nI won't use Chrome, that's for sure. But anyway.\n\nFeross: Brave has WebTorrentbuilt in, by the way.\n\nChris: Yes, it does. You're right, actually. I've never really had a need to\nuse it, but I have seen the setting. Yes.\n\nFeross: Yeah, if you click on a torrent link, it'll suggest that you enable\nWebTorrent and then You can, uh, torrent directly in the browser without\nneeding a third party app.\n\nChris: I was wondering what project they'd supported you with and now that\nmakes sense then. Okay. Yes.\n\nFeross: Yes.\n\nChris: Well, thank you very much for joining me and I don't normally tell\npeople this in the recording, but seeing as it's very appropriate, I'm going\nto hit stop and stay on the line because we need to let the stream finish.\n\nAnd that was my interview with Feross from Socket. Anyone involved in the\nwhole software supply chain should check it out.\n\nSee you next time. I hope you enjoyed the show. Find out more about me at\nchrischinchilla. com, where you can find show notes, sign up for my\nnewsletter, and find all of my writing, games, work, and video links. There's\nalso details on how to get in touch with me. And if you want to get even\ncloser to what I do, you Join my discord server for behind the scenes\ndiscussions and helping me produce my shows and work.\n\nSubscribe to our newsletter\n\nGet notified when we publish new security blog posts!\n\n## Related posts\n\nBack to all posts\n\nSecurity News\n\n### Major Open Source Foundations Form Initiative Aimed at Building CRA-\nCompliant Security Processes\n\nMajor open source foundations are uniting to create CRA-compliant security\nstandards in preparation for EU Cyber Resilience Act regulations that go into\neffect in 2027.\n\nBy Sarah Gooding - Apr 04, 2024\n\nSecurity News\n\n### NVD Remains Stalled on Enriching CVE's, Security Industry Criticizes\nNIST\u2019s Consortium Plan\n\nNIST has acknowledged the growing backlog of vulnerabilities at the NVD and\nplans to publish the process for forming an outside consortium, but is getting\npushback from security professionals.\n\nBy Sarah Gooding - Apr 02, 2024\n\nSecurity News\n\n### Software Supply Chain Compromise Now the Top Threat of the Next Half\nDecade\n\nENISA has identified software supply chain attacks as the top cybersecurity\nthreat for the next five years, just prior to the accidental discovery of a\nbackdoored package used in nearly every Linux distribution.\n\nBy Sarah Gooding - Apr 02, 2024\n\nProduct\n\n  * Package Alerts\n\n  * Integrations\n\n  * Docs\n\n  * Pricing\n\n  * FAQ\n\n  * Roadmap\n\nAbout\n\n  * About\n\n  * Love\n\n  * Blog\n\n  * Glossary\n\n  * Discord Community\n\n  * CareersHiring\n\n  * Send Feedback\n\n  * Contact Us\n\n  * System Status\n\nPackages\n\n  * npm Package Directory\n\n  * Explore npm Packages\n\n  * Go Package Directory\n\n  * Explore Go Packages\n\n  * Maven Package Directory\n\n  * Explore Maven Packages\n\n  * PyPi Package Directory\n\n  * Explore PyPi Packages\n\n  * Most Popular JS Packages\n\n  * Top JavaScript Maintainers\n\n  * Removed npm Packages\n\n  * Random npm Package\n\nStay in touch\n\nGet open source security insights delivered straight into your inbox.\n\n  * Terms\n  * Privacy\n  * Security\n\nMade with \u26a1\ufe0f by Socket Inc\n\n", "frontpage": false}
