{"aid": "40075680", "title": "Linus Torvalds says yes to Tabs", "url": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/", "domain": "kernel.org", "votes": 2, "user": "doener", "posted_at": "2024-04-18 12:52:02", "comments": 0, "source_title": "Merge tag 'for-6.9-rc4-tag' of git://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux - kernel/git/torvalds/linux.git - Linux kernel source tree", "source_text": "Merge tag 'for-6.9-rc4-tag' of\ngit://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux -\nkernel/git/torvalds/linux.git - Linux kernel source tree\n\nindex : kernel/git/torvalds/linux.git  \n---  \nLinux kernel source tree| Linus Torvalds  \naboutsummaryrefslogtreecommitdiffstats  \n---  \n  \ndiff options\n\nauthor| Linus Torvalds <torvalds@linux-foundation.org>| 2024-04-17 18:25:40\n-0700  \n---|---|---  \ncommitter| Linus Torvalds <torvalds@linux-foundation.org>| 2024-04-17 18:25:40\n-0700  \ncommit| 8cd26fd90c1ad7acdcfb9f69ca99d13aa7b24561 (patch)  \ntree| ea75381069ce530b3ed70feeed9cdf49a63e410d  \nparent| 4b6b513221181108b8406b22b33408f688583b32 (diff)  \nparent| 1db7959aacd905e6487d0478ac01d89f86eb1e51 (diff)  \ndownload| linux-master.tar.gz  \n  \nMerge tag 'for-6.9-rc4-tag' of\ngit://git.kernel.org/pub/scm/linux/kernel/git/kdave/linuxHEADmaster\n\nPull btrfs fixes from David Sterba: - fixup in zoned mode for out-of-order\nwrites of metadata that are no longer necessary, this used to be tracked in a\nseparate list but now the old locaion needs to be zeroed out, also add\nassertions - fix bulk page allocation retry, this may stall after first\nfailure for compression read/write * tag 'for-6.9-rc4-tag' of\ngit://git.kernel.org/pub/scm/linux/kernel/git/kdave/linux: btrfs: do not wait\nfor short bulk allocation btrfs: zoned: add ASSERT and WARN for\nEXTENT_BUFFER_ZONED_ZEROOUT handling btrfs: zoned: do not flag ZEROOUT on non-\ndirty extent buffer\n\nDiffstat\n\n-rw-r--r--| fs/btrfs/extent-tree.c| 8  \n---|---|---  \n-rw-r--r--| fs/btrfs/extent_io.c| 21  \n  \n2 files changed, 14 insertions, 15 deletions\n\ndiff --git a/fs/btrfs/extent-tree.c b/fs/btrfs/extent-tree.c index beedd6ed64d39b..257d044bca9158 100644 --- a/fs/btrfs/extent-tree.c +++ b/fs/btrfs/extent-tree.c@@ -3464,6 +3464,14 @@ void btrfs_free_tree_block(struct btrfs_trans_handle *trans,if (root_id != BTRFS_TREE_LOG_OBJECTID) {struct btrfs_ref generic_ref = { 0 };\\+ /*\\+ * Assert that the extent buffer is not cleared due to\\+ * EXTENT_BUFFER_ZONED_ZEROOUT. Please refer\\+ * btrfs_clear_buffer_dirty() and btree_csum_one_bio() for\\+ * detail.\\+ */\\+ ASSERT(btrfs_header_bytenr(buf) != 0);+btrfs_init_generic_ref(&generic_ref, BTRFS_DROP_DELAYED_REF,buf->start, buf->len, parent,btrfs_header_owner(buf));diff --git a/fs/btrfs/extent_io.c b/fs/btrfs/extent_io.c index 61594eaf1f8969..2776112dbdf8d4 100644 --- a/fs/btrfs/extent_io.c +++ b/fs/btrfs/extent_io.c@@ -681,31 +681,21 @@ static void end_bbio_data_read(struct btrfs_bio *bbio)int btrfs_alloc_page_array(unsigned int nr_pages, struct page **page_array,gfp_t extra_gfp){\\+ const gfp_t gfp = GFP_NOFS | extra_gfp;unsigned int allocated;for (allocated = 0; allocated < nr_pages;) {unsigned int last = allocated;\\- allocated = alloc_pages_bulk_array(GFP_NOFS | extra_gfp,\\- nr_pages, page_array);-\\- if (allocated == nr_pages)\\- return 0;-\\- /*\\- * During this iteration, no page could be allocated, even\\- * though alloc_pages_bulk_array() falls back to alloc_page()\\- * if it could not bulk-allocate. So we must be out of memory.\\- */\\- if (allocated == last) {\\+ allocated = alloc_pages_bulk_array(gfp, nr_pages, page_array);\\+ if (unlikely(allocated == last)) {\\+ /* No progress, fail and do cleanup. */for (int i = 0; i < allocated; i++) {__free_page(page_array[i]);page_array[i] = NULL;}return -ENOMEM;}-\\- memalloc_retry_wait(GFP_NOFS);}return 0;}@@ -4154,7 +4144,7 @@ void btrfs_clear_buffer_dirty(struct btrfs_trans_handle *trans,* The actual zeroout of the buffer will happen later in* btree_csum_one_bio.*/\\- if (btrfs_is_zoned(fs_info)) {\\+ if (btrfs_is_zoned(fs_info) && test_bit(EXTENT_BUFFER_DIRTY, &eb->bflags)) {set_bit(EXTENT_BUFFER_ZONED_ZEROOUT, &eb->bflags);return;}@@ -4193,6 +4183,7 @@ void set_extent_buffer_dirty(struct extent_buffer *eb)num_folios = num_extent_folios(eb);WARN_ON(atomic_read(&eb->refs) == 0);WARN_ON(!test_bit(EXTENT_BUFFER_TREE_REF, &eb->bflags));\\+ WARN_ON(test_bit(EXTENT_BUFFER_ZONED_ZEROOUT, &eb->bflags));if (!was_dirty) {bool subpage = eb->fs_info->nodesize < PAGE_SIZE;  \n---  \n  \ngenerated by cgit 1.2.3-korg (git 2.39.0) at 2024-04-18 13:53:08 +0000\n\n", "frontpage": false}
