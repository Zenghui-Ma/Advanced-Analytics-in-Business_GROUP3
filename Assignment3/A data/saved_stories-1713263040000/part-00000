{"aid": "40047692", "title": "Naive Crypto Arbitrage with CCXT", "url": "https://github.com/benry1/ccxt-arbitrage", "domain": "github.com/benry1", "votes": 1, "user": "benry1", "posted_at": "2024-04-16 02:02:46", "comments": 0, "source_title": "GitHub - benry1/ccxt-arbitrage: Naive arbitrage bot using CCXT", "source_text": "GitHub - benry1/ccxt-arbitrage: Naive arbitrage bot using CCXT\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nbenry1 / ccxt-arbitrage Public\n\n  * Notifications\n  * Fork 0\n  * Star 0\n\nNaive arbitrage bot using CCXT\n\n0 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# benry1/ccxt-arbitrage\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nBen HenryandBen Henryinit721636f \u00b7\n\n## History\n\n1 Commits  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| init  \n  \n### api\n\n|\n\n### api\n\n| init  \n  \n### controller\n\n|\n\n### controller\n\n| init  \n  \n### db\n\n|\n\n### db\n\n| init  \n  \n### interfaces\n\n|\n\n### interfaces\n\n| init  \n  \n### util\n\n|\n\n### util\n\n| init  \n  \n### .env.example\n\n|\n\n### .env.example\n\n| init  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| init  \n  \n### Dockerfile\n\n|\n\n### Dockerfile\n\n| init  \n  \n### README.md\n\n|\n\n### README.md\n\n| init  \n  \n### app.ts\n\n|\n\n### app.ts\n\n| init  \n  \n### docker-compose.yml\n\n|\n\n### docker-compose.yml\n\n| init  \n  \n### initial_architecture.png\n\n|\n\n### initial_architecture.png\n\n| init  \n  \n### package.json\n\n|\n\n### package.json\n\n| init  \n  \n## Repository files navigation\n\n# Crypto Cex Arbitrage\n\n### What is this repo?\n\nThis is a naive implementation of CCXT based single-asset crypto arbitrage. As\nis, this bot will NOT produce good results and will likely burn a lot of\ntrading fees with no profit. After all, it's written in TypeScript for some\nreason, what do you expect?\n\nEvery tick, this will pull all relevant orderbooks from every exchange you\nrequested. It will check for arbitrage opportunities by checking the highest\nbid price against the lowest ask price. If the price spread is favorable, it\nwill simulate the full trade, and determine if the trade meets all the\ncriteria listed in isActionable() -> app.ts. In production it will perform the\ntrade, and log all results in the mongodb.\n\nBy setting multiple symbols in util/constants.ts, you can have this app search\nfor arbitrage on multiple assets simultanesouly.\n\n# Setup\n\nDependencies:\n\nDocker\n\nnpm\n\n# Run Instructions\n\nClone repo.\n\n  * cp .env.example .env\n\nThe default set of exchanges do not require keys to get market data, so you\ncan leave those blank. If you add new exchanges, those may require keys to\nrun.\n\n  * npm run docker-start\n\nThis will create a mongodb in docker. To view entries, you can connect from\nthe default mongo URL http://localhost:27017/\n\n# How To Modify\n\n## Add Exchanges and Bases\n\nSee util/constants.ts.\n\nTo add exchanges, add to the current list of exchanges. This uses CCXT, so add\nany supported exchange id. Some exchanges require API keys to pull market data\n- you can add these in .env using <exchange_id>ApiKey and\n<exchange_id>ApiSecret\n\nTo add more bases, simply append to the list of symbols.\n\n# Architecture\n\nThis diagram was created long before this was ever implemented, but it is\nstill valid enough to include. This is the main happy-path of a tick. This\ndoes not include anything about balance management, but that is a side-\nprocess.\n\nTicks happen as often as possbile, and each tick pulls new orderbooks for each\nexchange. A tick doesn't do any arbitrage analysis, but checks if there is a\nreasonable enough spread to analyse further. (Note, the diagram says this\npulls orderbooks - it pulls them from memory, not from the network)\n\nIf a good spread is found, an analysis begins in util/orderbook.ts,\nanalyzeOpportunity\n\nThe output of the analysis is a list of trades to perform (or nothing, if it\nwas a false alarm). These trades are executed immediately. I have tried limit\norders and market orders, both have their benefits and drawbacks.\n\n# Other Details\n\n### Balance Management\n\nIf there are a series of failed arbtrages (where one side executes, but the\nother does not), you may end up with a lopsided balance, where you are holding\nmostly Base or mostly Quote across all your exchanges. Though it's fine for a\nsignle exchange to hold all base or all quote, you should be holding 50% base\nand 50% quote by value in total. There is some logic (rebalance logic) which\ndetects if your total value is lopsided, and corrects it using the best\navailable prices on any exchange. This is pretty simple, and just requires\nsome orderbook analysis.\n\nIt gets more complicated when you are using one exchange to arb multiple\nassets at one time. I solved this with controller/PoolController.ts.\nPoolController splits up the available USDT, and assigns a specific protion to\neach base asset. For example, if you have 100 X, 100 Y, and 150 USDT on an\nexchange, the pool controller will keep track of which asset controls how much\nUSDT. Isolating the pools like this simplifies rebalancing logic significantly\nand keeps everything cleanly separated in the case of failure.\n\n## About\n\nNaive arbitrage bot using CCXT\n\n### Resources\n\nReadme\n\nActivity\n\n### Stars\n\n0 stars\n\n### Watchers\n\n1 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * TypeScript 99.9%\n  * Dockerfile 0.1%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
