{"aid": "40047859", "title": "Elastic Tabstops", "url": "https://nick-gravgaard.com/elastic-tabstops/", "domain": "nick-gravgaard.com", "votes": 2, "user": "tmalsburg2", "posted_at": "2024-04-16 02:37:51", "comments": 0, "source_title": "Elastic tabstops - a better way to indent and align code", "source_text": "Elastic tabstops - a better way to indent and align code\n\n# Elastic tabstops - a better way to indent and align code\n\n  * Home\n  * Updates\n  * Email\n  * Elastic Notepad\n  * Visual Studio\n\n## Intro - the status quo sucks\n\nSince the days of the character mapped display, programmers have argued over\nwhether tabs or spaces should be used to line up text. While both strategies\ncan be used if all of a project's programmers can agree on how many spaces\nwide a tab should be, experience has taught us that this is not always the\ncase. Even if all of the programmers working on a project are diligent enough\nto stick to only using tabs or spaces and have tabs set to the agreed number\nof spaces, there is still a problem if any programmers wish to use modern\nproportional fonts (because a space is no longer the same width as every other\ncharacter).\n\nThe reason why we have not yet settled conclusively on either tabs or spaces\nis that both camps can point to problems in the others' approach. The truth is\nthat both are right to be critical - both solutions are inadequate as neither\nallows different programmers to look at the same file and have their\nindentation and columns as wide or as thin as they'd like without text getting\nmisaligned. Using spaces to align columns is obviously a kludge, but tabs as\nthey stand now are broken.\n\n## The solution - move tabstops to fit the text between them and align them\nwith matching tabstops on adjacent lines\n\nFor as long as we continue to define each tabstop as being a multiple of N\ncharacters we will never be able to solve this problem satisfactorily. The\nproblem is that we're using tabs and spaces to format text for aesthetic\nreasons rather than treating them semantically - tabs are for indenting and\naligning text, spaces are for separating keywords.\n\nThe simple solution is to redefine how tabs are interpreted by the text\neditor. Rather than saying that a tab character places the text that follows\nit at the next Nth column, we should say that a tab character is a delimiter\nbetween table cells in a manner more reminiscent of how they're used in tab\nseparated value (TSV) files. When used for text or code I call this format\n\"Tab Separated Columns\". Seen in this light, we can see that space aligned\nfiles are analogous to the old fixed width data files, and we all know the\nadvantages that delimited files have over those. For one thing, you can use\nsed or other tools to substitute strings in files and everything will still\nline up when you load them in the editor. Another advantage is that\nproportional fonts can now be used (in itself not a new idea - see Smalltalk,\nOberon and Plan 9's Acme).\n\nThis animated diagram shows how the elastic tabstops mechanism aligns text. A\ntab character is represented as a vertical line.\n\nEach cell ends with a tab character. A column block is a run of uninterrupted\nvertically adjacent cells. A column block is as wide as the widest piece of\ntext in the cells it contains or a minimum width (plus padding). Text outside\ncolumn blocks is ignored.\n\n## Try it right now\n\nI used to have a Java applet embedded here, but modern browsers no longer\nsupport unsigned applets. The best way to try out the concept is to download\nElastic Notepad (and look at the core elastic tabstops code if you want to see\nhow to implement it). Alternatively you can still download the original Java\nversions from 2006 by following the links on this page.\n\n## Keep it simple, stupid!\n\nThis solution is as simple as possible, and is arguably simpler conceptually\nthan the old mod-N model (although a bit more work computationally, which is\nprobably why they went with the mod-N system back in the 1970s). When HTML's\ndesigners considered tables I'm sure they never thought about reimplementing\nthe old mod-N model, and no one would ever say that HTML tables are\ncomplicated or in any way intelligent. The elastic tabstops mechanism is the\nsame - as simple as possible, but no simpler. Just like the mod-N model it\nseeks to replace it doesn't care about what the text between tabs is, and nor\nshould it.\n\nEvery so often someone will show how they can make code align in a funny way\nby laying out their code just so, and then go on to come up with a complicated\ncontext sensitive and language dependant scheme which fixes that particlar\nedge case. A better and simpler solution is simply \"don't do that, then\".\nExisting code conventions evolved in an environment where displays were\ncharacter based and tabstops were every N columns. It's not hard to imagine\nnew conventions evolving in a new environment where proportional fonts are\npossible and text always stays lined up properly.\n\n## Forwards compatibility\n\nWhile editors which haven't yet implemented the elastic tabstops mechanism may\nnot align some text properly in files where tabs were used with elastic\ntabstops, the problem isn't that bad. All leading tabs (indentation) will be\nokay, and the chances of text not aligning correctly diminishes as the width\nbetween tabstops increases. So if you plan on switching to elastic tabstops in\nthe future, and wish to choose a code style with that in mind (to use now), I\nsuggest using tabs with fixed tabstops every 8 characters (or more) across.\nAlternatively co-workers can use tabs with fixed tabstops of whatever size\nthey like as long as no one tries to line up text for anything other than\nindentation.\n\n## Current implementations\n\n  * Elastic Notepad, my reference implementation written in Scala, and a fledgling cross-platform text-editor in its own right\n  * Always Aligned VS, my extension which implements elastic tabstops for Visual Studio\n  * My implementation for the widely used Scintilla text widget\n  * My original Java Swing app\n  * My original Gedit plugin (no longer compatible with Gedit's changed API)\n  * A Pluma plugin ported from my Gedit code\n  * Komodo IDE, a cross-platform IDE for Python, PHP, Go, Perl, Tcl, Ruby, NodeJS, HTML, CSS, JavaScript, and more\n  * jEdit, a programmer's text editor (note this can be used with JDiffPlugin to diff files formatted with elastic tabstops)\n  * Code Browser, a folding text editor for Linux and Windows\n  * MultiMarkdown Composer 2 (OS X only unfortunately)\n  * Inform 7, an IDE for programming interactive fiction\n  * A plugin for the Atom editor (repo here)\n  * A plugin for Notepad++, a widely used text editor for Windows\n  * A plugin for Textadept (a nice cross-platform programmer's text editor) by its author\n  * Google's Go programming language (made by Rob Pike and Ken Thompson (amongst others) who were also responsible for UTF-8) uses elastic tabstops in it's \"tabwriter\" package used by gofmt.\n  * A user script which adds elastic tabstops support to GitHub (currently only tested under Tampermonkey). Use this to view GitHub repos which use elastic tabstops.\n  * etst is a command line program written in C++ which converts text using elastic tabstops to spaces\n  * Some Haskell code which adds elastic tabstops to Pandoc\n\n## Potential implementations\n\n  * On Microsoft's open source .NET GitHub repo there's an issue about aligning text where elastic tabstops was mentioned. I think it would be great if elastic tabtops was an option in Visual Studio, or even just used by a code formatter the way Google's gofmt uses it. If you feel the same, go and tell them here.\n  * My Eclipse plugin is currently stalled until this bug gets fixed. Go and vote for it.\n\n## Incorrect implementations\n\n  * SublimeText's \"ElasticTabstops\" plugin inserts spaces rather than moving tabstops. If there are no tabstops (or tabs) it can't be elastic tabstops.\n  * The authors of the ACE browser-based editor copied the SublimeText plugin (so it's broken too).\n\n## See also\n\n  * Input, a proportional programming font works brilliantly with elastic tabstops. I look forward to seeing more fonts like this.\n\n## The name \"elastic tabstops\"\n\nSome people have mistakenly called this \"elastic tabs\" rather than \"elastic\ntabstops\", presumably because they don't realise that tabs and tabstops are\ndifferent things. For a feature to be called \"elastic tabstops\" it needs to\nmove tabstops (there's a clue in the name :)\n\n## Updates\n\n  * Post about first public version of elastic tabstops Friday 2006-07-07 02:58 UTC\n  * New demo of elastic tabstops solves previous version's blank line issue Monday 2006-07-10 13:53 UTC\n  * Introducing elastic tabstops in gedit Monday 2007-05-28 16:31 UTC\n  * A proper elastic tabstops plugin for gedit Sunday 2007-09-16 16:59 UTC\n  * An update and a request for help Wednesday 2008-10-15 16:20 UTC\n  * Support for more editors in the works Sunday 2009-06-07 19:31 UTC\n  * Programming fonts: proportional vs monospaced Tuesday 2009-12-22 23:52 UTC\n  * Python package and new Gedit plugin Friday 2010-04-02 17:30 UTC\n  * Announcing a limited public beta for my upcoming Visual Studio 2010 extension Monday 2010-08-02 16:33\n  * \"Elastic tabstops lite\" Monday 2012-12-17 11:23 UTC\n  * Elastic tabstops for Scintilla Sunday 2013-01-20 22:45 UTC\n  * Private beta for my upcoming Visual Studio 2012 extension Friday 2013-09-06 01:05 UTC\n  * Announcing the release of Always Aligned Thursday 2014-11-06 19:00 UTC\n  * Why Apple should use elastic tabstops for Swift Friday 2016-07-01 14:04 UTC\n  * Open-sourcing Always Aligned VS, and releasing Elastic Notepad Saturday 2017-11-18 18:19 UTC\n\nup to nick-gravgaard.com\n\nThe elastic tabstops mechanism was invented by Nick Gravgaard in the summer of\n2006. All text and images on this page are copyright Nick Gravgaard and\nlicensed under a Creative Commons Attribution 3.0 Licence. This page was first\nuploaded on 2006-07-02 and last updated on 2021-03-06.\n\n", "frontpage": false}
