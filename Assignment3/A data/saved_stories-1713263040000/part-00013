{"aid": "40047946", "title": "A cartoon intro to DNS over HTTPS (2018)", "url": "https://hacks.mozilla.org/2018/05/a-cartoon-intro-to-dns-over-https/", "domain": "hacks.mozilla.org", "votes": 4, "user": "aragonite", "posted_at": "2024-04-16 02:55:26", "comments": 0, "source_title": "A cartoon intro to DNS over HTTPS", "source_text": "A cartoon intro to DNS over HTTPS - Mozilla Hacks - the Web developer blog\n\n# Hacks\n\n# A cartoon intro to DNS over HTTPS\n\n### By Lin Clark\n\nPosted on May 31, 2018 in Code Cartoons, Featured Article, Firefox, Mozilla,\nand Security\n\nThreats to users\u2019 privacy and security are growing. At Mozilla, we closely\ntrack these threats. We believe we have a duty to do everything we can to\nprotect Firefox users and their data.\n\nWe\u2019re taking on the companies and organizations that want to secretly collect\nand sell user data. This is why we added tracking protection and created the\nFacebook container extension. And you\u2019ll be seeing us do more things to\nprotect our users over the coming months.\n\nTwo more protections we\u2019re adding to that list are:\n\n  * DNS over HTTPS, a new IETF standards effort that we\u2019ve championed\n  * Trusted Recursive Resolver, a new secure way to resolve DNS that we\u2019ve partnered with Cloudflare to provide\n\nWith these two initiatives, we\u2019re closing data leaks that have been part of\nthe domain name system since it was created 35 years ago. And we\u2019d like your\nhelp in testing them. So let\u2019s look at how DNS over HTTPS and Trusted\nRecursive Resolver protect our users.\n\nBut first, let\u2019s look at how web pages move around the Internet.\n\nIf you already know how DNS and HTTPS work, you can skip to how DNS over HTTPS\nhelps.\n\n### A brief HTTP crash course\n\nWhen people explain how a browser downloads a web page, they usually explain\nit this way:\n\n  1. Your browser makes a GET request to a server.\n  2. The server sends a response, which is a file containing HTML.\n\nThis system is called HTTP.\n\nBut this diagram is a little oversimplified. Your browser doesn\u2019t talk\ndirectly to the server. That\u2019s because they probably aren\u2019t close to each\nother.\n\nInstead, the server could be thousands of miles away. And there\u2019s likely no\ndirect link between your computer and the server.\n\nSo this request needs to get from the browser to that server, and it will go\nthrough multiple hands before it gets there. And the same is true for the\nresponse coming back from the server.\n\nI think of this like kids passing notes to each other in class. On the\noutside, the note will say who it\u2019s supposed to go to. The kid who wrote the\nnote will pass it to their neighbor. Then that next kid passes it to one of\ntheir neighbors \u2014 probably not the eventual recipient, but someone who\u2019s in\nthat direction.\n\nThe problem with this is that anyone along the path can open up the note and\nread it. And there\u2019s no way to know in advance which path the note is going to\ntake, so there\u2019s no telling what kind of people will have access to it.\n\nIt could end up in the hands of people who do harmful things...\n\nLike sharing the contents of the note with everyone.\n\nOr changing the response.\n\nTo fix these issues, a new, secure version of HTTP was created. This is called\nHTTPS. With HTTPS, it\u2019s kind of like each message has a lock on it.\n\nBoth the browser and the server know the combination to that lock, but no one\nin between does.\n\nWith this, even if the messages go through multiple routers in between, only\nyou and the web site will actually be able to read the contents.\n\nThis solves a lot of the security issues. But there are still some messages\ngoing between your browser and the server that aren\u2019t encrypted. This means\npeople along the way can still pry into what you\u2019re doing.\n\nOne place where data is still exposed is in setting up the connection to the\nserver. When you send your initial message to the server, you send the server\nname as well (in a field called \u201cServer Name Indication\u201d). This lets server\noperators run multiple sites on the same machine while still knowing who you\nare trying to talk to. This initial request is part of setting up encryption,\nbut the initial request itself isn\u2019t encrypted.\n\nThe other place where data is exposed is in DNS. But what is DNS?\n\n### DNS: the Domain Name System\n\nIn the passing notes metaphor above, I said that the name of the recipient had\nto be on the outside of the note. This is true for HTTP requests too... they\nneed to say who they are going to.\n\nBut you can\u2019t use a name for them. None of the routers would know who you were\ntalking about. Instead, you have to use an IP address. That\u2019s how the routers\nin between know which server you want to send your request to.\n\nThis causes a problem. You don\u2019t want users to have to remember your site\u2019s IP\naddress. Instead, you want to be able to give your site a catchy name...\nsomething that users can remember.\n\nThis is why we have the domain name system (DNS). Your browser uses DNS to\nconvert the site name to an IP address. This process \u2014 converting the domain\nname to an IP address \u2014 is called domain name resolution.\n\nHow does the browser know how to do this?\n\nOne option would be to have a big list, like a phone book in the browser. But\nas new web sites came online, or as sites moved to new servers, it would be\nhard to keep that list up-to-date.\n\nSo instead of having one list which keeps track of all of the domain names,\nthere are lots of smaller lists that are linked to each other. This allows\nthem to be managed independently.\n\nIn order to get the IP address that corresponds to a domain name, you have to\nfind the list that contains that domain name. Doing this is kind of like a\ntreasure hunt.\n\nWhat would this treasure hunt look like for a site like the English version of\nwikipedia, en.wikipedia.org?\n\nWe can split this domain into parts.\n\nWith these parts, we can hunt for the list that contains the IP address for\nthe site. We need some help in our quest, though. The tool that will go on\nthis hunt for us and find the IP address is called a resolver.\n\nFirst, the resolver talks to a server called the Root DNS. It knows of a few\ndifferent Root DNS servers, so it sends the request to one of them. The\nresolver asks the Root DNS where it can find more info about addresses in the\n.org top-level domain.\n\nThe Root DNS will give the resolver an address for a server that knows about\n.org addresses.\n\nThis next server is called a top-level domain (TLD) name server. The TLD\nserver knows about all of the second-level domains that end with .org.\n\nIt doesn\u2019t know anything about the subdomains under wikipedia.org, though, so\nit doesn\u2019t know the IP address for en.wikipedia.org.\n\nThe TLD name server will tell the resolver to ask Wikipedia\u2019s name server.\n\nThe resolver is almost done now. Wikipedia\u2019s name server is what\u2019s called the\nauthoritative server. It knows about all of the domains under wikipedia.org.\nSo this server knows about en.wikipedia.org, and other subdomains like the\nGerman version, de.wikipedia.org. The authoritative server tells the resolver\nwhich IP address has the HTML files for the site.\n\nThe resolver will return the IP address for en.wikipedia.org to the operating\nsystem.\n\nThis process is called recursive resolution, because you have to go back and\nforth asking different servers what\u2019s basically the same question.\n\nI said we need a resolver to help us in our quest. But how does the browser\nfind this resolver? In general, it asks the computer\u2019s operating system to set\nit up with a resolver that can help.\n\nHow does the operating system know which resolver to use? There are two\npossible ways.\n\nYou can configure your computer to use a resolver you trust. But very few\npeople do this.\n\nInstead, most people just use the default. And by default, the OS will just\nuse whatever resolver the network told it to. When the computer connects to\nthe network and gets its IP address, the network recommends a resolver to use.\n\nThis means that the resolver that you\u2019re using can change multiple times per\nday. If you head to the coffee shop for an afternoon work session, you\u2019re\nprobably using a different resolver than you were in the morning. And this is\ntrue even if you have configured your own resolver, because there\u2019s no\nsecurity in the DNS protocol.\n\n### How can DNS be exploited?\n\nSo how can this system make users vulnerable?\n\nUsually a resolver will tell each DNS server what domain you are looking for.\nThis request sometimes includes your full IP address. Or if not your full IP\naddress, increasingly often the request includes most of your IP address,\nwhich can easily be combined with other information to figure out your\nidentity.\n\nThis means that every server that you ask to help with domain name resolution\nsees what site you\u2019re looking for. But more than that, it also means that\nanyone on the path to those servers sees your requests, too.\n\nThere are a few ways that this system puts users\u2019 data at risk. The two major\nrisks are tracking and spoofing.\n\n#### Tracking\n\nLike I said above, it\u2019s easy to take the full or partial IP address info and\nfigure out who\u2019s asking for that web site. This means that the DNS server and\nanyone along the path to that DNS server \u2014 called on-path routers \u2014 can create\na profile of you. They can create a record of all of the web sites that\nthey\u2019ve seen you look up.\n\nAnd that data is valuable. Many people and companies will pay lots of money to\nsee what you are browsing for.\n\nEven if you didn\u2019t have to worry about the possibly nefarious DNS servers or\non-path routers, you still risk having your data harvested and sold. That\u2019s\nbecause the resolver itself \u2014 the one that the network gives to you \u2014 could be\nuntrustworthy.\n\nEven if you trust your network\u2019s recommended resolver, you\u2019re probably only\nusing that resolver when you\u2019re at home. Like I mentioned before, whenever you\ngo to a coffee shop or hotel or use any other network, you\u2019re probably using a\ndifferent resolver. And who knows what its data collection policies are?\n\nBeyond having your data collected and then sold without your knowledge or\nconsent, there are even more dangerous ways the system can be exploited.\n\n#### Spoofing\n\nWith spoofing, someone on the path between the DNS server and you changes the\nresponse. Instead of telling you the real IP address, a spoofer will give you\nthe wrong IP address for a site. This way, they can block you from visiting\nthe real site or send you to a scam one.\n\nAgain, this is a case where the resolver itself might act nefariously.\n\nFor example, let\u2019s say you\u2019re shopping for something at Megastore. You want to\ndo a price check to see if you can get it cheaper at a competing online store,\nbig-box.com.\n\nBut if you\u2019re on Megastore WiFi, you\u2019re probably using their resolver. That\nresolver could hijack the request to big-box.com and lie to you, saying that\nthe site is unavailable.\n\n### How can we fix this with Trusted Recursive Resolver (TRR) and DNS over\nHTTPS (DoH)?\n\nAt Mozilla, we feel strongly that we have a responsibility to protect our\nusers and their data. We\u2019ve been working on fixing these vulnerabilities.\n\nWe are introducing two new features to fix this \u2014 Trusted Recursive Resolver\n(TRR) and DNS over HTTPS (DoH). Because really, there are three threats here:\n\n  1. You could end up using an untrustworthy resolver that tracks your requests, or tampers with responses from DNS servers.\n  2. On-path routers can track or tamper in the same way.\n  3. DNS servers can track your DNS requests.\n\nSo how do we fix these?\n\n  1. Avoid untrustworthy resolvers by using Trusted Recursive Resolver.\n  2. Protect against on-path eavesdropping and tampering using DNS over HTTPS.\n  3. Transmit as little data as possible to protect users from deanonymization.\n\n#### Avoid untrustworthy resolvers by using Trusted Recursive Resolver\n\nNetworks can get away with providing untrustworthy resolvers that steal your\ndata or spoof DNS because very few users know the risks or how to protect\nthemselves.\n\nEven for users who do know the risks, it\u2019s hard for an individual user to\nnegotiate with their ISP or other entity to ensure that their DNS data is\nhandled responsibly.\n\nHowever, we\u2019ve spent time studying these risks... and we have negotiating\npower. We worked hard to find a company to work with us to protect users\u2019 DNS\ndata. And we found one: Cloudflare.\n\nCloudflare is providing a recursive resolution service with a pro-user privacy\npolicy. They have committed to throwing away all personally identifiable data\nafter 24 hours, and to never pass that data along to third-parties. And there\nwill be regular audits to ensure that data is being cleared as expected.\n\nWith this, we have a resolver that we can trust to protect users\u2019 privacy.\nThis means Firefox can ignore the resolver that the network provides and just\ngo straight to Cloudflare. With this trusted resolver in place, we don\u2019t have\nto worry about rogue resolvers selling our users\u2019 data or tricking our users\nwith spoofed DNS.\n\nWhy are we picking one resolver? Cloudflare is as excited as we are about\nbuilding a privacy-first DNS service. They worked with us to build a DoH\nresolution service that would serve our users well in a transparent way.\nThey\u2019ve been very open to adding user protections to the service, so we\u2019re\nhappy to be able to collaborate with them.\n\nBut this doesn\u2019t mean you have to use Cloudflare. Users can configure Firefox\nto use whichever DoH-supporting recursive resolver they want. As more\nofferings crop up, we plan to make it easy to discover and switch to them.\n\n#### Protect against on-path eavesdropping and tampering using DNS over HTTPS\n\nThe resolver isn\u2019t the only threat, though. On-path routers can track and\nspoof DNS because they can see the contents of the DNS requests and responses.\nBut the Internet already has technology for ensuring that on-path routers\ncan\u2019t eavesdrop like this. It\u2019s the encryption that I talked about before.\n\nBy using HTTPS to exchange the DNS packets, we ensure that no one can spy on\nthe DNS requests that our users are making.\n\n#### Transmit as little data as possible to protect users from deanonymization\n\nIn addition to providing a trusted resolver which communicates using the DoH\nprotocol, Cloudflare is working with us to make this even more secure.\n\nNormally, a resolver would send the whole domain name to each server\u2014to the\nRoot DNS, the TLD name server, the second-level name server, etc. But\nCloudflare will be doing something different. It will only send the part that\nis relevant to the DNS server it\u2019s talking to at the moment. This is called\nQNAME minimization.\n\nThe resolver will also often include the first 24 bits of your IP address in\nthe request. This helps the DNS server know where you are and pick a CDN\ncloser to you. But this information can be used by DNS servers to link\ndifferent requests together.\n\nInstead of doing this, Cloudflare will make the request from one of their own\nIP addresses near the user. This provides geolocation without tying it to a\nparticular user. In addition to this, we\u2019re looking into how we can enable\neven better, very fine-grained load balancing in a privacy-sensitive way.\n\nDoing this \u2014 removing the irrelevant parts of the domain name and not\nincluding your IP address \u2014 means that DNS servers have much less data that\nthey can collect about you.\n\n### What isn\u2019t fixed by TRR with DoH?\n\nWith these fixes, we\u2019ve reduced the number of people who can see what sites\nyou\u2019re visiting. But this doesn\u2019t eliminate data leaks entirely.\n\nAfter you do the DNS lookup to find the IP address, you still need to connect\nto the web server at that address. To do this, you send an initial request.\nThis request includes a server name indication, which says which site on the\nserver you want to connect to. And this request is unencrypted.\n\nThat means that your ISP can still figure out which sites you\u2019re visiting,\nbecause it\u2019s right there in the server name indication. Plus, the routers that\npass that initial request from your browser to the web server can see that\ninfo too.\n\nHowever, once you\u2019ve made that connection to the web server, then everything\nis encrypted. And the neat thing is that this encrypted connection can be used\nfor any site that is hosted on that server, not just the one that you\ninitially asked for.\n\nThis is sometimes called HTTP/2 connection coalescing, or simply connection\nreuse. When you open a connection to a server that supports it, that server\nwill tell you what other sites it hosts. Then you can visit those other sites\nusing that existing encrypted connection.\n\nWhy does this help? You don\u2019t need to start up a new connection to visit these\nother sites. This means you don\u2019t need to send that unencrypted initial\nrequest with its server name indication saying which site you\u2019re visiting.\nWhich means you can visit any of the other sites on the same server without\nrevealing what sites you\u2019re looking at to your ISP and on-path routers.\n\nWith the rise of CDNs, more and more independent sites are being served by a\nsingle server. And since you can have multiple coalesced connections open, you\ncan be connected to multiple shared servers or CDNs at once, visiting all of\nthe sites across the different servers without leaking data. This means this\nwill be more and more effective as a privacy shield.\n\n### What is the status?\n\nYou can enable DNS over HTTPS in Firefox today, and we encourage you to.\n\nWe\u2019d like to turn this on as the default for all of our users. We believe that\nevery one of our users deserves this privacy and security, no matter if they\nunderstand DNS leaks or not.\n\nBut it\u2019s a big change and we need to test it out first. That\u2019s why we\u2019re\nconducting a study. We\u2019re asking half of our Firefox Nightly users to help us\ncollect data on performance.\n\nWe\u2019ll use the default resolver, as we do now, but we\u2019ll also send the request\nto Cloudflare\u2019s DoH resolver. Then we\u2019ll compare the two to make sure that\neverything is working as we expect.\n\nFor participants in the study, the Cloudflare DNS response won\u2019t be used yet.\nWe\u2019re simply checking that everything works, and then throwing away the\nCloudflare response.\n\nWe are thankful to have the support of our Nightly users \u2014 the people who help\nus test Firefox every day \u2014 and we hope that you will help us test this, too.\n\n## About Lin Clark\n\nLin works in Advanced Development at Mozilla, with a focus on Rust and\nWebAssembly.\n\n  * https://twitter.com/linclark\n  * @linclark\n\nMore articles by Lin Clark...\n\n## Thanks! Please check your inbox to confirm your subscription.\n\nIf you haven\u2019t previously confirmed a subscription to a Mozilla-related\nnewsletter you may have to do so. Please check your inbox or your spam filter\nfor an email from us.\n\n### 62 comments\n\n  1. Gabriel Gonzalez\n\n> Wow, that\u2019s great thanks for the explanation Lin!\n\nMay 31st, 2018 at 08:26\n\n  2. Valentin C.\n\n> > After you do the DNS lookup to find the IP address, you still need to\n> connect to the web server at that address. To do this, you send an initial\n> request. This request includes a server name indication, which says which\n> site on the server you want to connect to. And this request is unencrypted.\n>\n> Aside from DNS, when you use HTTPS there is still an initial unencrypted\n> request ? I didn\u2019t know that...\n\nMay 31st, 2018 at 08:47\n\n    1. sapphirepaw\n\n> To be technical, the HTTP request is protected, but the setup of the\n> encryption (TLS handshake) is, indeed, not 100% protected.\n>\n> There was a problem with virtual hosting: the HTTP host name isn\u2019t available\n> until the TLS handshake completes, but the TLS handshake needs to provide\n> the certificate for that specific host name. Nowadays, the browser provides\n> the host name twice, and the first time is in the clear, to allow the server\n> to choose the correct certificate. This is called Server Name Indication, or\n> SNI.\n>\n> Before SNI, we had to use one IP per HTTPS host, and send a certificate\n> based on IP address. As IPv4 space got scarce, and SNI support became\n> widespread, the IP-based approach became uncommon.\n\nMay 31st, 2018 at 11:42\n\n      1. Jamal\n\n> Yes, without SNI people had to purchase additional IP addresses for each\n> site they wanted to install a SSL certificate on on a single server/VPS.\n\nJune 4th, 2018 at 11:37\n\n  3. Micha\u00ebl Polla\n\n> Thank you for these well written and illustrated explanations, Lin!\n>\n> I\u2019m wanting to help test DNS over HTTPS with Firefox Nighty (which I never\n> used before). You say : \u201cWe\u2019re asking half of our Firefox Nightly users to\n> help us collect data\u201d : is there an opt-in system for that, or are the users\n> chosen randomly ?\n\nMay 31st, 2018 at 08:59\n\n    1. Lin Clark\n\n> This will be covered in more detail in a post tomorrow, but for now:\n>\n> Type about:config in location bar Search for network.trr Change\n> network.trr.mode to 2 to enable DoH. Set network.trr.uri to your DoH server.\n> Cloudflare\u2019s is https://mozilla.cloudflare-dns.com/dns-query\n>\n> The DNS tab on the about:networking page indicates which names were resolved\n> using the Trusted Recursive Resolver via DoH.\n\nMay 31st, 2018 at 10:01\n\n      1. anonymous\n\n> Can you explain why network.trr.uri uses a domain name? I\u2019d expect it to be\n> an IP.\n\nJune 1st, 2018 at 11:35\n\n      2. Gustaff Weldon\n\n> Perhaps I\u2019m missing sth, but how is Firefox planning to avoid getting a\n> forged IP address of the TRR if its name needs to be DNS resolved first from\n> eg. \u201cmozilla.cloudflare-dns.com\u201d to an IP address (using OS resolver\n> probably)?\n>\n> Are you going to use a certificate/key of some sort, to verify the resolver\n> you are talking to, is truly the one you wanted to connect with? How is this\n> going to be handled?\n\nJune 4th, 2018 at 09:23\n\n  4. Barry\n\n> > You can enable DNS over HTTPS in Firefox today, and we encourage you to.\n>\n> That\u2019s awesome. Can you confirm _where_ this is done (in FF 60.0.1) \u2013 is it\n> via about:config?\n\nMay 31st, 2018 at 09:02\n\n    1. Lin Clark\n\n> You\u2019ll want to use 62 for this feature, which is currently Nightly and will\n> be release in early September.\n\nMay 31st, 2018 at 10:09\n\n    2. ExE Boss\n\n> The about:config settings to enable this are in Firefox since version 60,\n> gHacks has an article explaining the settings:\n> https://www.ghacks.net/2018/04/02/configure-dns-over-https-in-firefox/\n\nMay 31st, 2018 at 19:28\n\n      1. Lin Clark\n\n> Earlier versions were not as stable. We recommend using Firefox 62 for this\n> feature.\n\nJune 1st, 2018 at 07:22\n\n  5. \u13d2\u13ca\u13c0\u13cb\u13d2 \u13d5\u03be\u13d0\n\n> Awesome initiative and very easy to understand :)\n\nMay 31st, 2018 at 09:26\n\n  6. Deepak sharma\n\n> Superb Explanation. Just WoW... Thank you for making understand how internet\n> works in super simple way.\n\nMay 31st, 2018 at 09:35\n\n  7. Wellington Torrejais da Silva\n\n> Nice! Waiting for this by default on all browsers. Thanks.\n\nMay 31st, 2018 at 09:44\n\n  8. axew3\n\n> amazing way to explain things, clear and short. Great!\n\nMay 31st, 2018 at 09:45\n\n  9. Reuben\n\n> Hey Lin Clark,\n>\n> Really enjoyed how you laid all this information out in an easily digestible\n> way. Those illustrations are extremely helpful as well.\n>\n> Great article!\n\nMay 31st, 2018 at 09:51\n\n  10. Zach\n\n> This was an impressive article! I was even able to send it to some of my\n> non-computer-savvy friends and they understood it perfectly fine!\n\nMay 31st, 2018 at 09:59\n\n  11. Don Almeida\n\n> Awesome illustrations... will use it with my CS students!!!\n\nMay 31st, 2018 at 10:18\n\n  12. Susie H.\n\n> Awesome explanation. Easy to understand and entertaining! Thank you.\n\nMay 31st, 2018 at 10:21\n\n  13. Lee Herman\n\n> How do I turn on DNS over HTTPS in Firefox Developer Edition?\n\nMay 31st, 2018 at 11:00\n\n    1. Lin Clark\n\n> It is in Firefox 62, which is the current Nightly. It will be in Dev Edition\n> in late June/early July. There\u2019s a blog post coming out tomorrow with\n> details on how to enable.\n\nMay 31st, 2018 at 12:51\n\n  14. S\u00f3sthenes Neto\n\n> Wonderful post! Great illustrations and so ease to understand.\n\nMay 31st, 2018 at 11:03\n\n  15. Kyle\n\n> How does this help with tracking when TLS SNI means the server\u2019s hostname is\n> sent as part of the TLS handshake?\n\nMay 31st, 2018 at 12:32\n\n    1. R\n\n> This was directly addressed in the section titled \u201cWhat isn\u2019t fixed by TRR\n> with DoH?\u201d\n>\n> Partial answer: HTTP/2 connection coalescing helps a lot, to the maximum\n> degree it\u2019s possible to hide who you\u2019re talking to when the IP address is\n> still visible and you\u2019re not using Tor.\n>\n> In fact, in addition to avoiding passive attacks (tracking), coalescing\n> sounds like the logical hot new replacement for bypassing active attacks\n> (censorship), ever since Amazon and Google both suddenly made \u2018domain\n> fronting\u2019 impossible.\n\nJune 1st, 2018 at 00:51\n\n  16. Hussain\n\n> @Lin, excellent and a must read piece!\n\nMay 31st, 2018 at 12:37\n\n  17. Brett Glass\n\n> So, Mozilla intends to hack users\u2019 DNS, redirecting their queries away from\n> their ISPs (which are trustworthy and with which they have a business\n> relationship) to an untrustworthy VPN vendor \u2013 Cloudflare. Those users are\n> not Cloudflare\u2019s customers, and so the only way Cloudflare can monetize this\n> service is to spy on users and sell their personal information. In short,\n> Mozilla is supporting, aiding, and abetting privacy invasion \u2013 probably in\n> exchange for money from Cloudflare. Not only unethical but probably\n> actionable by the FTC.\n\nMay 31st, 2018 at 12:43\n\n    1. Lin Clark\n\n> This is an optional feature. Users can choose whether they want to use TRR,\n> and they can also choose their TRR provider.\n\nMay 31st, 2018 at 12:59\n\n      1. Sara Dickinson\n\n> But you do state clearly that \u201cWe\u2019d like to turn this on as the default for\n> all of our users. \u201c. At that point I presume the default \u2018TRR\u2019 would be\n> Cloudflare? If so, then in practice the vast majority of your users (non-\n> technical ones who won\u2019t read or necessarily understand the details of this\n> change) will have their DNS queries from Firefox sent to Cloudflare \u2013\n> correct?\n\nJune 1st, 2018 at 02:34\n\n        1. Lin Clark\n\n> We are in early days of testing TRR and DoH and getting feedback from users,\n> so it\u2019s not clear whether this will be turned on by default, or what the\n> roll-out would look like if we do. I do feel confident that we can find a\n> way to communicate the choices to non-technical users though.\n\nJune 1st, 2018 at 08:26\n\n    2. qgustavor\n\n> I believe more on Cloudflare than public wifi providers. A better option is\n> letting the user choosing what trusted resolver they want to use: don\u2019t\n> trust Cloudflare? Fine, choose other resolver. Or better (if it\u2019s possible,\n> I don\u2019t know) run your own resolver proxying your trusted ISP DNS then when\n> you\u2019re not in your network you just connect to your own resolver avoiding\n> the unsafe public wifi resolver. By the way, a special case: I believe more\n> Cloudflare than my ISP because as they hijack DNS requests in order to show\n> ads and other unwanted content.\n\nMay 31st, 2018 at 13:43\n\n      1. Lin Clark\n\n> > A better option is letting the user choosing what trusted resolver they\n> want to use: don\u2019t trust Cloudflare? Fine, choose other resolver.\n>\n> Yes, agreed, and that is why we are allowing users to choose their own\n> resolver using network.trr.uri.\n\nJune 1st, 2018 at 07:19\n\n  18. Mohamed Hussain\n\n> Thanks Lin...I learned how dns works and how the web page fetched from\n> server and what are threats involved and how to overcome And what is\n> resolcer and how cloudflare\u2019s 1.1.1.1 resolver comes into the play\n\nMay 31st, 2018 at 13:28\n\n  19. Adam Logghe\n\n> When will we see this on Firefox Mobile Beta (61.0b9) where it\u2019s most\n> needed?\n>\n> Most of us have much better control over our desktop and laptop DNS when\n> needed or wanted but mobile operating systems are much more user hostile\n> that way.\n\nMay 31st, 2018 at 13:42\n\n  20. RobertasR\n\n> Explanation is super simple and detailed! This sounds all nice and pretty,\n> but how would this work where you would have your local DNS servers with\n> private TLD responsible for internal systems and internal IP addresses. How\n> would DoH work then? How would the separation of local and public DNS\n> queries be done? Can Firefox work in such split mode, or is it either on or\n> off? I am willing to test this at work, just don\u2019t want to end up not being\n> able to reach local resources. Thanks for info!\n\nMay 31st, 2018 at 15:19\n\n  21. Joe G\n\n> >We\u2019ll use the default resolver, as we do now, but we\u2019ll also send the\n> request to Cloudflare\u2019s DoH resolver. Then we\u2019ll compare the two to make\n> sure that everything is working as we expect.\n>\n> Concerns I have with this:\n>\n> 1) Leaking all DNS requests made to a 3rd party by default is a\n> philosophical privacy concern\n>\n> 2) When/if Cloudlare\u2019s HTTPS DNS becomes the \u201cprimary\u201d DNS provider firefox\n> uses, it will break split-horizon DNS use cases, such as an organization or\n> school having sites that only resolve internally. Potentially will also the\n> login functionality for hotel/airport wifi.\n\nMay 31st, 2018 at 15:40\n\n  22. Wajdi Dhifi\n\n> Thank you for this interesting article that explains some new concepts to\n> me. But I still have 2 questions : 1- Is DNS over HTTPS the same thing as\n> DNS over TLS ? 2- Since DoH is relatively a new technology (please correct\n> me if I\u2019m wrong), I don\u2019t think that all authoritative name servers (TLD\n> name servers + name servers used by domain names) will provide support for\n> this feature because it requires deploying valid TLS certificates on DNS\n> servers and renewing them by server administrators before expiration. Hence,\n> Cloudflare resolver won\u2019t be able to establish secure connections with all\n> name servers, and since the user thinks that his/her DNS requests are all\n> encrypted during the whole process, what does 1.1.1.1 do in this case ? Does\n> it use regular DNS and then on-path routers would be able to read the\n> packers ? Thank you\n\nMay 31st, 2018 at 16:11\n\n  23. Jabber Yahya\n\n> Great article, thank you!\n\nMay 31st, 2018 at 16:54\n\n  24. Dhiman, Abhimanyu\n\n> It was fun reading this article, especially so with its turning the figgers\n> into cartoons!\n\nMay 31st, 2018 at 22:40\n\n  25. Vladimir Pavlychev\n\n> Thanks that visually demonstrated how the DNS works, as well as touched on\n> security issues and the HTTPS protocol.\n\nMay 31st, 2018 at 23:38\n\n  26. Jimbo\n\n> Would be good to see a DNS proxy that can do this ;)\n\nJune 1st, 2018 at 00:06\n\n  27. anonymouse\n\n> I would be really cool if dns over http could provide ssl-certificates. Then\n> Cloudflare could download the certificates (if it isn\u2019t already written in a\n> DNS record). And the client could use it for even faster initial handshake\n> and more importantly avoid leaking SNI.\n\nJune 1st, 2018 at 01:14\n\n  28. Robert Lu\n\n> Why not DNS over TLS? It\u2019s covered by RFCs. And overt HTTPS have extra http\n> layer.\n>\n> DNS over TLS have less latency time.\n\nJune 1st, 2018 at 01:59\n\n    1. Lin Clark\n\n> There\u2019s a great write-up of the reasoning behind this:\n> https://bitsup.blogspot.com/2018/05/the-benefits-of-https-for-dns.html\n\nJune 1st, 2018 at 07:23\n\n  29. Curious\n\n> I want to (also) know more about any weaknesses in the digital certificate\n> infrastructure.\n>\n> I am no expert and take the following with a grain of salt so to speak: I\n> can\u2019t help but wonder that a digital certificate can be either a) forged or\n> b) duplicated, making me wonder if the whole system with certificates to\n> enabled \u201cblind trust\u201d between you and other computers/servers, can be abused\n> by state powers (or others) maybe having copies of digital certificates that\n> allows them to randomly, casually, persistently, or oddly, or on demand,\n> join someones browsing session for purpose of monitoring, or\n> tampering/manipulation.\n>\n> Q: Is the blind trust problem of mine re. digital certificate system a real\n> threat to use of encrypted TLS/HTTPS connections between computers? Or am I\n> misunderstanding how things work re. the use of digital certificates,\n> assuming that a state actor has a duplicate/forged certificate to any server\n> that other traffic passes by.\n\nJune 1st, 2018 at 02:19\n\n  30. Me\n\n> Wait a second, Cloudflare is based in the USA. So it is subjected to USA law\n> and as such cannot be trusted regarding privacy by anyone outside the USA.\n>\n> If you consider to offer Cloudfare to users outside the USA, please be very\n> clear about this and do not make it the default option.\n>\n> That aside, I really don\u2019t think that this centralized approach is a good\n> idea. Why not expand on DNSSEC? Why not get rid of external resolves all\n> together?\n\nJune 1st, 2018 at 04:02\n\n  31. thamaraiselvam\n\n> Thanks, Deep learning about DNS resolvers. Neat and simple explanation. So\n> here you are talking about DNS new DNS resolver 1.1.1.1? Will it work as\n> same If I use 1.1.1.1 as my default DNS resolver on my computer?\n\nJune 1st, 2018 at 05:31\n\n  32. Anon Coward\n\n> You left out the server name(s) and SAN data that also comes back in\n> plaintext before TLS is established. Frankly, it\u2019s a major embarrassment\n> that SNI and SAN, both in plaintext, both got into TLS. It\u2019s crazy-obvious\n> that that should be encrypted, and nobody needs to do name checking before\n> establishing the cryptography ever, so it was a totally unnecessary mistake\n> that should never have been permitted.\n>\n> SAN is also another major information leaker as well that needs to be fixed.\n> It\u2019s all very well to protect user privacy, but we should also be protecting\n> site privacy as well. Take a look at all the private info that your own web\n> site is leaking to the world on every connection for example:\n>\n> DNS Name=blog.mozilla.org DNS Name=blog.nightly.mozilla.org DNS\n> Name=brendaneich.com DNS Name=research.mozilla.org DNS\n> Name=openstandard.mozilla.org DNS Name=observatory-test.mozilla.org DNS\n> Name=hacks.mozilla.org DNS Name=connected.mozilla.org DNS\n> Name=mozilla.berlin DNS Name=blog.mozilla.com DNS\n> Name=blog.seamonkeyproject.org DNS Name=blog.getfirebug.com DNS\n> Name=www.brendaneich.com DNS Name=www.openstandard.org DNS\n> Name=thewhiteroomnyc.org DNS Name=openstandard.org DNS Name=blog.seamonkey-\n> project.org DNS Name=theglassroomnyc.org DNS Name=theglassroom.org DNS\n> Name=www.theglassroomnyc.org DNS Name=www.theglassroom.org DNS\n> Name=www.mozilla.berlin DNS Name=blog.lizardwrangler.com DNS\n> Name=quality.mozilla.org\n\nJune 1st, 2018 at 06:46\n\n    1. NiKiZe\n\n> You do realize that without SNI being done before encryption there is no way\n> for the server to know which certificate to use so \u201cnobody needs to do name\n> checking before establishing the cryptography ever\u201d does not make sense.\n> Without SNI we would need on IP per certificate \u2013 which is not possible with\n> todays lack of available IPv4 addresses. Encryption before SNI might not be\n> impossible, but it would add several roundtrips on top of the already big\n> roundtrip mess. how is http/2 in this regard?\n\nJune 2nd, 2018 at 01:53\n\n    2. Lennie\n\n> If I\u2019m not mistaken in TLS/1.3 the certificate and thus SAN (the host names\n> of the server) are now encrypted.\n>\n> They are still busy figuring out how to do it for SNI (the name the client\n> requests).\n\nJune 4th, 2018 at 00:05\n\n  33. Anup Mahindre\n\n> Hello. This sounds great. Another addition to firefox\u2019s privacy enabling\n> features. I have another doubt though: Usually DNS requests are made using\n> UDP. UDP being connectionless implies no connection setup and so faster DNS\n> requests. But DNS over HTTPS sounds like something that would NEED TCP?\n> Wouln\u2019t that make each DNS request a bit slower and hence affect overall\n> performance? (I\u2019m not sure I\u2019m right, please correct me if I\u2019m wrong, I\u2019m a\n> CS UG student who has just learnt about Computer Networks ;-) )\n\nJune 1st, 2018 at 07:03\n\n  34. Ofek Shilon\n\n> If I understand correctly, for every navigation there are several TLS\n> handshakes where previously there were none (to each dns in the hierarchy).\n> What is the navigation time impact? Do you have some benchmarks?\n\nJune 1st, 2018 at 08:48\n\n  35. Alejandro Ortiz\n\n> This is a remarkable explanation and a pleasure to read. Thanks!!!\n\nJune 1st, 2018 at 09:05\n\n  36. NiKiZe\n\n> This sounds good \u2013 for out in the wild internet usage. But what about my\n> internal DNS that should always be checked first? It might be an .internal\n> that handles several local things. It might be my official DNS name but is\n> only accessible from inside my network. Or it might give different views\n> depending on who calls it ... if i reach for http://www.mydomain from an\n> internal machine then I want it to return the internal IP for the server,\n> and not the external one. How does mozilla intend to handle this in Firefox?\n\nJune 2nd, 2018 at 01:59\n\n  37. giuix\n\n> Clear and understandable explanation! In the hope that users will pay mon\n> attention.\n\nJune 2nd, 2018 at 03:18\n\n  38. Ayush Jain\n\n> Pretty nice compiled cartoon article.Personally loved it want to get deep\n> technical understanding about all this and want to help test. -:)-:)\n\nJune 2nd, 2018 at 06:59\n\n  39. Daniel Adamu\n\n> Thank you.\n\nJune 2nd, 2018 at 08:25\n\n  40. Douglas Russell\n\n> I\u2019ve been looking into using a VPN precisely to get rid of the bums who\n> follow us around. How does this welcome innovation relate to or overcome the\n> need for a VPN? Does this compliment the efforts of a VPN or conflict with\n> it?\n\nJune 2nd, 2018 at 17:17\n\n  41. AMD\n\n> How do these improvements protect users compared to using a VPN. Does\n> Firefox plan to offer an in browser VPN capability the way Quora does?\n\nJune 2nd, 2018 at 18:50\n\n  42. Andre\n\n> Easy to understand, THANKS Lin!!!\n\nJune 3rd, 2018 at 11:43\n\n  43. Ken M\n\n> What about LAN resources like intranet sites? I use a lot of locally hosted\n> pages both at work and home.\n\nJune 4th, 2018 at 06:22\n\n  44. Majid\n\n> Such a beautiful and Interesting writing\n\nJune 5th, 2018 at 01:54\n\nComments are closed for this article.\n\nExcept where otherwise noted, content on this site is licensed under the\nCreative Commons Attribution Share-Alike License v3.0 or any later version.\n\n", "frontpage": true}
