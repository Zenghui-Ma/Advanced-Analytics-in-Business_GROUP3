{"aid": "40145875", "title": "What keeps you coming back to Emacs?", "url": "https://protesilaos.com/codelog/2024-04-24-re-what-keeps-you-emacs/", "domain": "protesilaos.com", "votes": 3, "user": "dargscisyhp", "posted_at": "2024-04-24 15:52:41", "comments": 0, "source_title": "Re: what keeps you coming back to Emacs?", "source_text": "Re: what keeps you coming back to Emacs? | Protesilaos Stavrou\n\nSkip to content\n\nProtesilaos Stavrou\n\n\ud83c\udfc6 I provide private lessons on Emacs, Linux, and Life in general:\nhttps://protesilaos.com/coach/. Lessons continue throughout the year.\n\n# Re: what keeps you coming back to Emacs?\n\n2024-04-24\n\nThe following is part of a private exchange. I am publishing it with\npermission, without disclosing the identity of my correspondent.\n\n> I hope you don\u2019t mind me asking but what keeps you coming back to Emacs? I\n> am currently wondering whether to look at Neovim again - it does seem to be\n> faster and with a strong community around it. I love Emacs and its community\n> but from time to time wonder whether I am on the wrong side of Lisp vs Lua\n> for example in the case of Neovim for performance, simplicity, modernity,\n> etc.\n>\n> What is your driver to work so hard in Emacs, Prot?\n\nI come from a background of using the command line, all sorts of terminal-\nbased programs like Mutt and Newsboat, Tmux, Vim, and a tiling window manager.\nNone of those tools speak the same language. To make them work in concert, you\nhave to know many programming and/or configuration paradigms. Just to get the\nsame theme everywhere is a pain: try to configure Taskwarrior, Newsboat, Mutt,\nMPC, Vim, Tmux, i3, and friends to get an idea. Then try to set a high\ncontrast light theme in the terminal to notice how hard-coded assumptions will\nbreak your workflow (e.g. the \u2018apt\u2019 program\u2019s progress bar, or the tabs and\nborders of \u2018htop\u2019). Plus, you are confined to a terminal emulator, whose\ntypographic capabilities are limited, such that you cannot have fonts of\nvarying widths and heights (maybe there are terminals that do this nowadays,\nthough XTerm, ST, and those based on VTE did not cover all my needs pre-2019).\n\nEmacs provides the missing layer of interactivity on top of Unix. We have a\nhighly capable programming language (Emacs Lisp) to configure all parts of our\ncomputing environment in a uniform fashion. If you know how to write a\nfunction or set a variable for task management, you know how to do it for\nemail, and for writing or coding, et cetera. The skills you acquire as you\ngain more experience with Emacs have a compounding effect. You eventually get\nmore out of the time you invest in them, which practically means that you are\nempowered to design the workflow you want and be as opinionated as you like\nwith your tool.\n\nI am not a programmer by training and did not have any formal education in\nthis or related fields: I studied politics for the most part. I also was not a\ntech kid: I got my first computer in my mid-20s. Emacs\u2019 introspectability has\nhelped me learn how to program by playing around with Elisp. It is so easy to\nfind some code that is of immediate interest to you, tweak it, evaluate it,\nand check its new behaviour live. Take, for example, the command that shows\nyou which command a key is bound to: describe-key. It produces a Help buffer\nthat includes a link to the source code. Follow the link and you are reading\nthe actual code. From there it is only a matter of time and practice until you\nget the hang of it and start tweaking things to work the way you want.\n\nEmacs is a tool with high pedagogical potential because it is a sandbox that\nenables experimentation. The feedback loop between test and results is short\nand intuitive. If I, as a humanities person and philosopher, am able to learn\nElisp and write lots of Emacs packages, I can only imagine what a skilled\nprogrammer or engineer will be capable of.\n\nTo the point of how didactic Emacs is, consider that once you learn to define\na function with defun and make it interactive with the (interactive) spec, it\nis trivial to write your first \u201cextension\u201d in Elisp. For example:\n\n  * Use describe-key to find which command is bound to the down arrow key.\n\n  * Read the documentation that pops up.\n\n  * Now write an interactive function that goes down 15 lines.\n\n  * Write another that goes up 15 lines.\n\n[ These are actually the first functions I remember writing. ]\n\nThere you have it: you are programming in Emacs Lisp!\n\nThis introspectability\u2014and the immediacy of the experience\u2014is helpful to\nbeginners and veterans alike. Whenever an expert wants to extend or intercept\na function or parts thereof, they rely on what they had learnt while they were\nstill a newcomer, adding to it as they go.\n\nNot to imply that only coders benefit from Emacs though (most of what I do is\nprose, anyway). One can be productive without ever writing their own custom\nsnippets of Elisp. For instance, I handle my email in Emacs. I can just call\norg-store-link to capture a link to the message I am reading and then insert\nthat link in some task that shows up on my agenda (or use org-capture to\nstreamline this process). When I follow the link, it opens my actual email\nclient and I can review what the exchange was about. These linkages are\npossible because of the unified computing environment I mentioned earlier.\nThis same pattern applies in other contexts as well. And it is all plain text,\nwhich is consistent with Emacs\u2019 spirit of hackability/introspectability.\n\nThe technical merits of Emacs are numerous, though I must also stress its\nmoral quality as free software. To my mind, Emacs is the embodiment of the\nfour essential software freedoms: https://www.gnu.org/philosophy/free-\nsw.en.html. It does not give us freedom in some vague sense, but in the\npractical way of introspectability and extensibility. We not only study the\nprogram, but also modify it in real time. Emacs is thus an example to follow\nfor how to empower users to be free and how to teach them to seek freedom\nwherever possible. Even the intangibles, such as how you are incentivised to\nmake Emacs your own, underpin the ethos of freedom and the fact of diversity.\n\nIs Emacs perfect? Of course not. There are lots of changes that can be made.\nThough we must remember that this is a community of volunteers. To have what\nwe want at the technical level, we must do the requisite work at the\ninterpersonal level: to ensure that there is a thriving and welcoming milieu\nfrom where innovation will come.\n\nIn conclusion then, I use Emacs as it is technically superior to what I was\nusing before. The more I learn, the better my Emacs becomes. This is the gift\nthat keeps giving. I also use Emacs because I care about software freedom and\nwant to do my part in inspiring others to be more free.\n\nPrevious:Emacs: Denote backlinks for Org headings\n\nSee all: Code blog entries\n\nCopyright (c) 2011-2024 Protesilaos Stavrou. All original content is licensed\nunder a free/libre copyleft license (GPL or CC BY-SA). Read the notice about\nthe license and resources.\n\n", "frontpage": false}
