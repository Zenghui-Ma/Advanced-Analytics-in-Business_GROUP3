{"aid": "40075709", "title": "Tailwind CSS Anti-Patterns to Avoid", "url": "https://spin.atomicobject.com/tailwind-css-anti-patterns/", "domain": "atomicobject.com", "votes": 1, "user": "philk10", "posted_at": "2024-04-18 12:57:07", "comments": 0, "source_title": "5 Tailwind CSS Anti-Patterns to Avoid", "source_text": "5 Tailwind CSS Anti-Patterns to Avoid\n\n\u2190 Back to Blog Home\n\n# 5 Tailwind CSS Anti-Patterns to Avoid\n\nUX/Design Tools\n\nby: Jonathan Chaffer\n\nApril 18, 2024\n\n  * Twitter\n  * Facebook\n  * Linkedin\n  * Hackernews\n\n### Article summary\n\n  * 1\\. Using the built-in color palette\n  * 2\\. Under-utilizing theme customization\n  * 3\\. Not using a component-based framework\n  * 4\\. Using the @apply directive\n  * 5\\. Using Tailwind at all in domain-level components\n  * Conclusion\n\nTailwind CSS has been a game-changer for many developers over the past few\nyears, offering a utility-first approach that helps quickly translate design\ninto code. It\u2019s not that Tailwind itself is an anti-pattern; on the contrary,\nit\u2019s a very useful tool. It enables developers to move faster and style\nelements with more granularity. Moreover, it helps to reduce the gap between\nstructure and style, making it easier to see the design directly in the\nmarkup.\n\nHowever, like any powerful tool, it\u2019s possible to misuse Tailwind CSS, leading\nto less maintainable code and other complications. Here are some anti-patterns\nyou should be wary of when working with Tailwind CSS.\n\n## 1\\. Using the built-in color palette\n\nTailwind comes with a comprehensive color palette which is great for\nprototyping. However, relying solely on the built-in palette for your final\nproduct can lead to a lack of brand consistency. Worse, it can get you into a\nstate where your colors lack semantic meaning and thus aren\u2019t used\nconsistently throughout your application.\n\nTailwind\u2019s default color palette is expansive, and probably overkill for your\nproject.\n\nInstead, you should create semantic names for all the colors you use\nthroughout your project, and completely replace the default palette with them.\n\nIf you want to support multiple themes, consider defining your colors as CSS\nvariables, rather than within your Tailwind config. This allows you to assign\nmultiple colors to the same semantic name depending on the theme selected.\n\n## 2\\. Under-utilizing theme customization\n\nOne of the best aspects of Tailwind is its design-by-constraints philosophy.\nRather than styling everything with magic numbers, Tailwind\u2019s utility-first\napproach forces you to choose styles from a predefined design system, making\nit easier to build consistent user interfaces. However, the built-in Tailwind\ntheme doesn\u2019t always match the design system used by your application. Because\nof this, it\u2019s easy to fall into use of \u201cmagic classes,\u201d where utility classes\nare used willy-nilly without adherence to an established design system.\n\nSimilar to overriding the default color palette, you can (and should)\nconfigure the entire theme to fit your application\u2019s design system, including\ntypography, breakpoints, spacing, and more. This will help you enforce\nconsistent use of styles across your application.\n\n## 3\\. Not using a component-based framework\n\nTailwind is best leveraged in a component-based architecture like React, Vue,\nor Svelte. While it\u2019s possible to use Tailwind in regular HTML, the lack of\nreusability can cause a lot of duplication. The Tailwind docs advise you to\nuse multi-cursor editing to circumvent this. However, it\u2019s a risky maneuver\nrequiring you, the fallible human, to ensure you always have every instance of\nthe duplicated code selected.\n\nIn contrast, when using a component-based framework, you can define a\ncomponent once and reuse it throughout your application. Here\u2019s an example\nusing React:\n\nJavaScript\n\n    \n    \n    // Define a reusable Button component using Tailwind utility classes const Button = ({ children, onClick }) => { return ( <button onClick={onClick} className=\"bg-primary hover:bg-primary-alt text-primary-contrast py-2 px-4 rounded\" > {children} </button> ); }; // Use (and re-use) the Button component without having to duplicate Tailwind classes const App = () => { return ( <div> <Button onClick={() => console.log('Clicked!')}>Click Me</Button> <Button onClick={() => console.log('Clicked too!')}>Click Me Too</Button> </div> ); };\n\n## 4\\. Using the @apply directive\n\nTailwind lets you inline existing utility classes in your own custom CSS via\nthe @apply directive. While it can be useful for specific use cases, like\noverriding styles in a third-party library, it breaks Tailwind\u2019s utility-first\nparadigm. One of the strengths of utility classes is their composability; you\ncan mix and match them directly in the HTML. When you use @apply, you create a\nfixed set of styles that are less flexible and harder to customize without\ngoing back to the stylesheet.\n\nTo use the @apply directive effectively and avoid these issues, it\u2019s important\nto:\n\n  * Limit its use to scenarios where it makes sense, such as when you need to override styles from third-party libraries.\n  * Ensure that any custom class created with @apply is truly reusable and not just a one-off style that could be handled by utility classes and a self-contained component.\n\n## 5\\. Using Tailwind at all in domain-level components\n\nWhile Tailwind is great for implementing reusable component libraries, its\nutility should end there. If you\u2019re building components that fulfill higher-\nlevel business requirements (e.g. a checkout form on an e-commerce site), you\nshouldn\u2019t be reaching for Tailwind\u2019s utility classes. Instead, you should have\nalready built out reusable components for all the required pieces, including\nform inputs, buttons, and layout containers. Otherwise, you\u2019ll end up with a\nlot of duplication across your front-end, making it harder to ensure that\nstyles are being used consistently throughout.\n\n## Conclusion\n\nWhile Tailwind CSS offers a powerful and flexible utility-first approach to\nstyling web applications, it\u2019s important to be mindful of common pitfalls that\ncan compromise the maintainability and scalability of your code. By\nthoughtfully integrating Tailwind with a consistent design system, embracing\ncomponent-based architecture, and creating a library of reusable components,\nyou can build clean, consistent, and highly maintainable user interfaces.\n\ncsstailwind\n\nJonathan Chaffer Creative coder interested in art, animation, and graphic\ndesign.\n\nAll Posts \u2192\n\n### Related Posts\n\n  * UX/Design Tools\n\n## What to Consider When Selecting a Component Library\n\n  * UX/Design Tools\n\n## Prime Faces: A Worthy Bootstrap Alternative?\n\n  * UX/Design Tools\n\n## Figma for Developers: Overlooked Features to Use on Your Next Project\n\n## Keep up with our latest posts.\n\nWe\u2019ll send our latest tips, learnings, and case studies from the Atomic\nbraintrust on a monthly basis.\n\n[mailpoet_form id=\"1\"]\n\nConversation\n\n### Join the conversation Cancel reply\n\n### UX & Design Category\n\n  * Figma\n  * Design Strategy\n  * UX/Design Practices\n  * UX/Design Techniques\n  * UX/Design Tools\n  * Exploratory Testing\n\nRelated Posts\n\nUX/Design Tools\n\n# What to Consider When Selecting a Component Library\n\nUX/Design Tools\n\n# Prime Faces: A Worthy Bootstrap Alternative?\n\nUX/Design Tools\n\n# Figma for Developers: Overlooked Features to Use on Your Next Project\n\n### Tell Us About Your Project\n\nWe\u2019d love to talk with you about your next great software project. Fill out\nthis form and we\u2019ll get back to you within two business days.\n\nShare Your Project\n\nAtomic is a software design + development consultancy.\n\n\u00a9 2024 Atomic Object LLC\n\n##### Explore\n\n  * Careers\n  * Diversity\n  * Resources\n  * Atomic Blog\n\n##### Offices\n\n  * Grand Rapids\n  * Ann Arbor\n  * Chicago\n  * Raleigh-Durham\n\n##### Details\n\n  * Contact\n  * Media\n  * Privacy Policy\n\nLoading Comments...\n\n", "frontpage": false}
