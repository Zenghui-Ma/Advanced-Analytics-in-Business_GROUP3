{"aid": "40159239", "title": "LDB: Large Language Model Debugger via Verifying Runtime Execution Step by Step", "url": "https://github.com/FloridSleeves/LLMDebugger", "domain": "github.com/floridsleeves", "votes": 1, "user": "panqueca", "posted_at": "2024-04-25 16:05:34", "comments": 0, "source_title": "GitHub - FloridSleeves/LLMDebugger: LDB: A Large Language Model Debugger via Verifying Runtime Execution Step by Step", "source_text": "GitHub - FloridSleeves/LLMDebugger: LDB: A Large Language Model Debugger via\nVerifying Runtime Execution Step by Step\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nFloridSleeves / LLMDebugger Public\n\n  * Notifications\n  * Fork 21\n  * Star 177\n\nLDB: A Large Language Model Debugger via Verifying Runtime Execution Step by\nStep\n\n### License\n\nApache-2.0 license\n\n177 stars 21 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# FloridSleeves/LLMDebugger\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nFloridSleevesMerge pull request #5 from eltociear/patch-1Apr 2, 2024523e0ef \u00b7\nApr 2, 2024Apr 2, 2024\n\n## History\n\n14 Commits  \n  \n### assets\n\n|\n\n### assets\n\n| init| Feb 28, 2024  \n  \n### input_data\n\n|\n\n### input_data\n\n| init| Feb 28, 2024  \n  \n### programming\n\n|\n\n### programming\n\n| fix pool close| Mar 13, 2024  \n  \n### results/ldb\n\n|\n\n### results/ldb\n\n| line level function level rename| Feb 29, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| init| Feb 28, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Create LICENSE| Feb 28, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Apr 2, 2024  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| init| Feb 28, 2024  \n  \n## Repository files navigation\n\n# LDB: A Large Language Model Debugger via Verifying Runtime Execution Step by\nStep\n\nThis repository contains the code and dataset for our paper LDB: A Large\nLanguage Model Debugger via Verifying Runtime Execution Step by Step.\n\nWe introduce \ud83d\udee0\ufe0fLDB, a novel debugging framework that enables LLMs to refine\ntheir generated programs with the runtime execution information. Specifically,\nLDB imitates how human developers debug programs. It segments the programs\ninto basic blocks and tracks the values of intermediate variables after each\nblock throughout the runtime execution. This allows LLMs to concentrate on\nsimpler code units within the overall execution flow, verify their correctness\nagainst the task description block by block, and efficiently pinpoint any\npotential errors.\n\n## \ud83d\udce6 Installation\n\n    \n    \n    conda create -n ldb python=3.10 conda activate ldb python -m pip install -r requirements.txt\n\n## \ud83d\udcc8 Usage\n\n### Set Environment\n\nIf you use OpenAI models as backbones:\n\n    \n    \n    export OPENAI_API_KEY=[your OpenAI API Key]\n\nIf you use starcoder or codellama, we recommend to setup an OpenAI compatible\nserver based on vLLM. Here is the instruction Setup vLLM backbones.\n\n### Generate Program Seeds\n\n    \n    \n    cd ./programming ./run_simple.sh [dataset] [model] [output_dir]\n\nThe result is in output_data/simple/[dataset]/[model]/[output_dir].\n\nAvailable options:\n\nOption| Value  \n---|---  \ndataset| humaneval, mbpp, transcoder  \nmodel| gpt-3.5-turbo-0613, gpt-4-1106-preview, starcoder, codellama\n(codellama/CodeLlama-34b-Instruct-hf)  \n  \n### Debug Programs\n\nRun the script:\n\n    \n    \n    cd ./programming ./run_ldb.sh [dataset] [model] [seed] [output_dir]\n\nThe result is in output_data/ldb/[dataset]/[model]/[output_dir]\n\nAvailable options:\n\nOption| Value  \n---|---  \ndataset| humaneval, mbpp, transcoder  \nmodel| gpt-3.5-turbo-0613, gpt-4-1106-preview, starcoder, codellama\n(codellama/CodeLlama-34b-Instruct-hf)  \nseed| Path to the seed program you want to debug. You can find the seed\nprograms we use in experiments in\ninput_data/[dataset]/seed/[model]/seed.jsonl.  \n  \n### Setup vLLM backbones\n\nWe use the OpenAI compatible server based on vLLM. Please refer OpenAI-\nCompatible Server for detailed instructions to setup the local servers. To\nstart the server:\n\n    \n    \n    python -m vllm.entrypoints.openai.api_server --model bigcode/starcoder\n\nLDB automatically sets up the connection to your local servers when you\nspecify model starcoder or codellama.\n\nIf your server port is not the default 8000, please set the option --port in\nrun_simple.sh or run_ldb.sh to your local server port.\n\n### Use LDB API directly\n\nLDB provides APIs for debugging and generating code with the debugging\nmessages:\n\n    \n    \n    class PyGenerator: ldb_debugldb_debug(self, prompt: str, prev_func_impl: str, failed_test: str, entry: str, model: ModelBase, prev_msg: List[Message], dataset_type: str = \"\", level: str = \"block\") Args: prompt (str): Text description or the code to be translated. prev_func_impl (str): Implementation of the previous function. failed_test (str): One failed test. entry (str): Entry point where debugging is initiated. model (ModelBase): Model used for debugging. The values could be 'gpt-3.5-turbo-1106', 'gpt-4-1106-preview', 'StarCoder', 'CodeLlama'. prev_msg (List[Message]): Previous debugging messages and information. dataset_type (str, optional): Type of dataset being processed. The values could be 'HumanEval' for text-to-code tasks, and 'TransCoder' for C++-to-Python translation tasks. level (str, optional): Level of debugging to be performed. Default is \"block\". The values could be 'line', 'block', 'function'. ldb_generate(self, func_sig: str, model: ModelBase, messages: List[Message], prev_func_impl: Optional[str] = None, failed_tests: Optional[str] = None, num_comps: int = 1, temperature: float = 0.0, dataset_type: str = \"\") -> Union[str, List[str]] Args: func_sig (str): Signature of the function to be generated. model (ModelBase): Model used for code generation. Possible values: 'gpt-3.5-turbo-1106', 'gpt-4-1106-preview', 'StarCoder', 'CodeLlama'. messages (List[Message]): Debugging messages and information. prev_func_impl (str, optional): Implementation of the previous function. failed_tests (str, optional): A failed test (this arg is not used in this function). num_comps (int, optional): Number of completions to generate. Default is 1. temperature (float, optional): Sampling temperature for text generation. Default is 0.0. dataset_type (str, optional): Type of dataset being processed. Possible values: 'HumanEval' for text-to-code tasks, 'TransCoder' for C++-to-Python translation tasks. Default is an empty string. Returns: Union[str, List[str]]: Generated code or list of generated codes. \"\"\"\n\nHere is an example for debugging one round:\n\n    \n    \n    # One round debugging gen = PyGenerator() messages = gen.ldb_debug(prompt, code, test, entry_point, model, \"\", dataset_type, \"block\") fixed_code, messages = gen.ldb_generate( func_sig=task, model=model, prev_func_impl=code, messages=messages, failed_tests=test, dataset_type=dataset_type, )\n\nFor more details, see the example usage in our demo.\n\n## \ud83d\udc1e Bugs or Questions?\n\nIf you have any questions, feel free to post issues in this repo.\n\n## \ud83d\udcd1 Citation\n\nIf you find our work helpful, please cite us:\n\n    \n    \n    @misc{zhong2024ldb, title={LDB: A Large Language Model Debugger via Verifying Runtime Execution Step-by-step}, author={Li Zhong and Zilong Wang and Jingbo Shang}, year={2024}, eprint={2402.16906}, archivePrefix={arXiv}, primaryClass={cs.SE} }\n\n## \ud83d\ude4c Acknowledgement\n\nOur implementation adapts code from Reflexion and staticfg. We thank authors\nof these projects for providing high quality open source code!\n\n## About\n\nLDB: A Large Language Model Debugger via Verifying Runtime Execution Step by\nStep\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n177 stars\n\n### Watchers\n\n3 watching\n\n### Forks\n\n21 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 2\n\n  * FloridSleeves FloridSleeves\n  * eltociear Ikko Eltociear Ashimine\n\n## Languages\n\n  * Python 99.3%\n  * Shell 0.7%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
