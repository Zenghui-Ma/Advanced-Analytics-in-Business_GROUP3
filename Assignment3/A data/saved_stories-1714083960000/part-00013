{"aid": "40159280", "title": "Use :has() to scope CSS", "url": "https://catskull.net/site-specific-global-css-parent-has.html", "domain": "catskull.net", "votes": 1, "user": "catskull", "posted_at": "2024-04-25 16:08:27", "comments": 0, "source_title": "Use :has() to scope CSS", "source_text": "Use :has() to scope CSS\n\n# Use :has() to scope CSS\n\nApr 24 2024\n\n> TL;DR: Use :has() with SEO meta tags and nested CSS selectors to scope\n> styles to a specific website html:has(head\n> meta[property=\"og:site_name\"][content=\"catskull.net\"]).\n\nI\u2019ve given up on ad blockers. I use NextDNS + Stop The Madness, and ads still\nget through. In addition to the ads themselves, there are all kinds of things\non websites I just don\u2019t want to see, such as announcement banners, chat\nbubbles, etc. Various strategies for defeating these annoyances have been\ndeployed, including browser extensions and web proxies. That\u2019s all just too\nmuch for me.\n\nSafari has this weird feature where you can give it a custom user agent style\nsheet. I can\u2019t find any documentation on it, and very little mention online\nbut maybe I\u2019m bad at search. I figured why not just write an adblock CSS file?\nI\u2019ve had a lot of fun staring at the absolutely obscene HTML today\u2019s content\ngenerators spit out. Reverse engineering HTML is not something I thought I\u2019d\never have to do but thank you content providers for the learning opportunity.\n\nI\u2019ve added a bit of tooling and notes and put it up on GitHub\u2197. Simply\ndownload adblock.css and tell Safari to use it!\n\nOne big issue I ran into early on was the fact that the custom style sheet\napplies globally. So if you remove a .hero-banner with an annoying image on\nSite A, then the actually useful .hero-banner on Site B is also hidden. You\ncan get tricky with CSS child/relative selectors\u2197 and such, but sometimes\nthere\u2019s just something that cannot be cleanly selected using traditional CSS\nselectors. ChatGPT really wants me to do this with javascript. It practically\nbegs.\n\nEnter :has()\u2197\n\n:has() is a really fancy new thing as of 2023 that is supported in all\nevergreen browsers\u2197. It\u2019s pretty much a \u201cparent selector\u201d. You can target a\nraw div by some contents of its children! For example:\n\n    \n    \n    .queue:has(h3.sponsored)\n\nThis will select an element with the class queue that contains an h3 tag with\nthe class sponsored. If another queue element exists but does not have a\nsponsored h3 inside, we know that it\u2019s a real item that we want to see and not\nan ad!\n\nTurns out, we can also use :has() to scope otherwise global styles to a\nspecific site! What do potentially scammy content sources love more than\nscammy content? SEO! The <head> is chock-full of very precise tags to tell us\nexactly what site we\u2019re on. But we can\u2019t use those without javascript right?\nWrong!\n\n    \n    \n    html:has(head meta[property=\"og:site_name\"][content=\"catskull.net\"]) { background-color: pink !important; }\n\nIn this example, I\u2019m using the site_name meta tag to apply a style to the html\ntag of the site catskull.net. Boom baby!\n\nWe could combine that with nesting selectors\u2197 but that doesn\u2019t work using the\nSafari style sheet setting as of 17.4.1. Once that works, we can easily scope\nentire styles to a certain site very easily!\n\n    \n    \n    html:has(head meta[property=\"og:site_name\"][content=\"catskull.net\"]) { background-color: pink !important; & p { color: yellow; } }\n\nThis will make all <p> tags yellow and the background pink.\n\n### Footnote\n\nAnother tip to select sneaky unlabeled ad content is by using\nautomation/accessibility attributes on otherwise generically named elements:\nbutton[data-testid=\"close-button\"].\n\n> AI Use Disclaimer: I researched and wrote this post. ChatGPT 4 assisted in\n> formatting, correcting, and validating code and grammar.\n\nback RSS\n\n", "frontpage": false}
