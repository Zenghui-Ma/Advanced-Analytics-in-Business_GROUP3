{"aid": "40145532", "title": "Reproducible image processing servers benchmark: Thumbor vs. imagor vs. imgproxy", "url": "https://imgproxy.net/blog/image-processing-servers-benchmark/", "domain": "imgproxy.net", "votes": 2, "user": "DarthSim", "posted_at": "2024-04-24 15:27:21", "comments": 0, "source_title": "Image processing servers benchmark | imgproxy Blog", "source_text": "Image processing servers benchmark | imgproxy Blog\n\nget pro\n\nApril 2, 2024\n\n# Image processing servers benchmark\n\n  * benchmark\n\nDelivering images to users as fast as possible is crucial for any web\napplication. In the pre-processing era, we didn't care much about the image\nprocessing speed since all the images were processed when they were uploaded.\nBut now, with the rise of on-the-fly image processing, picking the fastest\nserver is critical. In this article, we will compare the performance of the\nmost popular image processing servers.\n\nWe picked the three most popular image processing servers for this benchmark:\n\n  * imgproxy: An image processing server written in Go with libvips under the hood. The main principles of imgproxy are simplicity, speed, and security.\n  * thumbor: A veteran in the on-the-fly image processing world. It's written in Python and uses Pillow for image processing.\n  * imagor: An alternative to thumbor with thumbor-compatible API. Just like imgproxy, it's written in Go and uses libvips for image processing.\n\nBut where's %MY_FAVORITE_TOOL%?\n\nIn our previous benchmark that we ran in 2019, we included more tools like\nimaginary, Pillbox, and some pure Go servers. However, at the moment of\nwriting this article, imaginary seems to be abandoned, and Pillbox is marked\nas deprecated. We also excluded pure Go servers since they show very poor\nperformance.\n\n## Benchmark environment\n\nWe ran all the tests on the following AWS EC2 instances:\n\n  * c7i.large: 2 vCPUs (x86_64, Intel Xeon Platinum 8488C), 4GB RAM (DDR5)\n  * c7g.large: 2 vCPUs (arm64, AWS Graviton3), 4GB RAM (DDR5)\n\nAll the tools were running in Docker containers. For imgproxy and imagor, we\nused the latest versions of the official Docker images. Thumbor lacks an\nofficial Docker image, so we built a Docker image with the latest version of\nthumbor.\n\nCaching was disabled for all the tools to measure the pure image processing\nspeed.\n\nThe test images were taken from the DIV2K dataset and converted to JPEG, PNG,\nWebP, and AVIF formats. The images were served with a local Nginx server to\nmitigate any network speed fluctuations.\n\nWe used k6 to simulate the load and measure the latency. We ran each test with\n2 virtual users (by the number of CPU cores) for 5 minutes.\n\nThe test case was to resize an image to fit into a 512x512 square and save it\nto the original format with the provided quality (when applicable).\n\nWe published the benchmark code on GitHub so you can run it yourself.\n\nNow, let's go to the results!\n\n## JPEG\n\nFor JPEG resizing tests, imgproxy and thumbor were configured to save images\nas progressive JPEGs. Imagor saves JPEGs as progressive by default. The\nresulting quality was set to 80 for all the tools.\n\nTool| CPU| Requests per second  \n---|---|---  \nimgproxy| Intel Xeon Platinum| 79.623415  \nAWS Graviton3| 81.956301 (+3%)  \nthumbor| Intel Xeon Platinum| 51.644103 (-35%)  \nAWS Graviton3| 63.383205 (-20%)  \nimagor| Intel Xeon Platinum| 21.323007 (-73%)  \nAWS Graviton3| 35.66299 (-55%)  \n  \nIn the JPEG resizing tests, imgproxy was the fastest tool for both Intel Xeon\nand AWS Graviton3 CPUs. imgproxy didn't gain much from running on\nGraviton3-powered instances, but thumbor and imagor showed a significant\nperformance improvement compared to the Intel Xeon Platinum instances.\nHowever, considering the lower cost of Graviton3 instances, even a small\nperformance improvement is a good reason to switch to Graviton3.\n\n## PNG\n\nThere are not many things to configure for PNG resizing tests. All the tools\nuse the same default compression level for PNGs and don't use interlaced PNG\nencoding, so we kept all the PNG-related settings as default.\n\nTool| CPU| Requests per second  \n---|---|---  \nimgproxy| Intel Xeon Platinum| 19.246237  \nAWS Graviton3| 22.297412 (+16%)  \nthumbor| Intel Xeon Platinum| 8.878169 (-54%)  \nAWS Graviton3| 12.307963 (-36%)  \nimagor| Intel Xeon Platinum| 9.239028 (-52%)  \nAWS Graviton3| 13.502603 (-30%)  \n  \nimgproxy showed the best performance for PNG resizing tests as well. On Intel\nXeon Platinum-powered instances, imgproxy showed more than twice as much\nperformance than thumbor and imagor. All the tools showed a significant\nperformance improvement on Graviton3-powered instances, but the performance\ngap between imgproxy and the other tools was still significant.\n\n## WebP\n\nFor WebP resizing tests, the resulting quality was set to 75 for all the\ntools. The rest of the WebP-related settings were kept as default.\n\nTool| CPU| Requests per second  \n---|---|---  \nimgproxy| Intel Xeon Platinum| 22.0398  \nAWS Graviton3| 26.243328 (+19%)  \nthumbor| Intel Xeon Platinum| 13.17094 (-40%)  \nAWS Graviton3| 16.444144 (-25%)  \nimagor| Intel Xeon Platinum| 12.017389 (-45%)  \nAWS Graviton3| 16.699987 (-24%)  \n  \nNo surprises here: imgproxy was the fastest tool for WebP resizing tests as\nwell. The performance improvement on Graviton3-powered instances was\nsignificant for all the tools, but imgproxy still showed the best performance.\n\n## AVIF\n\nFor AVIF resizing tests, the resulting quality was set to 65 for all the\ntools. AVIF encoding speed was set to maximum for imgproxy and thumbor.\nUnfortunately, imagor doesn't have the option to set the AVIF encoding speed.\nThis makes this test unfair for imagor, but we can't do anything with it, so\nwe included it just for the sake of completeness.\n\nTool| CPU| Requests per second  \n---|---|---  \nimgproxy| Intel Xeon Platinum| 13.234077  \nAWS Graviton3| 17.785054 (+34%)  \nthumbor| Intel Xeon Platinum| 13.065488 (-1%)  \nAWS Graviton3| 13.759703 (+4%)  \nimagor| Intel Xeon Platinum| 1.612713 (-88%)  \nAWS Graviton3| 2.141814 (-84%)  \n  \nWhat a race we have here! imgproxy and thumbor showed almost the same\nperformance on Intel Xeon Platinum-powered instances, the gap between them may\neven look like a measurement error. However, things changed on\nGraviton3-powered instances: thumbor showed a slight performance improvement,\nwhile imgproxy overtook it confidently with a huge performance boost.\n\nAs for imagor, there were no surprises: the lack of AVIF encoding speed\nsetting made it the slowest tool for AVIF resizing tests.\n\n## Conclusion\n\nFor the five years that have passed since our previous benchmark, the balance\nof power didn't change much. Though thumbor improved its performance, and we\nsaw a new player, imagor, imgproxy is still the fastest racer on the on-the-\nfly image processing track.\n\nWe also wanted to test the image processing performance on AWS Graviton3, and\nwe were very impressed: the performance boost in some tests was quite\nsignificant. Yet we weren't surprised: we have been AWS Graviton fans for\nyears and always recommended running imgproxy on Graviton-powered instances.\n\n### Share this post on\n\n### Start your free trial today:\n\n### Get imgproxy Pro on Cloud Marketplace:\n\nAWS Marketplace\n\nGet in Touch\n\ninfo@imgproxy.net\n\nOr call us\n\n+1 302 803 5428\n\n919 North Market Street, Suite 950 Wilmington, DE 19801\n\nProject\n\n  * Github\n  * DockerHub\n\nCommunity\n\n  * Twitter\n  * Discord\n  * LinkedIn\n\nResources\n\n  * Documentation\n  * Blog\n\n2017\u20132024 Foxes with Matches Inc\n\nBy using this site, you agree with our Privacy policy and Cookie policy\n\nThis site is protected by reCAPTCHA and the Google Privacy Policy & Terms of\nService apply\n\nAll photos are taken by NASA. All photos are edited by imgproxy\n\nAll rights reserved\n\n", "frontpage": false}
