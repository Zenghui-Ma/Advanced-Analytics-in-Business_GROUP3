{"aid": "40097843", "title": "How can you tell if you're a good developer?", "url": "https://vadimkravcenko.com/qa/how-can-you-tell-good-developer/", "domain": "vadimkravcenko.com", "votes": 3, "user": "mooreds", "posted_at": "2024-04-20 14:57:51", "comments": 0, "source_title": "How can you tell if you're a good developer?", "source_text": "How can you tell if you're a good developer?\n\nVadim Kravcenko\n\n\ud83d\udd25 Newsletter\n\n\ud83d\udd25 Roast my Resume\n\n# How can you tell if you\u2019re a good developer?\n\n06 April 2024 \u00b7 Updated 06 April 2024\n\ncareer development growth startups\n\nQuestion\n\nHey Vadim, So, I've been coding for money for about 5 years now. I've jumped\naround a lot \u2014 Java, Javascript, Python, NodeJS \u2014 you name it. The job\nmarket's been great, making it super easy for me to switch between gigs. I've\ndone both full-time and contract work across many different companies. I think\nI've reached the level of being senior as I take on more and more\nresponsibility.\n\nAt every place I've been at, they seemed to love me. I always got the comments\nthat I'm the best dev they'd ever had. But, personally, I've always felt a bit\noff. I'm good at bringing the team together and breaking down problems. Yet,\nthere's always someone who can code better than me. They can whip up solutions\nway faster than I can. I get things quickly, but my code always seemed a bit\nmessier.\n\nNow here is where it starts being interesting. I decided to switch jobs again,\nas Rust is the new fun kid of the block, I decided to switch things up by\nteaching myself Rust. Landed a job at a big-name brand recently, many\nthousands of engineers, and I'm feeling way out of my league. The devs here\nare on another level, I feel like everyone here is smarter than me, even the\njuniors are soo good, coming up with stuff I wouldn't even dream of.\n\nIt's gotten to the point where I'm doubting if I'm cut out for this,\nespecially having the title senior but not really being senior amongst my\nteammates. Makes me think of calling it quits.\n\nSo, here's what my question is: How can I tell if I'm a good developer? Were\nmy previous companies just bad? Now, I feel like I'm just not measuring up.\n\nLooking for some guidance or any advice you've got.\n\nAnswer\n\n## Table of Contents\n\nFeeling like you\u2019re not measuring up, especially after joining a team full of\nsharp minds, is a common experience. I think I went through this cycle\nmultiple times, and will probably go through it many more. I like that\nfeeling. It means that I\u2019ve grown complacent in my position and it\u2019s a good\ntime to learn from others. Remember the saying, \u201cIf you\u2019re the smartest person\nin the room, you\u2019re in the wrong room\u201d? Well, it\u2019s true. Being surrounded by\npeople who seem to be on another level is not just an opportunity but a gift\nfor your personal and professional development. I think you should cherish it,\nregardless if your impostor syndrome is telling you you\u2019re not fit to be\nthere.\n\nSeeing even juniors coming up with ideas that surprise you is actually\nexciting. It shows how the field is evolving and how newcomers are bringing\nfresh perspectives. You have a different set of skills that complements the\ntechnical prowess of your teammates. This diversity is what makes a team\nstrong, not just the ability to code quickly. Everyone has something unique\nabout themselves that brings value to the project.\n\nWorking on projects with code that looks perfect but doesn\u2019t perform well in\nreal-world situations taught me that there\u2019s much more to developing good\nsoftware than just writing clean code. Sometimes, the messier \u201cstartup code\u201d\ncan be more effective in solving immediate business needs, and it can always\nbe improved later.\n\nYou mentioned you\u2019re now diving into Rust and feeling overwhelmed. That\u2019s\nnormal whenever you step into new territory. But don\u2019t forget, every expert in\nRust started somewhere, and they faced their own challenges. You were hired\nfor a reason \u2013 your unique blend of skills and your potential to grow. So, my\nadvice? Stick with it. You\u2019re already doing better than you think. And one\nmore thing \u2013 don\u2019t rush to compare your current self to others. Growth takes\ntime, and everyone\u2019s path is unique. Embrace your journey, and remember, the\nfact that you\u2019re questioning your abilities and seeking to improve already\nsets you apart in the best way possible.\n\nNow, let\u2019s dive deeper into the feeling of not keeping up with your teammates.\nI urge you to shift your perspective. Software development is vast and varied,\nand everyone brings something unique to the table. You, with your knack for\nfostering team spirit and dissecting problems, are no exception.\n\nRemember, your worth as a developer isn\u2019t solely defined by your ability to\nchurn out code at lightning speed or your mastery of the latest stack. It\u2019s\nalso about your approach to problem-solving, your willingness to learn, and\nyour ability to contribute to a team\u2019s dynamics in meaningful ways. These\nqualities often outshine raw technical skills in the long run.\n\nIf you find yourself feeling like a small fish in a big pond, take it as a\nsign that you\u2019re exactly where you need to be to expand your horizons. The\ndiscomfort you feel is the discomfort of growth. It\u2019s an indication that\nyou\u2019re pushing boundaries and stepping out of your comfort zone, which is\nwhere true development happens.\n\nAsk questions, seek feedback, and most importantly, share your own insights\nand experiences. The exchange of knowledge is a two-way street, and you\u2019ll be\nsurprised at how much you can offer, even in a new environment.\n\nTo summarize in terms of how to know if you\u2019re a good developer, it\u2019s rather\nstraightforward:\n\n  1. You receive a problem \u2014 a business problem or a scientific problem.\n  2. You take a look at the problem.\n  3. You figure out how to solve the problem with your knowledge.\n  4. You solve the problem.\n\nIf you can repeat this on a daily basis with some hiccups here and there, then\nyou\u2019re a good software engineer. We, developers, are measured by our ability\nto solve problems, not the amount of lines or the cleanliness of code (though\nit also matters, but it comes with experience). You start with solving a\nproblem in an inefficient way, then you move on to solving the problem in\nefficient way, then you move on to solving it in a maintainable and future-\nproof way, but it\u2019s all about solving the problem, and not the code per se.\n\nYou\u2019re doing far better than you think. Trust the process.\n\n### More questions from users:\n\n  * \ud83e\udde0 I'm finishing university, scared about future career prospects\n  * \ud83e\uddd0 I have a very poor work-life balance. How can I escape the grind?\n  * \ud83d\udcda ..and more questions in the Developer Q&A\n\nHot! The last couple of years I've been writing about CTO / Tech lead job.\nI've compiled all my knowledge into a printable PDF. I called it \"256 Pages of\nNo Bullshit Guide for CTOs\". So if you're interested, take a look.\n\nNew! If you're a software engineer looking for a job, I started a Roast my\nResume service, where I record a personalized video of me \"roasting\" your CV,\nwhich basically means taking a hard look at your resume as a CTO and\ncommenting on all the good and the bad parts.\n\nCancel\n\n#### Top Questions\n\n  * How much equity should a CTO ask for?\n\n  * Doing Self-Promotion on Reddit the right way\n\n  * How to stop thinking like an engineer and think like a businessman?\n\n  * Is 150K USD a reasonable rate to build a mobile app?\n\n  * Can an offshore dev agency steal your code?\n\n  * What is your unethical CS career\u2019s advice?\n\n  * Is coding bootcamp better than university?\n\n#### Popular Long-reads\n\n  * \ud83d\udd52 Rules of Thumb for Software Development Estimations\n\n  * \ud83e\udd77 Things they didn\u2019t teach you about Software Engineering\n\n  * \ud83e\udd39\u2642\ufe0f Habits of great software engineers\n\n#### For Techies\n\n  * \ud83d\udcdc Contracts you should never sign\n\n  * \ud83e\udd2b Falsehoods Junior Developers believe about becoming Senior\n\n  * \ud83c\udfad Managing difficult software engineers\n\nNew!\ud83d\udd75\ufe0f\u2642\ufe0f Roast My Resume Hot!\ud83e\udd16 No-Bullshit CTO Guide \ud83d\udd25 Watch Youtube \ud83d\udcda Startup\nQ&A\n\n77+ people joined this week\n\n### Get insights from a CTO into your inbox every two weeks.\n\nYou've probably read a few of my articles already, that's the kind of content\nyou should expect in the newsletter. I share my thoughts as a CTO. Some of the\ntopics that I like writing about: building SaaS products, growing teams,\nscaling technology and in general being a good founder and a decent person.\n\nNo spam, unsubscribe at any time\n\n## Developer Q&A Latest\n\n  * How can you tell if you\u2019re a good developer?\n  * I\u2019m finishing university, scared about future career prospects\n  * I have a very poor work-life balance. How can I escape the grind?\n  * What is your unethical CS career\u2019s advice?\n  * My coworker rewrote all my code, what should I do?\n  * How do you know when to use which programming language?\n  * How to get programming experience when you can\u2019t find a job?\n  * Do some people just not have the talent for Software Engineering?\n\n## Popular Issues\n\n  * \ud83d\udd52 Rules of Thumb for Software Development Estimations\n  * \ud83d\udcdc Contracts you should never sign\n  * \ud83e\udd77 Things they didn\u2019t teach you about Software Engineering\n  * \ud83e\udd39\u2642\ufe0f Habits of great software engineers\n  * \ud83e\udd2b Falsehoods Junior Developers believe about becoming Senior\n  * \ud83c\udfad Managing difficult software engineers\n  * \ud83d\udce2 The silent majority\n  * \ud83d\udcda Healthy Documentation\n  * \ud83d\udd10 Security at Startup\n\n## Popular Tags\n\n  * Engineering Growth\n  * Management Tips\n  * Development\n  * Startups\n\n## Work with me\n\n  * CTO-as-a-Service\n  * Fractional CTO\n  * Consulting\n\n\u00a9 2024 Vadim Kravcenko. Built with \u2665 in Zurich. All opinions are my own. I use\nPlausible to track certain anonymous events. Some links are affiliate links\nwhere I earn a commission. Contact me at hi@vadimkravcenko.com\n\n", "frontpage": false}
