{"aid": "40074774", "title": "Draggable Examples", "url": "https://www.redblobgames.com/blog/2024-04-17-draggable-examples/", "domain": "redblobgames.com", "votes": 1, "user": "ibobev", "posted_at": "2024-04-18 10:37:00", "comments": 0, "source_title": "Draggable examples", "source_text": "Draggable examples\n\n# Draggable examples\n\nfrom Red Blob Games\n\n17 Apr 2024\n\nOn my pages I often want to be able to move an object around in a diagram\nusing the mouse or touch. Last year I spent some time learning about browser\nmouse+touch events, and wrote a page about event handlers for dragging objects\naround. I hadn\u2019t realized it at the time, but it was only half the solution.\n\nEvent handlers and state handlers\n\nWhat was missing was that the events should affect the application state. I\nhad been writing this code for many years, but I never explained it on the\nevent handler page. I decided to write some examples, starting with: drag\nevents should change application state {x,y} which should change the position\nof an object on the screen, either using positioning or transforms:\n\n  1. svg <circle cx=\"$x\" cy=\"$y\" />\n  2. svg <circle transform=\"translate($x,$y)\" />\n  3. html <div style=\"position:absolute; left: $x; top: $y\" />\n  4. html <div style=\"transform: translate($x,$y)\" />\n\nThe main idea is that the event handlers are independent of the state\nhandlers. The event handlers do not know whether I\u2019m using position:absolute\nor transform:translate(). The event handlers do not apply snap-to-grid or\nconstraints, like they do in other libraries like jquery-ui-draggable or\nreact-draggable. Instead, the state handler handles those things. That means\nthe same event handlers can be used for a wide variety of dragging behaviors,\nincluding non-rectangular constraints and non-grid snapping. The event\nhandlers can work for both svg and html. This structure gives me the\nflexibility I wanted for my projects. I made some examples to show that this\nseparation allows the kinds of common features other libraries have:\n\n  1. Constrained drag (could be a rectangle, but could be any shape)\n  2. Snap to nearest point (could be a grid, but could be anything)\n  3. Drag with a handle (could be a rectangle, but could be anything)\n\nThe state handlers do not know whether I\u2019m capturing mouse or touch or pointer\nevents. Only the event handlers handle those things. That means the state\nhandlers can also be connected to other systems, such as animation libraries\nor text input boxes or scripts.\n\nConstrained drag with snapping\n\nThe second idea I wanted to show on this page is that the same event handlers\ncan be used when not dragging an object, so I made some examples:\n\n  1. \u201cScrub\u201d a number input left and right to change it\n  2. Draw on a canvas\n  3. Draw on an svg grid\n  4. Drag a circle drawn inside a canvas, even though no DOM object is being dragged\n  5. Move and resize a rectangle using nested drag handlers\n\nDrawing on a canvas\n\nI thought making these examples would take a week or two, but I ended up\nspending a lot more time on it. I made a code viewer that showed the event and\nstate handlers for each example. I made a custom highlighter that highlighted\nlines of code to pay attention to. I made a code generator that partially\ngenerated the example code, then ran it. I considered making the examples\neditable, but decided to instead link to live editable editables on jsfiddle\nand codepen.\n\nDisplaying the code powering an example\n\nTaking longer than a week was ok. Some of my projects are timeboxed^[1], and I\ngive myself a week to work on them. I typically use timeboxing when I\u2019m\nlearning something. But this page isn\u2019t one of those. It\u2019s a reference page\nthat I\u2019m willing to spend a lot more time on. I\u2019ll come back to it as I learn\nmore or better ways of doing things. I probably spent 4 weeks on this.\n\nOne thing I had wondered about was: why isn\u2019t this a library? I had presented\nit as a recipe, something to be copied and modified for each situation. But it\ncould\u2019ve been a library, right? But in making these examples I got to see that\nmy own uses are so varied that a library would be overly complicated. The\nevent handlers and state handlers are not fully independent, like I had\nthought they would/should be. So for now I\u2019ll leave it as a recipe, and\nrevisit it later.\n\nTake a look at the examples and feel free to copy them and use them in your\nown projects!\n\nEmail me redblobgames@gmail.com, or tweet @redblobgames, or comment:\n\n### Endnotes\n\n  1. [1]: https://en.wikipedia.org/wiki/Timeboxing\n\nCopyright \u00a9 2024 Red Blob Games RSS Feed\n\nCreated 17 Apr 2024; Last modified: 17 Apr 2024\n\n", "frontpage": false}
