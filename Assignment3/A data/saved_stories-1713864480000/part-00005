{"aid": "40128065", "title": "Charging Customers Is Hard", "url": "https://github.com/getlago/lago/wiki/Why-charging-customers-still-is-hard", "domain": "github.com/getlago", "votes": 2, "user": "AnhTho_FR", "posted_at": "2024-04-23 03:13:29", "comments": 0, "source_title": "Why charging customers still is hard", "source_text": "Why charging customers still is hard \u00b7 getlago/lago Wiki \u00b7 GitHub\n\n## Navigation Menu\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ngetlago / lago Public\n\n  * Notifications\n  * Fork 245\n  * Star 6.1k\n\n# Why charging customers still is hard\n\nJump to bottom\n\nAnh-Tho Chuong edited this page Apr 23, 2024 \u00b7 1 revision\n\n\u201cHow hard could charging money be?\u201d is a quote paraphrased by teams across the\nglobe, perhaps with the occasional expletive.\n\nGetting customers to pay is hard enough as is; it would be nice if charging\ncustomers was a cakewalk. Sadly it\u2019s not. It\u2019s frankly downright confusing.\nBetween metering, billing, invoicing, and payments, there are various\noverlapping components that confuse developers and product managers alike.\n\nPart of the trouble is inconsistent terminology, where marketing-speak is\nconflated with actual object names in code. Another issue is that none of\nthese major components of pricing are trivial problems.\n\nToday, we\u2019re going to attempt something that\u2019ll spark some\ndisagreement\u2014establish hard definitions of each term, particularly in context\nof one another. We\u2019re basing these definitions on how third-party software has\norganized the various sub-problems of charging customers money.\n\nIn short, we\u2019re going to explore the differences between metering, billing,\ninvoicing, and payments.\n\n## Some products don\u2019t deal with all of these\n\nWhile metering, billing, invoicing, and payments are four of the most common\ncharging sub-problems, they don\u2019t apply to all products. For instance, take a\nproduct like Font Awesome\u2014it sells a flat annual subscription, with no concept\nof metering. Or consider a marketplace like Flip\u2014there is no strong concept of\ninvoicing.\n\nWhere all four concepts apply is any usage-based pricing model. Which is, to\nthe surprise of some, a majority of companies. \u201cUsage-based\u201d pricing might\nconnote to a product that bills customers based on API requests or\ninfrastructure hours. However, the most common usage-based billing model is\nseat-based pricing, where companies charge customers based on the number of\nregistered employees using the platform.\n\nKnowing our typical readers, there\u2019s a fair change you are working on that\nexact type of company.\n\nIn a nutshell, usage-based pricing models have to monitor usage, invoice\ncustomers, and charge them appropriately. It is this entire process that\u2019s\nbroken down into those four subcategories (metering, billing, invoicing, and\npayments).\n\n## Metering\n\nMetering is the process of collecting events tied to billable units. For\ninstance, metering for an API company would be counting date-stamped API\nrequests. Or, for a seats-based SaaS businesses, metering is accounting for\nthe number of seats added or released.\n\nThere are various sub-problems when it comes to scaling metering. Some\nproducts might have millions of events to ingest, which need to be efficiently\nqueried to play well with the billing engine (more on that later). These\nqueries often involve date ranges, so timezones also need to be accounted for.\n\n    \n    \n    //sample event { \"event\": { \"transaction_id\": \"1234_5678_90123_4567\", \"external_customer_id\": \"hooli_1234\", \"code\": \"storage\", \"timestamp\": 1699971014, \"properties\": { \"gb\": 12, \"provider: \"aws\", \"region\": \"us-east-1\" } } }\n\nAt times, even the events are complicated. For a storage product, events might\nreport the maximum storage for a period, or an incremental delta, or a\nweighted average. It\u2019s up a metering engine to come up with a fair estimate of\nusage.\n\nFor some products, the source of data isn\u2019t in an internal database, but a log\nsource (like LogStash) or server-less agents (like CloudWatch) \u2014 all of which\nneeds to be accounted for by the metering solution. Today, Lago handles by\nusing ClickHouse, an event-driven OLAP database that\u2019s deployed via Altinity\nOperator on K8s.\n\nAdditionally, events cannot be double counted other the customer will be over-\nbilled. And, in pricing schemes, usage has to be gated depending whatever is\nallowed by the tier.\n\n## Billing\n\nBilling is the process of calculating how much a customer owes and knowing\nwhen they should be charged for it. The former is often conflated with\nmetering\u2014but billing is more holistic, accounting for the total amount owed,\nincluding any flat recurring subscription fees or any one-off fees.\n\nBilling is also often confused with a payments solution like Stripe. Billing\nis not process of charging a customer, just determine how much and when a\ncustomer should be charged. Billing is agnostic to how a customer pays, just\nthat they owe money.\n\nBilling is often the cornerstone piece of the puzzle. In other words, other\nproducts often integrate into a billing solution, not the other way around.\nFor instance, metering is one of many inputs into a billing engine.\n\n## Pricing\n\nAnother input into billing is pricing. Pricing determines how much metered\nunits actually cost.\n\nWhere pricing gets complicated is due to legacy pricing. As products evolve,\nso does pricing. Given that many products grandfather in pricing for earlier\nclients (e.g. let them keep an older rate), pricing can often grow difficult\nto maintain. Additionally, some companies prorate (charge only for the\nremainder of a month if a user joins mid-month). And, sometimes pricing drops\nwith bulk usage (graduated pricing), which just adds to the pricing\ncomplexity.\n\n    \n    \n    //sample pricing object { \"charges\": [ { \"billable_metric_code\": \"storage\", \"charge_model\": \"graduated\", \"invoiceable\": true, \"pay_in_advance\": false, \"prorated\": false, \"min_amount_cents\": 0, \"invoice_display_name\": \"Storage\", \"properties\": { \"graduated_ranges\": [ { \"from_value\": 0, \"to_value\": 10, \"per_unit_amount\": \"0.00\", \"flat_amount\": \"\" }, { \"from_value\": 11, \"to_value\": null, \"per_unit_amount\": \"0.05\" } ] } } ] }\n\nOverall, pricing needs to account for multiple historical pricing models and\nany complexity that deviates from a flat rate.\n\n## Invoicing\n\nInvoicing is the process of issuing a legal document of a balance owed.\nInvoicing and billing are often confused, but they actually have very\ndifferent sub-problems.\n\nWhereas billing is focused on how accurately determining how much people owe\non any arbitrary pay date, invoicing is about giving the customer something\nthat they could pass through their procurement system. In that sense, invoices\nare an output of billing.\n\n    \n    \n    // A sample invoice object { \"fees\": [ { \"external_customer_id\": \"hooli_1234\", \"external_subscription_id\": \"repository_A\", \"taxes_amount_cents\": 0, \"taxes_rate\": \"0.00\", \"units\": \"10\", \"total_amount_cents\": 12000, \"total_amount_currency\": \"USD\", \"events_count\": 23, \"pay_in_advance\": false, \"invoiceable\": true, \"prorated\": false, \"from_date\": \"2022-04-29T08:59:51Z\", \"to_date\": \"2022-05-29T08:59:51Z\", \"payment_status\": \"paid\", \"created_at\": \"2022-08-24T14:58:59Z\", \"succeeded_at\": \"2022-08-24T14:58:59Z\", \"failed_at\": \"\", \"refunded_at\": \"\", \"item\": { \"type\": \"charge\", \"code\": \"storage\", \"name\": \"Storage\" } } ] }\n\nInvoices are documents that can be voided or marked as paid. They are also\noften something that needs to be exportable into something like a PDF.\n\n## Payments\n\nPayments is the actual process of charging a customer money, either through a\ncredit/debit card transaction, an ACH withdrawal, or another method of payment\n(including virtual credits). Payments should be considered an input into the\nbilling system as it fulfills a billing object.\n\nPayments are almost always handled by a third-party as there are ample\nsubprocesses involved with billing methods. These include interfacing with\ncard issuers (e.g. VISA) and banking provider (e.g. JPMorgan Chase). This\nshouldn\u2019t be conflated with banking data providers like Plaid but instead\npayment handlers like Stripe.\n\nAt Lago, we see a lot of our customers use Stripe for Payments while using\nLago for Billing, Metering, and Invoicing.\n\n## Why put Billing at the core?\n\nThe cornerstone piece of all this should be a billing engine. Billing is,\nfundamentally, knowing when and how much to charge customers. Everything else\neither an input or output of billing. The alternative approach is to treat\npayments are the core, but that bundles billing, invoicing, and metering\ntogether, making for a less systematic process.\n\n## Conclusion\n\nBetween billing, pricing, metering, invoicing, and payments, charging\ncustomers money is hard work. It\u2019s important that companies gauge, based on\ntheir business model, where the pain-points will be to ensure a strong\nimplementation. Regardless, putting a billing engine at the center is\ntypically the correct model to ensure that systems are centered around a\nsingle source of truth.\n\n##### Clone this wiki locally\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
