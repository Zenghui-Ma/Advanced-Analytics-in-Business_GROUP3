{"aid": "40158964", "title": "Typer: Python library for building CLI applications", "url": "https://github.com/tiangolo/typer", "domain": "github.com/tiangolo", "votes": 1, "user": "danso", "posted_at": "2024-04-25 15:49:08", "comments": 0, "source_title": "GitHub - tiangolo/typer: Typer, build great CLIs. Easy to code. Based on Python type hints.", "source_text": "GitHub - tiangolo/typer: Typer, build great CLIs. Easy to code. Based on\nPython type hints.\n\nSkip to content\n\n## Navigation Menu\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\ntiangolo / typer Public\n\n  * Sponsor\n  * Notifications\n  * Fork 618\n  * Star 14.4k\n\nTyper, build great CLIs. Easy to code. Based on Python type hints.\n\ntyper.tiangolo.com/\n\n### License\n\nMIT license\n\n14.4k stars 618 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# tiangolo/typer\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n8 Branches\n\n37 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\ngithub-actions\ud83d\udcdd Update release notesApr 10, 20248bffffd \u00b7 Apr 10, 2024Apr 10,\n2024\n\n## History\n\n580 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| \ud83d\udd27 Fix typo in Github template (#793)| Apr 7, 2024  \n  \n### docs\n\n|\n\n### docs\n\n| \ud83d\udcdd Update release notes| Apr 10, 2024  \n  \n### docs_src\n\n|\n\n### docs_src\n\n| \ud83d\udcdd Fix typos in documentation (#761)| Apr 7, 2024  \n  \n### scripts\n\n|\n\n### scripts\n\n| \ud83d\udd27 Tweak development scripts and configs after migration to PDM, Ruff,...|\nApr 10, 2024  \n  \n### tests\n\n|\n\n### tests\n\n| \ud83d\udc1b Fix Rich formatting with no commands (#796)| Apr 9, 2024  \n  \n### typer-cli\n\n|\n\n### typer-cli\n\n| \ud83d\udc1b Fix broken installation when upgrading from typer <0.12.0 to `typ...| Apr\n5, 2024  \n  \n### typer\n\n|\n\n### typer\n\n| \ud83d\udd16 Release version 0.12.3| Apr 9, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| \u2b06\ufe0f Upgrade coverage and configs (#769)| Mar 26, 2024  \n  \n### .pre-commit-config.yaml\n\n|\n\n### .pre-commit-config.yaml\n\n| \ud83d\udd27 Migrate from Black, isort, flake8, autoflake, pyupgrade to Ruff (#763)|\nMar 26, 2024  \n  \n### CITATION.cff\n\n|\n\n### CITATION.cff\n\n| \ud83d\udd27 Add CITATION.cff file for academic citations (#681)| Feb 29, 2024  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| \ud83d\udcdd Add README and CONTRIBUTING| Dec 24, 2019  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| \ud83c\udf89 First commit, Typer scaffolding| Dec 20, 2019  \n  \n### README.md\n\n|\n\n### README.md\n\n| \ud83d\udc1b Fix broken installation when upgrading from typer <0.12.0 to `typ...| Apr\n5, 2024  \n  \n### SECURITY.md\n\n|\n\n### SECURITY.md\n\n| \ud83d\udcdd Add Security policy (#324)| Aug 30, 2021  \n  \n### mkdocs.insiders.yml\n\n|\n\n### mkdocs.insiders.yml\n\n| \u2728 Add typer-slim package without extras, make typer include `type...| Mar\n30, 2024  \n  \n### mkdocs.yml\n\n|\n\n### mkdocs.yml\n\n| \u2728 Add typer-slim package without extras, make typer include `type...| Mar\n30, 2024  \n  \n### pdm_build.py\n\n|\n\n### pdm_build.py\n\n| \ud83d\udc1b Fix broken installation when upgrading from typer <0.12.0 to `typ...| Apr\n5, 2024  \n  \n### pyproject.toml\n\n|\n\n### pyproject.toml\n\n| \ud83d\udd27 Tweak development scripts and configs after migration to PDM, Ruff,...|\nApr 10, 2024  \n  \n### requirements-docs.txt\n\n|\n\n### requirements-docs.txt\n\n| \ud83d\udd27 Refactor package manager, move from Flit to PDM, remove private pip...|\nMar 26, 2024  \n  \n### requirements-tests.txt\n\n|\n\n### requirements-tests.txt\n\n| \ud83d\udd27 Tweak development scripts and configs after migration to PDM, Ruff,...|\nApr 10, 2024  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| \ud83d\udd27 Tweak development scripts and configs after migration to PDM, Ruff,...|\nApr 10, 2024  \n  \n## Repository files navigation\n\nTyper, build great CLIs. Easy to code. Based on Python type hints.\n\nDocumentation: https://typer.tiangolo.com\n\nSource Code: https://github.com/tiangolo/typer\n\nTyper is a library for building CLI applications that users will love using\nand developers will love creating. Based on Python type hints.\n\nIt's also a command line tool to run scripts, automatically converting them to\nCLI applications.\n\nThe key features are:\n\n  * Intuitive to write: Great editor support. Completion everywhere. Less time debugging. Designed to be easy to use and learn. Less time reading docs.\n  * Easy to use: It's easy to use for the final users. Automatic help, and automatic completion for all shells.\n  * Short: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.\n  * Start simple: The simplest example adds only 2 lines of code to your app: 1 import, 1 function call.\n  * Grow large: Grow in complexity as much as you want, create arbitrarily complex trees of commands and groups of subcommands, with options and arguments.\n  * Run scripts: Typer includes a typer command/program that you can use to run scripts, automatically converting them to CLIs, even if they don't use Typer internally.\n\n## FastAPI of CLIs\n\nTyper is FastAPI's little sibling, it's the FastAPI of CLIs.\n\n## Installation\n\n    \n    \n    $ pip install typer ---> 100% Successfully installed typer rich shellingham\n\n## Example\n\n### The absolute minimum\n\n  * Create a file main.py with:\n\n    \n    \n    def main(name: str): print(f\"Hello {name}\")\n\nThis script doesn't even use Typer internally. But you can use the typer\ncommand to run it as a CLI application.\n\n### Run it\n\nRun your application with the typer command:\n\n    \n    \n    // Run your application $ typer main.py run // You get a nice error, you are missing NAME Usage: typer [PATH_OR_MODULE] run [OPTIONS] NAME Try 'typer [PATH_OR_MODULE] run --help' for help. \u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 Missing argument 'NAME'. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f // You get a --help for free $ typer main.py run --help Usage: typer [PATH_OR_MODULE] run [OPTIONS] NAME Run the provided Typer app. \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 * name TEXT [default: None] [required] | \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f // Now pass the NAME argument $ typer main.py run Camila Hello Camila // It works! \ud83c\udf89\n\nThis is the simplest use case, not even using Typer internally, but it can\nalready be quite useful for simple scripts.\n\nNote: auto-completion works when you create a Python package and run it with\n--install-completion or when you use the typer command.\n\n## Use Typer in your code\n\nNow let's start using Typer in your own code, update main.py with:\n\n    \n    \n    import typer def main(name: str): print(f\"Hello {name}\") if __name__ == \"__main__\": typer.run(main)\n\nNow you could run it with Python directly:\n\n    \n    \n    // Run your application $ python main.py // You get a nice error, you are missing NAME Usage: main.py [OPTIONS] NAME Try 'main.py --help' for help. \u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 Missing argument 'NAME'. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f // You get a --help for free $ python main.py --help Usage: main.py [OPTIONS] NAME \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 * name TEXT [default: None] [required] | \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f // Now pass the NAME argument $ python main.py Camila Hello Camila // It works! \ud83c\udf89\n\nNote: you can also call this same script with the typer command, but you don't\nneed to.\n\n## Example upgrade\n\nThis was the simplest example possible.\n\nNow let's see one a bit more complex.\n\n### An example with two subcommands\n\nModify the file main.py.\n\nCreate a typer.Typer() app, and create two subcommands with their parameters.\n\n    \n    \n    import typer app = typer.Typer() @app.command() def hello(name: str): print(f\"Hello {name}\") @app.command() def goodbye(name: str, formal: bool = False): if formal: print(f\"Goodbye Ms. {name}. Have a good day.\") else: print(f\"Bye {name}!\") if __name__ == \"__main__\": app()\n\nAnd that will:\n\n  * Explicitly create a typer.Typer app.\n\n    * The previous typer.run actually creates one implicitly for you.\n  * Add two subcommands with @app.command().\n  * Execute the app() itself, as if it was a function (instead of typer.run).\n\n### Run the upgraded example\n\nCheck the new help:\n\n    \n    \n    $ python main.py --help Usage: main.py [OPTIONS] COMMAND [ARGS]... \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --install-completion Install completion \u2502 \u2502 for the current \u2502 \u2502 shell. \u2502 \u2502 --show-completion Show completion for \u2502 \u2502 the current shell, \u2502 \u2502 to copy it or \u2502 \u2502 customize the \u2502 \u2502 installation. \u2502 \u2502 --help Show this message \u2502 \u2502 and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 goodbye \u2502 \u2502 hello \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f // When you create a package you get \u2728 auto-completion \u2728 for free, installed with --install-completion // You have 2 subcommands (the 2 functions): goodbye and hello\n\nNow check the help for the hello command:\n\n    \n    \n    $ python main.py hello --help Usage: main.py hello [OPTIONS] NAME \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 * name TEXT [default: None] [required] \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --help Show this message and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nAnd now check the help for the goodbye command:\n\n    \n    \n    $ python main.py goodbye --help Usage: main.py goodbye [OPTIONS] NAME \u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 * name TEXT [default: None] [required] \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502 --formal --no-formal [default: no-formal] \u2502 \u2502 --help Show this message \u2502 \u2502 and exit. \u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f // Automatic --formal and --no-formal for the bool option \ud83c\udf89\n\nNow you can try out the new command line application:\n\n    \n    \n    // Use it with the hello command $ python main.py hello Camila Hello Camila // And with the goodbye command $ python main.py goodbye Camila Bye Camila! // And with --formal $ python main.py goodbye --formal Camila Goodbye Ms. Camila. Have a good day.\n\n### Recap\n\nIn summary, you declare once the types of parameters (CLI arguments and CLI\noptions) as function parameters.\n\nYou do that with standard modern Python types.\n\nYou don't have to learn a new syntax, the methods or classes of a specific\nlibrary, etc.\n\nJust standard Python.\n\nFor example, for an int:\n\n    \n    \n    total: int\n\nor for a bool flag:\n\n    \n    \n    force: bool\n\nAnd similarly for files, paths, enums (choices), etc. And there are tools to\ncreate groups of subcommands, add metadata, extra validation, etc.\n\nYou get: great editor support, including completion and type checks\neverywhere.\n\nYour users get: automatic --help, auto-completion in their terminal (Bash,\nZsh, Fish, PowerShell) when they install your package or when using the typer\ncommand.\n\nFor a more complete example including more features, see the Tutorial - User\nGuide.\n\n## Dependencies\n\nTyper stands on the shoulders of a giant. Its only internal required\ndependency is Click.\n\nBy default it also comes with extra standard dependencies:\n\n  * rich: to show nicely formatted errors automatically.\n  * shellingham: to automatically detect the current shell when installing completion.\n\n    * With shellingham you can just use --install-completion.\n    * Without shellingham, you have to pass the name of the shell to install completion for, e.g. --install-completion bash.\n\n### typer-slim\n\nIf you don't want the extra standard optional dependencies, install typer-slim\ninstead.\n\nWhen you install with:\n\n    \n    \n    pip install typer\n\n...it includes the same code and dependencies as:\n\n    \n    \n    pip install \"typer-slim[standard]\"\n\nThe standard extra dependencies are rich and shellingham.\n\nNote: The typer command is only included in the typer package.\n\n## License\n\nThis project is licensed under the terms of the MIT license.\n\n## About\n\nTyper, build great CLIs. Easy to code. Based on Python type hints.\n\ntyper.tiangolo.com/\n\n### Topics\n\npython shell cli terminal python3 click typer typehints\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Security policy\n\nSecurity policy\n\n### Citation\n\nActivity\n\n### Stars\n\n14.4k stars\n\n### Watchers\n\n74 watching\n\n### Forks\n\n618 forks\n\nReport repository\n\n## Releases 37\n\n0.12.3 Latest\n\nApr 9, 2024\n\n\\+ 36 releases\n\n## Sponsor this project\n\ntiangolo Sebasti\u00e1n Ram\u00edrez\n\nSponsor\n\nLearn more about GitHub Sponsors\n\n## Packages 0\n\nNo packages published\n\n## Used by 80.2k\n\n\\+ 80,204\n\n## Contributors 61\n\n\\+ 47 contributors\n\n## Languages\n\n  * Python 99.7%\n  * Shell 0.3%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
