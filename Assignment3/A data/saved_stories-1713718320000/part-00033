{"aid": "40103837", "title": "Deepseek locally running LLM, writing React", "url": "https://Kshitij-Banerjee.github.io/2024/04/14/exploring-code-llms/", "domain": "kshitij-banerjee.github.io", "votes": 1, "user": "kshitij_libra", "posted_at": "2024-04-21 07:30:02", "comments": 0, "source_title": "Exploring Code LLMs", "source_text": "Exploring Code LLMs | KiloBytes by KB\n\n# Exploring Code LLMs\n\nApril 14, 2024\n\n# Introduction#\n\nThe goal of this post is to deep-dive into LLM\u2019s that are specialised in code\ngeneration tasks, and see if we can use them to write code.\n\nNote: Unlike copilot, we\u2019ll focus on locally running LLM\u2019s. This should be\nappealing to any developers working in enterprises that have data privacy and\nsharing concerns, but still want to improve their developer productivity with\nlocally running models.\n\nTo test our understanding, we\u2019ll perform a few simple coding tasks, and\ncompare the various methods in achieving the desired results and also show the\nshortcomings.\n\n## The goal - A few simple coding task#\n\n  1. Test 1: Generate a higher-order-component / decorator that enables logging on a react component\n\n  2. Test 2: Write a test plan, and implement the test cases\n\n  3. Test 3: Parse an uploaded excel file in the browser.\n\n# How the rest of the post is structured#\n\nWe\u2019re going to cover some theory, explain how to setup a locally running LLM\nmodel, and then finally conclude with the test results.\n\nPart 1: Quick theory\n\nInstead of explaining the concepts in painful detail, I\u2019ll refer to papers and\nquote specific interesting points that provide a summary. For a detailed\nreading, refer to the papers and links I\u2019ve attached.\n\n  1. Instruction Fine-tuning: Why instruction fine-tuning leads to much smaller models that can perform quite well on specific tasks, compared to much larger models\n\n  2. Open source models available: A quick intro on mistral, and deepseek-coder and their comparison.\n\n  3. Model Quantization: How we can significantly improve model inference costs, by improving memory footprint via using less precision weights.\n\nIf you know all of the above, you may want to skip to Part 2\n\nPart 2: Local LLM Setup\n\nUsing Ollama and setting up my VSCode extension\n\nVSCode Extension available here: https://github.com/Kshitij-Banerjee/kb-\nollama-coder\n\nPart 3: Test Results\n\nShowing results on all 3 tasks outlines above.\n\n# [Part 1] Understanding Instruction Finetuning#\n\nBefore we venture into our evaluation of coding efficient LLMs. Let\u2019s quickly\ndiscuss what \u201cInstruction Fine-tuning\u201d really means.\n\nWe refer to this paper: Training language models to follow instructions with\nhuman feedback\n\n### Why instruction fine-tuning ?#\n\n> predicting the next token on a webpage from the internet\u2014is different from\n> the objective \u201cfollow the user\u2019s instructions helpfully and safely\u201d\n\n### Performance Implications#\n\n> In human evaluations on our prompt distribution, outputs from the 1.3B\n> parameter InstructGPT model are preferred to outputs from the 175B GPT-3,\n> despite having 100x fewer paramete\n\n### How they did it?#\n\n> Specifically, we use reinforcement learning from human feedback (RLHF;\n> Christiano et al., 2017; Stiennon et al., 2020) to fine-tune GPT-3 to follow\n> a broad class of written instructions. This technique uses human preferences\n> as a reward signal to fine-tune our models. We first hire a team of 40\n> contractors to label our data, based on their performance on a screening tes\n> We then collect a dataset of human-written demonstrations of the desired\n> output behavior on (mostly English) prompts submitted to the OpenAI API3 and\n> some labeler-written prompts, and use this to train our supervised learning\n> baselines. Next, we collect a dataset of human-labeled comparisons between\n> outputs from our models on a larger set of API prompts. We then train a\n> reward model (RM) on this dataset to predict which model output our labelers\n> would prefer. Finally, we use this RM as a reward function and fine-tune our\n> supervised learning baseline to maximize this reward using the PPO algorithm\n\n### Paper Results#\n\n> We call the resulting models InstructGPT. {:height 636, :width 1038}\n\n> On the TruthfulQA benchmark, InstructGPT generates truthful and informative\n> answers about twice as often as GPT-3 During RLHF fine-tuning, we observe\n> performance regressions compared to GPT-3 We can greatly reduce the\n> performance regressions on these datasets by mixing PPO updates with updates\n> that increase the log likelihood of the pretraining distribution (PPO-ptx),\n> without compromising labeler preference scores. InstructGPT still makes\n> simple mistakes. For example, InstructGPT can still fail to follow\n> instructions, make up facts, give long hedging answers to simple questions,\n> or fail to detect instructions with false premises$$\n\n### Some notes on RLHF#\n\n#### Step 1: Supervised Fine Tuning:#\n\n> We fine-tune GPT-3 on our labeler demonstrations using supervised learning.\n> We trained for 16 epochs, using a cosine learning rate decay, and residual\n> dropout of 0.2\n\n#### Step 2 : Reward model#\n\n> Starting from the SFT model with the final unembedding layer removed, we\n> trained a model to take in a prompt and response, and output a scalar reward\n> The underlying goal is to get a model or system that takes in a sequence of\n> text, and returns a scalar reward which should numerically represent the\n> human preference. These reward models are themselves pretty huge. 6B\n> parameters in Open AI case\n\n#### Step 3: Fine-tuning with RL using PPO#\n\n##### PPO : Proximal Policy Optimization\n\n> Given the prompt and response, it produces a reward determined by the reward\n> model and ends the episode. In addition, we add a per-token KL penalty from\n> the SFT model at each token to mitigate overoptimization of the reward\n> model. The value function is initialized from the RM. We call these models\n> \u201cPPO.\u201d\n\n###### From : https://huggingface.co/blog/rlhf#\n\n> \u201cLet\u2019s first formulate this fine-tuning task as a RL problem. First, the\n> policy is a language model that takes in a prompt and returns a sequence of\n> text (or just probability distributions over text). The action space of this\n> policy is all the tokens corresponding to the vocabulary of the language\n> model (often on the order of 50k tokens) and the observation space is the\n> distribution of possible input token sequences, which is also quite large\n> given previous uses of RL (the dimension is approximately the size of\n> vocabulary ^ length of the input token sequence). The reward function is a\n> combination of the preference model and a constraint on policy shift.\u201d\n> Concatenated with the original prompt, that text is passed to the preference\n> model, which returns a scalar notion of \u201cpreferability\u201d, r\u03b8. In addition,\n> per-token probability distributions from the RL policy are compared to the\n> ones from the initial model to compute a penalty on the difference between\n> them. In multiple papers from OpenAI, Anthropic, and DeepMind, this penalty\n> has been designed as a scaled version of the Kullback\u2013Leibler (KL)\n> divergence between these sequences of distributions over tokens, r_kl. The\n> KL divergence term penalizes the RL policy from moving substantially away\n> from the initial pretrained model with each training batch, which can be\n> useful to make sure the model outputs reasonably coherent text snippets.\n> Finally, the update rule is the parameter update from PPO that maximizes the\n> reward metrics in the current batch of data (PPO is on-policy, which means\n> the parameters are only updated with the current batch of prompt-generation\n> pairs). PPO is a trust region optimization algorithm that uses constraints\n> on the gradient to ensure the update step does not destabilize the learning\n> process.\n\n#### Helpful schematic showing the RL fine-tune process#\n\n### Final Thoughts#\n\nInstructGPT outputs are more appropriate in the context of a customer\nassistant, more often follow explicit constraints defined in the instruction\n(e.g. \u201cWrite your answer in 2 paragraphs or less.\u201d),\n\nAre less likely to fail to follow the correct instruction entirely,\n\nAre less likely to make up facts (\u2018hallucinate\u2019) less often in closed-domain\ntasks. These results suggest that InstructGPT models are more reliable and\neasier to control than GPT-3\n\n#### Comparison of GPT vs Instruct GPT#\n\n# [Part 1] Deep dive into Mistral Models#\n\n## Brief introduction to Mistral models, their architecture, and key features#\n\nWe refer to the paper: Mistral 7b\n\n### Objective:#\n\n> The search for balanced models delivering both high-level performance and\n> efficiency\n\n### Key Results:#\n\n> Mistral 7B outperforms the previous best 13B model (Llama 2, [ 26]) across\n> all tested benchmarks, and surpasses the best 34B model (LLaMa 34B, [ 25 ])\n> in mathematics and code generation. Furthermore, Mistral 7B approaches the\n> coding performance of Code-Llama 7B [ 20 ], without sacrificing performance\n> on non-code related benchmarks\n\n### Key Insights:#\n\n> Mistral 7B leverages grouped-query attention (GQA) [ 1 ], and sliding window\n> attention (SWA) [6, 3]. GQA significantly accelerates the inference speed,\n> and also reduces the memory requirement during decoding, allowing for higher\n> batch sizes hence higher throughput, a crucial factor for real-time\n> applications. In addition, SWA is designed to handle longer sequences more\n> effectively at a reduced computational cost\n\n### Sliding Window Attention#\n\n#### Why?#\n\n> The number of operations in vanilla attention is quadratic in the sequence\n> length, and the memory increases linearly with the number of tokens. At\n> inference time, this incurs higher latency and smaller throughput due to\n> reduced cache availability. To alleviate this issue, we use sliding window\n> attention: each token can attend to at most W tokens from the previous layer\n\n> Note that tokens outside the sliding window still influence next word\n> prediction. At each attention layer, information can move forward by W\n> tokens. Hence, after k attention layers, information can move forward by up\n> to k \u00d7 W tokens SWA exploits the stacked layers of a transformer to attend\n> information beyond the window size W . The hidden state in position i of the\n> layer k, hi, attends to all hidden states from the previous layer with\n> positions between i \u2212 W and i. Recursively, hi can access tokens from the\n> input layer at a distance of up to W \u00d7 k tokens, as illustrated in Figure 1.\n> At the last layer, using a window size of W = 4096, we have a theoretical\n> attention span of approximately131K tokens. In practice, for a sequence\n> length of 16K and W = 4096, changes made to FlashAttention [ 11 ] and\n> xFormers [18 ] yield a 2x speed improvement over a vanilla attention\n> baseline. This fixed attention span, means we can implement a rolling buffer\n> cache. After W size, the cache starts overwriting the from the beginning.\n> This also allows some pre-filling based optimizations.\n\n### Comparison with Llama#\n\n### Instruction Finetuning#\n\n> To evaluate the generalization capabilities of Mistral 7B, we fine-tuned it\n> on instruction datasets publicly available on the Hugging Face repository.\n> No proprietary data or training tricks were utilized: Mistral 7B \u2013 Instruct\n> model is a simple and preliminary demonstration that the base model can\n> easily be fine-tuned to achieve good performance.\n\n### System prompt#\n\n> We introduce a system prompt (see below) to guide the model to generate\n> answers within specified guardrails, similar to the work done with Llama 2.\n> The prompt: \u201cAlways assist with care, respect, and truth. Respond with\n> utmost utility yet securely. Avoid harmful, unethical, prejudiced, or\n> negative content. Ensure replies promote fairness and positivity.\u201d\n\n## How to select various model sizes, a Thumbrule from Mistral AI.#\n\nRefer to this article: Model Selection\n\nTL;DR\n\nSmall Tasks (Custom support, classification) => use Mistral Small\n\nMedium Tasks (Data Extraction, Summarizing Documents, Writing emails.. ) =>\nMistral medium\n\nComplex Tasks (Code Generation, RAG) => Mistral Large\n\nBenchmark on coding :\n\nModel| MMLU| hellaswag (10-shot)| winograde (5-shot)| arc challenge (25-shot)|\nTriviaQA (5-shot)| TruthfulQA  \n---|---|---|---|---|---|---  \nMistral 7B| 62.5%| 83.1%| 78.0%| 78.1%| 68.8%| 42.35%  \nMixtral 8x7B| 70.6%| 86.7%| 81.2%| 85.8%| 78.38%| 47.5%  \nMistral Small| 72.2%| 86.9%| 84.7%| 86.9%| 79.5%| 51.7%  \nMistral Medium| 75.3%| 88.0%| 88%| 89.9%| 81.1%| 47%  \nMistral Large| 81.2%| 89.2%| 86.7%| 94.0%| 82.7%| 50.6%  \n  \n# [Part 1] Deepseek Coder, an upgrade?#\n\n## Overview of Eval metrics#\n\nBefore we understand and compare deepseeks performance, here\u2019s a quick\noverview on how models are measured on code specific tasks.\n\nLeaderboard is provided here : https://evalplus.github.io/leaderboard.html\n\n### What is HumanEval ?#\n\nhttps://github.com/openai/human-eval\n\nHumanEval consists of 164 hand-written Python problems that are validated\nusing test cases to assess the code generated by a Code LLM in a zero-shot\nsetting,\n\n### What is MBPP ?#\n\nhttps://huggingface.co/datasets/mbpp\n\nWhile the MBPP benchmark includes 500 problems in a few-shot setting.\n\n### DS-1000: More practical programming tasks, compared to Human Eval#\n\nDS-1000 benchmark, as introduced in the work by Lai et al. (2023), offers a\ncomprehensive collection of 1,000 practical and realistic data science\nworkflows across seven different libraries\n\n## Deepseek coder#\n\n### Summary#\n\n> Each model in the series has been trained from scratch on 2 trillion tokens\n> sourced from 87 programming languages, ensuring a comprehensive\n> understanding of coding languages and syntax. Refer to the paper from\n> DeepSeek coder: DeepSeek Code\n\nUseful links:\n\nhttps://deepseekcoder.github.io/\n\nhttps://ollama.com/library/deepseek-coder/tags\n\n### How it\u2019s built#\n\n### Repository Context in Pre-training#\n\n> Besides, we attempt to organize the pretraining data at the repository level\n> to enhance the pre-trained model\u2019s understanding capability within the\n> context of cross-files within a repository They do this, by doing a\n> topological sort on the dependent files and appending them into the context\n> window of the LLM. More details below.\n\n> We find that it can significantly boost the capability of cross-file code\n> generation\n\n### Next token prediction + Fill-in-the middle (like BERT)#\n\n> In addition to employing the next token prediction loss during pre-training,\n> we have also incorporated the Fill-In-Middle (FIM) approach.\n\n### 16K context window (Mistral models have 4K sliding window attention)#\n\n> To meet the requirements of handling longer code inputs, we have extended\n> the context length to 16K. This adjustment allows our models to handle more\n> complex and extensive coding tasks, thereby increasing their versatility and\n> applicability in various coding scenarios\n\n### Data Preparation#\n\n### Filtering Rule:#\n\nTL;DR: Remove non-code related, or data heavy files\n\n  1. Remove files with avg line length > 100, OR, maximum line length > 1000 characters.\n\n  2. Remove files with fewer than 25% alphabetic characters\n\n  3. remove <?xml version files\n\n  4. JSON/YAML files - keep fields that have character counts ranging from 50 -> 5000 . This removes data-heavy files.\n\n### Dependency Parsing#\n\nInstead of simply passing in the current file, the dependent files within\nrepository are parsed.\n\nParse Dependency between files, then arrange files in order that ensures\ncontext of each file is before the code of the current file. By aligning files\nbased on dependencies, it accurately represents real coding practices and\nstructures.\n\n> This enhanced alignment not only makes our dataset more relevant but also\n> potentially increases the practicality and applicability of the model in\n> handling project-level code scenarios It\u2019s worth noting that we only\n> consider the invocation relationships between files and use regular\n> expressions to extract them, such as\"import\" in Python, \u201cusing\u201d in C#, and\n> \u201cinclude\u201d in C. A topological sort algorithm for doing this is provided in\n> the paper.\n\n> To incorporate file path information, a comment indicating the file\u2019s path\n> is added at the beginning of each file.\n\n### Model Architecture#\n\n> Each model is a decoder-only Transformer, incorporating Rotary Position\n> Embedding (RoPE) Notably, the DeepSeek 33B model integrates Grouped-Query-\n> Attention (GQA) as described by Su et al. (2023), with a group size of 8,\n> enhancing both training and inference efficiency. Additionally, we employ\n> FlashAttention v2 (Dao, 2023) to expedite the computation involved in the\n> attention mechanism we use AdamW (Loshchilov and Hutter, 2019) as the\n> optimizer with \u03b21 and \u03b22 values of 0.9 and 0.95. he learning rate at each\n> stage is scaled down to\u221a\ufe03 110 of the preceding stage\u2019s rate Context Length:\n\n> Theoretically, these modifications enable our model to process up to 64K\n> tokens in context. However, empirical observations suggest that the model\n> delivers its most reliable outputs within a 16K token range.\\\n\n### Instruction Tuning#\n\n> This data comprises helpful and impartial human instructions, structured by\n> the Alpaca Instruction format. To demarcate each dialogue turn, we employed\n> a unique delimiter token <|EOT|>\n\n### Performance#\n\nSurpasses GPT3.5, and within reach of GPT4\n\n> To evaluate the model\u2019s multilingual capabilities, we expanded the Python\n> problems of Humaneval Benchmark to seven additional commonly used\n> programming languages, namely C++, Java, PHP, TypeScript (TS), C#, Bash, and\n> JavaScript (JS) (Cassano et al.,2023). For both benchmarks, We adopted a\n> greedy search approach and re-implemented the baseline results using the\n> same script and environment for fair comparison.\n\n### Interesting Notes#\n\nChain of thought prompting\n\n> Our analysis indicates that the implementation of Chain-of-Thought (CoT)\n> prompting notably enhances the capabilities of DeepSeek-Coder-Instruct\n> models. This improvement becomes particularly evident in the more\n> challenging subsets of tasks. By adding the directive, \u201cYou need first to\n> write a step-by-step outline and then write the code.\u201d following the initial\n> prompt, we have observed enhancements in performance. This observation leads\n> us to believe that the process of first crafting detailed code descriptions\n> assists the model in more effectively understanding and addressing the\n> intricacies of logic and dependencies in coding tasks, particularly those of\n> higher complexity. Therefore, we strongly recommend employing CoT prompting\n> strategies when utilizing DeepSeek-Coder-Instruct models for complex coding\n> challenges.\n\n# [Part 1] Model Quantization#\n\nAlong with instruction fine-tuning, another neat technique that makes LLM\u2019s\nmore performant (in terms of memory and resources), is model quantization\n\nModel quantization enables one to reduce the memory footprint, and improve\ninference speed - with a tradeoff against the accuracy.\n\nIn short, Quantization is a process from moving the weights of the model, from\na high-information type like fp32 to a low-information but performant data-\ntype like int8\n\nReference: Huggingface guide on quantization -\nhttps://huggingface.co/docs/optimum/en/concept_guides/quantization\n\nThe two most common quantization cases are float32 -> float16 and float32 ->\nint8.\n\nSome schematics that explain the concept.\n\n{:height 362, :width 719}\n\n## Quantization to Int8#\n\nLet\u2019s consider a float x in [a, b], then we can write the following\nquantization scheme, also called the affine quantization scheme:\n\n    \n    \n    x = S * (x_q - Z)\n\nx_q is the quantized int8 value associated to x\n\nS is the scale, and is a positive float32\n\nZ is called the zero-point, it is the int8 value corresponding to the value 0\nin the float32 realm.\n\n    \n    \n    x_q = round(x/S + Z)\n    \n    \n    x_q = clip(round(x/S + Z), round(a/S + Z), round(b/S + Z))\n\nIn effect, this means that we clip the ends, and perform a scaling computation\nin the middle. The clip-off obviously will lose to accuracy of information,\nand so will the rounding.\n\n## Calibration#\n\nAn example, explaining calibration to optimise clipping vs rounding error\n\n{:height 187, :width 314}\n\nTo ensure that we have a good balance of clipping vs rounding errors, based on\nthe range [a, b] that we select. Some techniques are available\n\nUse per-channel granularity for weights and per-tensor for activations\n\nQuantize residual connections separately by replacing blocks\n\nIdentify sensitive layers and skip them from quantization\n\nhttps://huggingface.co/blog/4bit-transformers-bitsandbytes\n\nModel quantization + instruct = Quite Good results\n\nGood reference reading on the topic: https://deci.ai/quantization-and-\nquantization-aware-training\n\n# [Part 2] Setting Up the Environment: Ollama on M1#\n\n## Option 1: Hosting the model#\n\nTo host the models, I chose the ollama project: https://ollama.com/\n\nOllama is essentially, docker for LLM models and allows us to quickly run\nvarious LLM\u2019s and host them over standard completion APIs locally.\n\nThe website and documentation is pretty self-explanatory, so I wont go into\nthe details of setting it up.\n\n## Option 2: My machine is not strong enough, but I\u2019d like to experiment#\n\nIf your machine doesn\u2019t support these LLM\u2019s well (unless you have an M1 and\nabove, you\u2019re in this category), then there is the following alternative\nsolution I\u2019ve found.\n\nYou can rent machines relatively cheaply (~0.4$ / hour) for inference methods,\nusing vast.ai\n\nOnce you\u2019ve setup an account, added your billing methods, and have copied your\nAPI key from settings.\n\nClone the llm-deploy repo, and follow the instructions.\n\nThis repo figures out the cheapest available machine and hosts the ollama\nmodel as a docker image on it.\n\nFrom 1 and 2, you should now have a hosted LLM model running. Now we need\nVSCode to call into these models and produce code.\n\n## VSCode Extension Calling into the Model#\n\nGiven the above best practices on how to provide the model its context, and\nthe prompt engineering techniques that the authors suggested have positive\noutcomes on result. I created a VSCode plugin that implements these\ntechniques, and is able to interact with Ollama running locally.\n\nThe source code for this plugin is available here:\n\nhttps://github.com/Kshitij-Banerjee/kb-ollama-coder\n\nThis plugin achieves the following:-\n\nIt provides the LLM context on project/repository relevant files.\n\nThe plugin not only pulls the current file, but also loads all the currently\nopen files in Vscode into the LLM context.\n\nIt then trims the context to the last 16000/24000 characters (configurable)\n\nThis is an approximation, as deepseek coder enables 16K tokens, and\napproximate that each token is 1.5 tokens. In practice, I believe this can be\nmuch higher - so setting a higher value in the configuration should also work.\n\nIt adds a header prompt, based on the guidance from the paper. (Configurable)\nExample:-\n\n\u201cYou need to first write a step-by-step outline and then write the code. The\nfollowing is a complete {LANG} file named {FILE_NAME} in the project\n{PROJECT_NAME}. Anything NOT code is written as a CODE COMMENT.\u201d\n\n## Source code#\n\nThe source code for this plugin is available here:\n\nhttps://github.com/Kshitij-Banerjee/kb-ollama-coder\n\nFor completeness, there are other VSCode plugins that might also solve a\nsimilar problem - and I am yet to try them\n\nhttps://github.com/rjmacarthy/twinny\n\nhttps://github.com/smallcloudai/refact\n\nhttps://github.com/TabbyML/tabby\n\n# [Part 3] Testing DeepseekCoder#\n\n## General Observations#\n\nFor the most part, the 7b instruct model was quite useless and produces mostly\nerror and incomplete responses.\n\nThe 33b models can do quite a few things correct. However, its probably at the\nbrink of usefuleness\n\nThe model doesn\u2019t really understand writing test cases at all.\n\n## Test Setting#\n\nFor all the tests, I used a temperature setting of 0, as the guideline is to\nhave lower temperatures for tasks like coding, instead of creative generation\ntasks (I find coding a pretty creative activity though, but just going with\nthe guidelines for now)\n\n## Test 1: Mount/Unmount logging using hooks and HOC#\n\nIn this task, I wanted to test its ability to understand basic react concepts\nof useEffect and hooks / HOC\n\n### 1.1 Writing custom hook with mount/unmount logging#\n\nPROMPT\n\n    \n    \n    // A react custom hook that logs the component name on mount and unmount\n\nCODE OUTPUT:\n\n    \n    \n    import { useEffect } from 'react'; export default function withLoggingHook(componentName: string) { return () => { useEffect(() => { console.log(`${componentName} mounted`); return () => { console.log(`${componentName} unmounted`); }; }, []); }; }\n\n#### Verdict#\n\n  * \ud83d\udc4d - Works as expected\n\nThings to note:\n\n  * It doesn\u2019t know when to stop, and kindof keep spitting code at times - so I had to manually stop it\n\n### 1.2 Writing an HOC that augments the decorates the logging instead of\nusing the hook.#\n\nPROMPT:\n\n    \n    \n    // A react HOC, that wraps a given component and logs the component name // on mount and unmount.\n\nCODE OUTPUT (Attempt 1):\n\n    \n    \n    import React from 'react'; export function withLoggingHook<T extends {}>( WrappedComponent: React.ComponentType<T>, ) { return class WithLoggingHoc extends React.PureComponent<T, {}> { constructor(props: T) { super(props); console.log('Mounted ' + WrappedComponent.name); } componentWillUnmount() { console.log('Unmounted ' + WrappedComponent.name); } render() { return <WrappedComponent {...this.props} />; } }; } // ./src/generated/withLoggingHook.test.tsx import React from 'react'; import { render, fireEvent } from '@testing-library/react'; import { withLoggingHook } from './withLoggingHook'; const TestComponent = () => <div>Test Component</div>; describe('withLoggingHook', () => { beforeEach(() => { jest.spyOn(console, 'log'); }); afterEach(() => { jest.resetAllMocks(); }); it('should log when mounted and unmounted', () => { const ComponentWithLogging = withLoggingHook(TestComponent); const { rerender, unmount } = render(<ComponentWithLogging />); expect(console.log).toHaveBeenCalledWith('Mounted TestComponent'); rerender(<div></div>); expect(console.log).not.toHaveBeenLastCalledWith('Unmounted TestComponent'); unmount(); expect(console.log).toHaveBeenLastCalledWith('Unmounted TestComponent'); }); });\n\n#### Mistakes:#\n\n  * It used a constructor, instead of the componentDidMount method.\n  * added a fireEvent import, but didn\u2019t use it later.\n\n#### Retry:#\n\nI retried a couple more times. In the next attempt, it jumbled the output and\ngot things completely wrong.\n\nOn attempt 3, it did pretty well though CODE OUTPUT (Attempt 3):\n\n    \n    \n    // A react HOC, that wraps a given component and logs the component name // on mount and unmount. import React from 'react'; import { useEffect } from 'react'; import { ComponentType } from 'react'; export function withLoggingHook<TProps>( WrappedComponent: ComponentType<TProps>, componentName: string, ) { const WithLogging = (props: TProps) => { useEffect(() => { console.log(`${componentName} is mounted`); return () => { console.log(`${componentName} is unmounted`); }; }, []); return <WrappedComponent {...props} />; }; WithLogging.displayName = `WithLogging(${getDisplayName(WrappedComponent)})`; return WithLogging; } function getDisplayName<TProps>(WrappedComponent: ComponentType<TProps>) { return WrappedComponent.displayName || WrappedComponent.name || 'Component'; }\n\nI also noticed, that asking it specifically what I want, returned the right\noutput in the first attempt\n\nCODE OUTPUT (Attempt 4): asking explicitly what I want\n\n    \n    \n    // A react HOC, that wraps a given component and logs the component name // on mount and unmount. Use effects, instead of componentDidMount / unmount import React from 'react'; export function withLoggingHook<P extends object>( Component: React.ComponentType<P>, ) { return (props: P): JSX.Element => { console.log('[withLoggingHook]', Component.name, 'mounted'); React.useEffect(() => { return () => console.log('[withLoggingHook]', Component.name, 'un-mounted'); }, []); return <Component {...props} />; }; }\n\n### Verdict: \ud83d\udc4d#\n\n  * It\u2019s able to write basic hooks, but makes some errors with HOCs\n\n  * Sometimes, it automatically wrote the test case for the code it generated, which was a pleasant surprise!\n\n  * Retrying a few times leads to automatically producing a better answer.\n\n  * Component.name, is not defined, so that seems like a bug.\n\n#### Potential future experiments#\n\n  * Experimenting with n, top_p ,and top_k parameters, and enabling the LLM to try multiple completions\n\n  * Using a \u2018Verifier\u2019 agent, that checks the completion for compilation and validity and retries\n\n  * Giving it concrete examples, that it can follow.\n\n## Test 2: Implement test cases#\n\nNext, let\u2019s test its test case writing abilities\n\n### Test 2.1 - Writing tests for withLogginHook#\n\nIn the previous test, it wrote a withLoggingHook, let\u2019s use that as its\ncontext\n\nAs mentioned before, I used the vscode plugin I created previously, to give it\ncontext of the withLoggingHooks code\n\nPROMPT:\n\n    \n    \n    // [FILE-NAME] ./src/generated/withLoggingHook.tsx // A react HOC, that wraps a given component and logs the component name // on mount and unmount. Use effects, instead of componentDidMount / unmount ... code from withLogginHook<P> ... // [FILE-NAME] generatedApps/DoctorFinderApp/doctor-finder-app/src/generated/withLoggingHook.spec.tsx // Test cases for withLoggingHook\n\nCODE OUTPUT:\n\n    \n    \n    import { render } from '@testing-library/react'; import { withLoggingHook } from './withLoggingHook'; describe('withLoggingHook', () => { beforeEach(() => { // Mock console.log to prevent unwanted output during testing jest.spyOn(console, 'log').mockImplementation(() => {}); }); afterEach(() => { // Restore original console.log after each test (console.log as jest.Mock).mockRestore(); }); it('should log the component name on mount', () => { const TestComponent = withLoggingHook((): null => null); render(<TestComponent />); expect(console.log).toHaveBeenCalledWith( '[withLoggingHook]', 'TestComponent', 'mounted', ); }); it('should log the component name on unmount', () => { const TestComponent = withLoggingHook((): null => null); const { unmount } = render(<TestComponent />); unmount(); expect(console.log).toHaveBeenCalledWith( '[withLoggingHook]', 'TestComponent', 'un-mounted', ); }); });\n\n### Mistakes:#\n\n  * The test case in itself is fine, the issue with the withLoggingHook causes the tests to fail\n\n  * However, I did realise that multiple attempts on the same test case did not always lead to promising results.\n\n### Verdict: \ud83d\udc4e#\n\n  * For simple test cases, it works quite well, but just barely.\n  * Anything more complex, it kinda makes too many bugs to be productively useful.\n\n## Task 3: Excel Upload Component#\n\nLet\u2019s ask it to make a slightly more complicated component with some\nfunctionality\n\nPROMPT\n\n    \n    \n    // A react component, that allows the user to upload excel files. // The excel file has one sheet, and that sheet has two columns // Columns headers are foo, and bar, and both should have number values. // When the file is uploaded, it is parsed using XLSX. // The final parsed values of foo and bar, are given back as an array to the callback.\n\nCODE OUTPUT:\n\n    \n    \n    import React from 'react'; import XLSX from 'xlsx'; interface ExcelUploadComponentProps { onFileLoad: (data: { foo: number[]; bar: number[] }) => void; } const ExcelUploadComponent: React.FC<ExcelUploadComponentProps> = ({ onFileLoad, }: ExcelUploadComponentProps) => { const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => { if (!e.target.files || e.target.files.length === 0) return; const file = e.target.files[0]; const reader = new FileReader(); reader.onload = (event: ProgressEvent<FileReader>) => { if (!event.target || !event.target.result) return; const data = event.target.result as string; const workbook = XLSX.read(data, { type: 'binary' }); const sheetName = workbook.SheetNames[0]; const worksheet = workbook.Sheets[sheetName]; // Convert the excel data to JSON const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 }); // Extract the foo and bar values from the JSON data const fooValues = []; const barValues = []; for (let i = 0; i < jsonData.length; i++) { if (!jsonData[i]) continue; const row = jsonData[i]; fooValues.push(row[0]); barValues.push(row[1]); } onFileLoad({ foo: fooValues, bar: barValues }); }; reader.readAsBinaryString(file); }; return <input type=\"file\" accept=\".xls,.xlsx,.csv\" onChange={handleChange} />; }; export default ExcelUploadComponent;\n\n### Verdict: \ud83d\udc4d \ud83d\udc4d#\n\n  * Now that was pretty good. I have no idea how to use the xlsx utility, and have not looked at its documentation\n\n  * Even though, I had to correct some typos and some other minor edits - this gave me a component that does exactly what I needed.\n\n  * I\u2019d say this save me atleast 10-15 minutes of time googling for the api documentation and fumbling till I got it right.\n\n# Conclusion#\n\nAll in all, I think having locally running LLMs that can help us with code is\npossibly very near\n\nThese current models, while don\u2019t really get things correct always, do provide\na pretty handy tool and in situations where new territory / new apps are being\nmade, I think they can make significant progress.\n\nSomething to note, is that once I provide more longer contexts, the model\nseems to make a lot more errors. This is potentially only model specific, so\nfuture experimentation is needed here.\n\n# What\u2019s next#\n\nThere were quite a few things I didn\u2019t explore here. I will cover those in\nfuture posts.\n\n  * Here\u2019s a list of a few things I\u2019m going to experiment next\n\n  * Providing more examples of good code, instead of trying to explicitly mention every detail we want\n\n  * Comparing other models on similar exercises. Possibly making a benchmark test suite to compare them against.\n\n  * Trying multi-agent setups. I having another LLM that can correct the first ones mistakes, or enter into a dialogue where two minds reach a better outcome is totally possible.\n\n  * A hint on this, is that once it gets something wrong, and I add the mistake to the prompt - the next iteration of the output is usually much better.\n\n  * Machine-Learning\n  * AI\n\n\u00a9 2024 KiloBytes by KB Powered by Hugo & PaperMod\n\n", "frontpage": false}
