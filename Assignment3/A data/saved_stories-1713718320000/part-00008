{"aid": "40103518", "title": "When less is more: Understanding void elements in HTML", "url": "https://wizarddos.github.io/blog/programming/2024/04/19/why-some-elements-dont-have-ending-tag.html", "domain": "wizarddos.github.io", "votes": 2, "user": "thunderbong", "posted_at": "2024-04-21 06:13:03", "comments": 0, "source_title": "When less is more: Understanding void elements in HTML. - wizarddos Blog", "source_text": "When less is more: Understanding void elements in HTML. - wizarddos Blog\n\nHome Page Suprise me! Author Contact\n\n# When less is more: Understanding void elements in HTML.\n\nProgramming\n\nAs web-developers we code (or used to code) pretty frequently in HTML. Within\nHTML, you\u2019ve seen some elements, that have a closing tag\n\n    \n    \n    <div></div>\n\nBut some, don\u2019t\n\n    \n    \n    <br>\n\nor\n\n    \n    \n    <br />\n\nWhy is that? Let\u2019s jump right into it\n\n### Search in the best source - non-closing tags\n\nElements without closing tag are called void elements\n\nWe\u2019ll seek knowledge in HTML Specifications\n\n> Void elements only have a start tag; end tags must not be specified for void\n> elements.\n>\n> [...]\n>\n> Void elements can\u2019t have any contents (since there\u2019s no end tag, no content\n> can be put between the start tag and the end tag).\n\nThis answers your question: void elements don\u2019t have any content. Technically,\nI could end it here but\n\n### Should we add / in void elements\n\nWhich one should we choose\n\n    \n    \n    <br>\n\nOr\n\n    \n    \n    <br />\n\nThere have been numerous discussions online about it - some people add slash,\nsome don\u2019t\n\nWhat\u2019s in the docs again?\n\n> [...] there may be a single U+002F SOLIDUS character (/), which on foreign\n> elements marks the start tag as self-closing. On void elements, it does not\n> mark the start tag as self-closing but instead is unnecessary and has no\n> effect of any kind. For such void elements, it should be used only with\n> caution \u2014 especially since, if directly preceded by an unquoted attribute\n> value, it becomes part of the attribute value rather than being discarded by\n> the parser.\n\n(for context: foreign elements are ones from SVG or MathML namespaces)\n\nAccording to specs: trialing slashes are fully optional in void tags and have\nno effect, but might cause issues later on.\n\nWhat issues? As said, if you write HTML properties without quotes, then parser\nmight interpret that slash as a part of an attribute rather than end of a tag.\n\nWhy is it even there in the first place? For backward compatibility\n\nCurrently used HTML version is HTML5 - but your documents can also be rendered\nin other modes\n\nThere used to be a standard called XHTML - a mashup of HTML and XML\n\nIn there, these slashes were obligatory. If slashes went missing, XHTML parser\ncould not distinguish whether such tag closes or is it missing a closing one.\n\n## Final verdict\n\nThis might be disappointing but... use whatever you want to!\n\nIf you write HTML properties without quotes, then omiting that slash will be\nsafer choice\n\nYet, for some people, not writing it can save time Others prefer the trailing\nslash, as it makes the code more readable. It clearly marks the end of the\ntag.\n\nPersonally, I\u2019m a fan of a second option\n\n### Conclusion\n\nThanks for reading, I hope you\u2019ve learned something new. I wrote this article\npretty quickly, but had to find a lot of data\n\nAs a little fun fact, I can tell you that <p> tag used to be void, as it\nindicaited space between the paragraphs - not paragraphs themselves.\n\nSubscribe to my newsletter in the navbar, check out other articles too such as\n\n  * Infinite scroll in Ajax and JS with Fetch\n  * My favourite VSCode extenstions\n  * PHP course\n\nAnd see you next time\n\nPublished: 19 Apr 2024 Author: wizarddos\n\nCopyright \u00a9 wizarddos 2024 This website uses cookies\n\n", "frontpage": false}
