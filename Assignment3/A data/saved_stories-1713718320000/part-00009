{"aid": "40103521", "title": "Hyphen is used by 36000 people and has 69 stars on GitHub", "url": "https://github.com/o0101/-", "domain": "github.com/o0101", "votes": 1, "user": "keepamovin", "posted_at": "2024-04-21 06:14:44", "comments": 5, "source_title": "GitHub - o0101/-: Hyphen - An elegant custom element base class", "source_text": "GitHub - o0101/-: Hyphen - An elegant custom element base class\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\no0101 / - Public\n\n  * Notifications\n  * Fork 3\n  * Star 70\n\nHyphen - An elegant custom element base class\n\no0101.github.io/-/\n\n### License\n\nApache-2.0 license\n\n70 stars 3 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# o0101/-\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n2 Branches\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\no0101Merge pull request #17 from o0101/o0101-patch-1Feb 4, 20247033623 \u00b7 Feb\n4, 2024Feb 4, 2024\n\n## History\n\n86 Commits  \n  \n### bug-examples\n\n|\n\n### bug-examples\n\n| Added clarifying test repro case for Safari bug| Dec 5, 2023  \n  \n### examples\n\n|\n\n### examples\n\n| Big changes| Nov 26, 2023  \n  \n### posts\n\n|\n\n### posts\n\n| Update classy-magic.md| Nov 26, 2023  \n  \n### -.js\n\n|\n\n### -.js\n\n| Big changes| Nov 26, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Initial commit| Nov 5, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Nov 5, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md| Feb 4, 2024  \n  \n### blank.css\n\n|\n\n### blank.css\n\n| Precached import to fix network delay FOUC. Closes #4| Nov 8, 2023  \n  \n### index.html\n\n|\n\n### index.html\n\n| Added clarifying test repro case for Safari bug| Dec 5, 2023  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| Try todo| Nov 23, 2023  \n  \n### package.json\n\n|\n\n### package.json\n\n| Bump version re #5| Nov 26, 2023  \n  \n### theme.css\n\n|\n\n### theme.css\n\n| Precached import to fix network delay FOUC. Closes #4| Nov 8, 2023  \n  \n## Repository files navigation\n\n# -\n\nHyphen - A custom element base class for great developer ergonomics.\n\nOur overarching goal: using minimal library code and minimal application code,\ndeliver the maximal useful surface area.\n\n## Classic Code Example: TodoMVC\n\nHere you can review a case study of creating TodoMVC in Hyphen using ChatGPT.\n\nAlso, here's the single file code, and its live example.\n\n## What great developer ergonomics?\n\n  * <custom-elements> inherit from $ superclass\n  * `${template} literals`\n  * <void-tags />\n  * inline=events\n  * Minimal keystrokes\n  * Basic Store super class\n  * Small class size\n\n    * ~ 539 lines of code\n    * ~ 5146 bytes compressed\n\nIt's important to remember that what constitutes great ergonomics, like great\nsports car seats, varies for individuals. While there may be some things we\ncan all agree on, other things may be harder to. It's good to keep this\ndiversity in mind when evaluating any project.\n\n## Table of Contents\n\n  * What Great Developer Ergonomics?\n  * Introduction and Code Example\n\n    * Non-technical Introduction\n    * Developer Overview\n    * Example Code\n  * Our Manifesto\n  * Why Use Hyphen and How to Use It?\n\n    * How Can I Learn Even More\n  * Inspirations\n  * Hot Tips\n  * Documentation\n\n    * Getting Started with Hyphen\n    * API Overview\n    * Advanced Usage\n    * Examples\n    * Contribution\n  * Bonus Section Just for Creatives\n\n    * I'd Like to Contribute! What Can I Do?\n    * Setting Up the Dev Environment\n    * General Contribution Guidelines\n  * The Upside-Down aka Bonus Section Just for Meanies\n\n    * I'm Preparing to Comment About This and Want to Be Mean, What's the Bad News?\n    * I'm Unsatisfied That the Above Is Sufficiently Negative, What Other Bad News Can You Give Me?\n  * Bonus Section for Acolytes and True Believers\n\n    * I Have Decided to Pledge My Life to Your Cause and Throw Everything I've Got on Your Bandwagon. How Can I Best Organize?\n\n## Introduction and Code Example\n\n### Non-technical Introduction\n\nHyphen is a client-side JavaScript file that helps web developers easily make\nand manage custom parts of a website, like buttons or menus, without dealing\nwith complicated code.\n\nIt makes the usual tricky parts of web development simpler so that developers\ncan build websites faster and with less hassle.\n\n### Developer Overview\n\nHyphen simplifies the creation of custom Web Components, which are a standard\nfor reusable user interface elements for web pages.\n\nIt does this by providing developers with a base class that streamlines the\nintegration of state management and templating, thus addressing common\nchallenges such as verbose syntax and complex lifecycle handling typically\nassociated with native custom elements.\n\nHyphen is also very short, making it easy to build on as a custom element base\nfor your applications.\n\n### Example Code\n\nIn this example, we create a MyGreeting element that uses Hyphen's base class\nto manage its state and respond to user interactions.\n\nThis element displays a greeting message that changes when the button is\nclicked, demonstrating the dynamic capabilities of Hyphen with minimal coding\nrequired.\n\n    \n    \n    <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Hyphen Example</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <script src=\"-.js\"></script> </head> <body> <!-- Define your custom element with minimal boilerplate --> <script> class MyGreeting extends $ { // Specify observed attributes for automatic property sync static get attrs() { return ['name']; } // Define initial state if needed constructor() { super({ greeting: 'Hello' }); } // Respond to user interaction changeGreeting() { this.state = { greeting: this.state.greeting == 'Hi' ? 'Hello' : 'Hi' }; } // Declare the template using state directly template() { return ` <span>${greeting}, ${host.name}!</span> <button onclick=\"changeGreeting\">Change Greeting</button> `; } } // Register the custom element with the browser customElements.define('my-greeting', MyGreeting); </script> <!-- Use the custom element in HTML, set attributes as properties, separate to internal state --> <my-greeting name=\"Cris\"></my-greeting> <script> // The element is already rendered once it's connected to the DOM const greetingElement = document.querySelector('my-greeting'); // Attributes can be updated programmatically if necessary setTimeout(() => greetingElement.name = 'Awesome Developer', 5000); </script> </body> </html>\n\nWith Hyphen, you get a streamlined workflow for your custom elements where the\nusual complexities are handled for you.\n\n## Our manifesto\n\nWe want to build something that works for you. Or, rather, some of you; but\nnot all of you.\n\nWe are very comfortable with that tradeoff, and you should be too.\n\nHowever, if you care enough to be passionate, then please use or contribute if\nyou like Hyphen, or please use or make something else if you don't.\n\nEither way, please be respectful and considerate to anyone you're dealing\nwith.\n\n## Why use Hyphen and how to use Hyphen?\n\nThe aim is to minify the keystrokes required to use custom elements, while\nproviding other great ergonomics, too.\n\nYou template with state properties directly, no state. prefix required.\n\nYou use JavaScript template literal syntax, not another DSL.\n\nFor events you use inline event handler syntax, with some syntactic sugar to\nlet you use instance method names directly in the attribute.\n\nFinally, we support void custom elements in templated values, and\nautomatically expand these to their correct final form with end tags.\n\n## How can I learn even more\n\nStudy the examples in index.html to fully learn the current system. Ask\nquestions in issues if you need more help!\n\n## Inspirations aka I'd like to thank the Academy...\n\nHyphen is inspired by:\n\n  * React\n  * HTMX\n  * LitHTML\n  * Svelte\n  * Angular\n  * Brutal.js\n  * Good.html\n  * VanillaView\n  * Decades of coding experience and knowing what we want\n\n## Hot Tips\n\nDive into these essential tidbits to make the most of Hyphen's features:\n\n#### State Merging\n\nHyphen uses a merging strategy for state updates:\n\n    \n    \n    this.state = { newProperty: 'newValue' };\n\nWhen you update this.state, Hyphen combines your changes with the existing\nstate. This merge behavior ensures that only the properties you specify are\nupdated, while all others remain untouched.\n\n#### Asynchronous Properties\n\nProperties and attributes are linked, but they update asynchronously to\nprevent infinite loops:\n\n    \n    \n    el.setAttribute('my-attr', 'value'); // el.myAttr will update on the next tick el.myAttr = 'new value'; // the attribute updates immediately\n\nTreat these updates as asynchronous to avoid timing issues. Setting the\nattribute schedules the property update for the next tick, whereas updating\nthe property reflects immediately on the attribute.\n\n#### Distinguishing State from Properties\n\nState is internal and should be managed differently from attributes or\nproperties:\n\n    \n    \n    // To update the state and trigger a re-render this.state = { myKey: 'myNewValue' };\n\nModifying this.state directly won't cause a re-render. To update, you must set\nthis.state to a new object, which is typically done with this.state = {\n...myStateUpdates }.\n\n#### Content Security Policy (CSP)\n\nHyphen relies on eval and inline event handlers, which require certain CSP\nexceptions:\n\n    \n    \n    <!-- Add this to your HTML header to allow inline scripts and eval --> <meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'unsafe-inline' 'unsafe-eval';\">\n\nWe understand these requirements might not fit all security policies, but they\nare currently essential for Hyphen's operation.\n\nThese tips are geared to help you swiftly navigate the intricacies of Hyphen\nand craft impressive custom elements with both finesse and ease.\n\n## Documentation\n\nWelcome to the Hyphen documentation! This section will guide you through the\nessentials of utilizing the Hyphen base class to create dynamic, state-managed\ncustom elements for your web applications.\n\n### Getting Started with Hyphen\n\nHyphen is designed to be intuitive and easy to use, helping developers create\ncustom elements with ease. Let's dive into how you can start integrating\nHyphen into your projects.\n\n#### Installation\n\nFirst, ensure you have the -.js file included in your project.\n\n    \n    \n    <script src=\"path_to_your_assets/-.js\"></script>\n\n#### Creating a New Custom Element\n\nTo create a new custom element with Hyphen, extend the base class $ and define\nyour element as shown below:\n\n    \n    \n    class YourCustomElement extends $ { // Optional: Define observed attributes for property synchronization static get attrs() { return ['your', 'observed', 'attributes']; } // Optional: Define a unique name for your element (must be lowercase, and contain a hyphen '-') static get elName() { return 'your-custom-element'; } // Optional: Define initial state constructor(initialState) { super(initialState); } // Define your element's HTML template as a string template() { return ` <div>Your custom element's template goes here</div> `; } }\n\n### API Overview\n\nElement names automatically take the snake-case form of the TitleCased class\nnames you define them with. So:\n\n    \n    \n    class BigBuddha extends $ //is used as <big-buddha></big-buddha>\n\n#### <class>.new()\n\nCreates and returns a new instance of the custom element. This is a shortcut\nto avoid calling document.createElement() directly.\n\n    \n    \n    const instance = YourCustomElement.new();\n\n#### <instance>.template()\n\nOverride this method to define the inner HTML template for your custom\nelement. It should return a string literal.\n\n    \n    \n    template() { return `<div>Template content. State property: ${myContent}. Attribute property: ${host.myAttr}</div>`; }\n\nProperties of this.state are used unprefixed in the template. State properties\nused in the template but undefined will raise an error.\n\nAttributes (and their corresponding properties) are prefixed with host. in the\ntemplate.\n\n#### <instance>.render()\n\nThis method processes the template and updates the shadow DOM with the new\ncontent. It's automatically called when the element is connected to the DOM or\nwhen its state changes.\n\n#### link()\n\nRegisters the custom element with the browser, although normally this\nshouldn't be necessary as we automatically detect subclassing and call this at\nthe time your custom element class is declared, as described here\n\n    \n    \n    YourCustomElement.link(); `` #### State Management The state of your custom element can be managed via the `state` getter and setter. ```javascript // To set state this.state = { key: 'value' }; // To access state console.log(this.state.key);\n\n### Advanced Usage\n\n#### Attributes and Properties\n\nAttributes defined in attrs() will be observed and synchronized with the\ncorresponding properties.\n\n    \n    \n    // Define observed attributes static get attrs() { return ['data-example']; } // Access an attribute as a property console.log(this.dataExample);\n\n#### Dynamic Template Processing\n\nHyphen supports inline event handlers and dynamically expands void custom\nelements within templates.\n\n    \n    \n    handleClick(clickEvent) { console.log('Somebody clicked something', clickEvent); } template() { return ` <my-button onclick=\"handleClick\">Click me!</my-button> <input-el /> <!-- will expand to <input-el></input-el> --> `; }\n\nInline event handlers are defined on your custom element class, and referenced\nwith a shorthand syntax that can omit everything except the name.\nonclick=handleClick is preprocessed to\nthis.getRootNode().host.handleClick(event);\n\nonclick=handleClick(event) is also valid, as is wrapping the attributes value\nin ' or \" quotes.\n\n### Examples\n\nRefer to the provided example snippets or the index.html to see Hyphen in\naction. Analyzing and experimenting with these examples will solidify your\nunderstanding of how to leverage Hyphen effectively in your projects.\n\n### Contribution\n\nPassionate about Hyphen? Contributions are welcome! Whether it's adding\nexamples, reporting bugs, or proposing features\u2014your input helps Hyphen grow.\n\n#### Development Setup\n\n  1. Fork and clone the repository.\n\n  2. Navigate to the cloned directory and install dependencies:\n    \n        npm install\n\n  3. To run tests:\n    \n        npm test\n\n### Conclusion\n\nHyphen empowers developers to create custom elements effortlessly, focusing on\nwhat matters most: bringing your creative visions to life. Happy coding!\n\n## Bonus Section Just for Creatives\n\n## I'd like to contribute! What can I do?\n\nPlease consider adding some more examples to index.html or examples/. Examples\nare essential for learning about Hyphen, filling bugs and adding features.\n\nAnother way to contribute is to browse current issues.\n\n### Setting up the dev environment\n\n  1. Clone the repo.\n  2. Run npm i\n  3. Run npm test\n\nNote: npm test may fail if you don't have localhost certificates. You could\nmake these with letsencrypt, but you can easily just run server -p 8080 to run\na dev server on 8080.\n\n### General Contribution Guidelines\n\nIn general, empathize with others and remember this is a meritocracy of ideas,\nyet with clear goals.\n\nWe may reject your ideas because they don't align with our aesthetics and\nergonomics, but that doesn't mean your ideas are \"bad\".\n\nIf your ideas are good and support our goals, we gladly include them!\n\n## About\n\nHyphen - An elegant custom element base class\n\no0101.github.io/-/\n\n### Resources\n\nReadme\n\n### License\n\nApache-2.0 license\n\nActivity\n\n### Stars\n\n70 stars\n\n### Watchers\n\n2 watching\n\n### Forks\n\n3 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Used by 36.2k\n\n\\+ 36,226\n\n## Contributors 2\n\n  * o0101 Cris\n  * RodrigoHahn\n\n## Languages\n\n  * JavaScript 63.9%\n  * HTML 30.9%\n  * CSS 5.2%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
