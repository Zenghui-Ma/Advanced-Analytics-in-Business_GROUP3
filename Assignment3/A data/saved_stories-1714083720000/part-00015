{"aid": "40158558", "title": "Package management on macOS with Nix-Darwin", "url": "https://davi.sh/blog/2024/01/nix-darwin/", "domain": "davi.sh", "votes": 44, "user": "photonbucket", "posted_at": "2024-04-25 15:15:31", "comments": 15, "source_title": "Package management on macOS with nix-darwin | Davis Haupt", "source_text": "Package management on macOS with nix-darwin | Davis Haupt\n\n# Package management on macOS with nix-darwin\n\nJan 29 2024\n\n6 minutes\n\nI think Nix is really cool. Nix the package manager and functional\nconfiguration language is most often associated with NixOS the Linux distro,\nbut nix-darwin makes it almost as easy to declaratively configure macOS as it\nis to configure NixOS installations. Even if you\u2019ll still relying on Homebrew\nfor package management and never touch nixpkgs, I\u2019d say that Nix with nix-\ndarwin provides the best way to manage packages and system configuration on\nmacOS.\n\nUnfortunately, the resources for getting started and integrating different\nparts of the Nix ecosystem are not particularly approachable for beginners.\nWhen I started out I would often use GitHub\u2019s code search to trawl through\nother people\u2019s configs and try different snippets until I found what actually\nworked. Inspired by Arne Bahlo\u2019s Emacs from Scratch series, I wanted to create\na guide to help folks get started with Nix on macOS from scratch, step by\nstep.\n\nThroughout this series we\u2019ll create a declarative system configuration with\nNix where you can manage anything from your shell aliases to what VSCode\nextensions you have installed to running daemons with launchd. We\u2019ll build up\nto this incrementally: by the end of this post, you\u2019ll have Nix installed on\nyour system and be able to declaratively install system-level packages from\neither Nixpkgs or Homebrew.\n\n## Installing Nix\n\nI recommend using the Determinate Systems Nix installer. They have a command-\nline utility and also recently came out with a graphical installer if you\u2019d\nprefer that.\n\n## Setting up nix-darwin\n\nnix-darwin is a Nix library that makes it easy to configure macOS through Nix.\n\nNix is a programming language, and Nix configurations are programs. All\nprograms need an entrypoint, we\u2019ll be using a flakeSince this series will\nfocus on system configuration rather than development environments, we\u2019ll only\nbe creating this one flake and won\u2019t cover flakes in-depth. If want to read\nmore about flakes, feel free to check out Julia Evans\u2019s blog post on flakes\nand the Zero to Nix wiki page. to provide the entrypoint to our configuration.\n\nBelow is our minimal flake that calls nix-darwin. Make sure to replace $USER\nwith your username and $HOSTNAME with your system\u2019s hostname.\n\nYou can place this flake in any directory you\u2019d like. For the purposes of this\nseries, we\u2019ll assume that the flake lives at ~/.config/nix/flake.nix.\n\n    \n    \n    # ~/.config/nix/flake.nix { description = \"My system configuration\"; inputs = { nixpkgs.url = \"github:NixOS/nixpkgs/nixpkgs-unstable\"; nix-darwin = { url = \"github:LnL7/nix-darwin\"; inputs.nixpkgs.follows = \"nixpkgs\"; }; }; outputs = inputs@{ self, nix-darwin, nixpkgs }: let configuration = {pkgs, ... }: { services.nix-daemon.enable = true; # Necessary for using flakes on this system. nix.settings.experimental-features = \"nix-command flakes\"; system.configurationRevision = self.rev or self.dirtyRev or null; # Used for backwards compatibility. please read the changelog # before changing: `darwin-rebuild changelog`. system.stateVersion = 4; # The platform the configuration will be used on. # If you're on an Intel system, replace with \"x86_64-darwin\" nixpkgs.hostPlatform = \"aarch64-darwin\"; # Declare the user that will be running `nix-darwin`. users.users.$USER = { name = \"$USER\"; home = \"/Users/$USER\"; }; # Create /etc/zshrc that loads the nix-darwin environment. programs.zsh.enable = true; environment.systemPackages = [ ]; }; in { darwinConfigurations.\"$HOSTNAME\" = nix-darwin.lib.darwinSystem { modules = [ configuration ]; }; }; }\n\n## Activating our nix-darwin config\n\nOne of the stranger footguns when using Nix flakes is that all files\nreferenced by a flake must be checked into source control. This means that\nyou\u2019ll need to have git installed before we set up our Nix environmentIf\nyou\u2019re on a brand new machine, the first time you run git in the terminal you\nshould be prompted to install Xcode Command Line Tools, which includes git..\nFiles just need to be staged to be accessible, not committed, so git add is\nsufficient until you want to back up your config to a remote repository.\n\n    \n    \n    $ cd ~/.config/nix $ git init $ git add flake.nix\n\nOnce all this is set up, we can run nix-darwin to activate our configuration:\n\n    \n    \n    $ nix run nix-darwin --extra-experimental-features nix-command --extra-experimental-features flakes -- switch --flake ~/.config/nix\n\nnix-darwin requires sudo, so you\u2019ll be prompted for your password. Nix may\nerror out if there are files that already exist at paths that it\u2019s trying to\nreplace. Feel free to either rm these or mv them to a backup location, and\nthen re-run the line above.\n\nOnce the command succeeds, open up a new terminal window to pick up the new\nzsh environment and confirm that darwin-rebuild is installed on your path:\n\n    \n    \n    $ darwin-rebuild --help darwin-rebuild [--help] {edit | switch | activate | build | check | changelog} [--list-generations] [{--profile-name | -p} name] [--rollback] [{--switch-generation | -G} generation] [--verbose...] [-v...] [-Q] [{--max-jobs | -j} number] [--cores number] [--dry-run] [--keep-going] [-k] [--keep-failed] [-K] [--fallback] [--show-trace] [-I path] [--option name value] [--arg name value] [--argstr name value] [--flake flake] [--update-input input flake] [--impure] [--recreate-lock-file] [--no-update-lock-file] [--refresh] ...\n\nCongrats on setting up nix-darwin! Our configuration is active, but it doesn\u2019t\ndo anything useful yet. Let\u2019s change that.\n\n## Installing your first Nix package\n\nIt\u2019s time to install our first package from the nixpkgs repository. Update the\nlist of systemPackages declared in flake.nix:\n\n    \n    \n    environment.systemPackages = [ pkgs.neofetch pkgs.vim ];\n\nHere, we\u2019re setting the attribute environment.systemPackages to a list. It\u2019s\nimportant to point out that lists in Nix are space-separated rather than\ncomma-separated like most other languages.\n\npkgs refers to nixpkgs, the standard repository for finding packages to be\ninstalled with NixWhile it\u2019s not necessary to fully understand this right now,\nthe configuration value that we\u2019re defining is a Nix module. The nix-\ndarwin.lib.darwinSystem function that\u2019s called at the bottom of the file is\nresponsible for passing nixpkgs through to configuration with the name pkgs.\nWe\u2019ll dive deeper into Nix modules in a later post.. Both neofetch and vim are\nderivations within nixpkgs.\n\nTo rebuild our Nix config, we don\u2019t have to use the super long nix run command\nfrom above anymore since nix-darwin added the darwin-rebuild command to our\nPATH. From now on, we just need to run:\n\n    \n    \n    $ darwin-rebuild switch --flake ~/.config/nix\n\nOnce this runs successfully, we now have a new command in our PATH:\n\n    \n    \n    $ neofetch -L c.' ,xNMM. .OMMMMo lMM\" .;loddo:. .olloddol;. cKMMMMMMMMMMNWMMMMMMMMMM0: .KMMMMMMMMMMMMMMMMMMMMMMMWd. XMMMMMMMMMMMMMMMMMMMMMMMX. ;MMMMMMMMMMMMMMMMMMMMMMMM: :MMMMMMMMMMMMMMMMMMMMMMMM: .MMMMMMMMMMMMMMMMMMMMMMMMX. kMMMMMMMMMMMMMMMMMMMMMMMMWd. 'XMMMMMMMMMMMMMMMMMMMMMMMMMMk 'XMMMMMMMMMMMMMMMMMMMMMMMMK. kMMMMMMMMMMMMMMMMMMMMMMd ;KMMMMMMMWXXWMMMMMMMk. \"cooc*\" \"*coo'\"\n\nNow we\u2019re really cooking!\n\n## Searching Nixpkgs\n\nCheck out nixpkgs search to find other packages you might want to install.\n\n## Installing packages from Homebrew\n\nNixpkgs is expansive, but some programs are still only available from\nHomebrew. nix-darwin provides what I think is the best interface for Homebrew\nformulae, casks, and even Mac App Store appsWhile we won\u2019t be installing any\nApp Store apps in this post, you can check out the description in the nix-\ndarwin documentation for more information.. Let\u2019s add this right under\nenvironment.systemPackages:\n\n    \n    \n    homebrew = { enable = true; # onActivation.cleanup = \"uninstall\"; taps = []; brews = [ \"cowsay\" ]; casks = []; };\n\nRunning darwin-rebuild switch --flake ~/.config/nix again will install the\nHomebrew formula specified in the brews list. Try it out:\n\n    \n    \n    $ cowsay \"homebrew and nix can be best friends\" ______________________________________ < homebrew and nix can be best friends > -------------------------------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || ||\n\nIf you\u2019re on a Mac where you\u2019ve been using Homebrew for a while, you can run\nbrew list and brew list --cask to list your installed formulae and casks. Once\nyou\u2019ve added every package you want to carry over to the corresponding lists\nin your Nix config, uncomment onActivation.cleanup = \"uninstall\". Your\nhomebrew config in nix-darwin is now declarative: only the packages specified\nin your flake.nix will be installed, and if you ever remove a package from the\nlists here it will be uninstalled the next time you reload with darwin-rebuild\nswitch.\n\n## Nixpkgs vs Homebrew\n\nWhile nix-darwin makes it easy to install packages with Homebrew, I\u2019d\nrecommend trying to find the corresponding derivations within Nixpkgs when\npossible rather than relying solely on Homebrew formulae. As the series goes\non we\u2019ll see how native Nix derivations are easier work with in Nix.\n\n## Additional configuration\n\nYou\u2019ve probably gotten tired of entering your password everytime you reload\nyour config. Luckily, there\u2019s a one-liner to enable Touch ID for sudo, which\nyou can put at the end of your configuration:\n\n    \n    \n    # ... let configuration = {pkgs, ... }: { # ... security.pam.enableSudoTouchIdAuth = true; }; in # ...\n\nAll of nix-darwin\u2019s configuration options are worth exploring \u2014 we\u2019ll go more\nin-depth into some of them in future installments of this series, but in case\nyou\u2019re curious, the you can explore all the configuration options and start\nmaking your config your own!\n\nIf you\u2019d like to see the full file that we\u2019ve built up over the course of this\npost, you can find it here.\n\nNow that we have a handle on our system configuration, in the next post we\u2019ll\nset up home-manager and use it manage dotfiles and other program\nconfiguration.\n\nUntil next time!\n\nnix nix-on-mac\n\nPrevious Post What I Like About Nix Next Post Managing dotfiles on macOS with\nNix\n\n", "frontpage": true}
