{"aid": "40158745", "title": "Create a Debian VM on macOS Apple Silicon with QEMU", "url": "https://sleepymug.me/fragments/guide_mac_qemu.html", "domain": "sleepymug.me", "votes": 1, "user": "todsacerdoti", "posted_at": "2024-04-25 15:30:50", "comments": 0, "source_title": null, "source_text": "## Create a Debian VM on MacOS Apple Silicon with Qemu\n\nCouple of things before everything. Firstly, make sure your machine has an ARM\nCPU. Secondly, open a terminal application such as Terminal.app or iTerm2\n(boooo!), this process isn't tested with VSCode's terminal. Lastly, go into a\ndirectory where you would like to store the vm disk. Let's get started.\n\n### Downloading stuff\n\nGet qemu. For example if you use homebrew\n\n    \n    \n    $ brew install qemu\n\nCheck qemu is installed\n\n    \n    \n    $ which qemu-system-aarch64 /opt/homebrew/bin/qemu-system-aarch64\n\nNow download a debian installation image, here we use the netinst image for\nDebian 12 (bookworm)\n\n    \n    \n    $ wget https://cdimage.debian.org/debian-cd/current/arm64/iso-cd/debian-12.5.0-arm64-netinst.iso\n\n### Creating the files\n\nAnd create a disk image for qemu to use. Here we choose the qcow2 format with\n64G space. It is a \"on-demand\" format where the disk file is small when mostly\nempty. Adjust it for your potential need.\n\n    \n    \n    $ qemu-img create -f qcow2 disk.img 64G\n\nNow comes the tricky part, there appears to be a problem with the UEFI\nfirmware, most of the complexity of this guide is to address that. Find the\nfirmware for arm64 (this is put there by qemu, but it's not being used by\ndefault)\n\n    \n    \n    $ find /opt/homebrew -name 'edk2-aarch64-code.fd' /opt/homebrew/Cellar/qemu/8.2.2/share/qemu/edk2-aarch64-code.fd\n\nCopy it to the local directory for simplicity (or not, then your next command\nwill replace the edk2-aarch64-code.fd with the full path)\n\n    \n    \n    $ cp /opt/homebrew/Cellar/qemu/8.2.2/share/qemu/edk2-aarch64-code.fd ./\n\nAlso we need a drive for varstore\n\n    \n    \n    $ dd if=/dev/zero conv=sync bs=1m count=64 of=ovmf_vars.fd\n\n### Installing Debian\n\nFire up qemu to install a debian system on disk.img\n\n    \n    \n    $ qemu-system-aarch64 -M virt \\ -accel hvf \\ -smp 2 -m 8G -cpu host \\ -boot d -cdrom debian-12.5.0-arm64-netinst.iso \\ -drive \"format=raw,file=edk2-aarch64-code.fd,if=pflash,readonly=on\" \\ -drive \"format=raw,file=ovmf_vars.fd,if=pflash\" \\ -hda disk.img \\ -device e1000,netdev=usernet \\ -netdev user,id=usernet,hostfwd=tcp:0.0.0.0:10000-:22 \\ -nographic\n\nNotable things:\n\n  * The firmware is still a bit weird, using the usual VGA output doesn't seem to work, hence the -nographic. It's the better option anyway.\n\n  * You may have to hit the enter key after the screen clears after you executed the command. I have no idea why it is the case\n\n  * The -accel hvf option is to make use of the hardware acceleration of the CPU, which makes the VM having comparable performance to native machine (for CPU, this setup doesn't do anything for GPU acceleration)\n\nIf all goes wrong you'll realize you cannot use ctrl-c to exit the program.\nYou should do the following instead: ctrl-a c. This will give you something\nthat looks like this:\n\n    \n    \n    QEMU 8.2.2 monitor - type 'help' for more information (qemu)\n\nYou can enter quit to exit the qemu process from here.\n\nThe shell will look a bit strange afterwards because qemu changed the mode of\ntty. To get it back you just run reset in your command line.\n\nThere are a lot of resources on how to install a debian from the installer.\nI'll skip that here. Just make sure to install the ssh-server at the end.\n\n### Booting into the VM\n\nAfter successfully install the vm, qemu will reboot into the newly installed\ndebian. In the future if you wish to start the vm you can run\n\n    \n    \n    $ qemu-system-aarch64 -M virt \\ -accel hvf \\ -smp 2 -m 8G -cpu host \\ -drive \"format=raw,file=edk2-aarch64-code.fd,if=pflash,readonly=on\" \\ -drive \"format=raw,file=ovmf_vars.fd,if=pflash\" \\ -hda disk.img \\ -device e1000,netdev=usernet \\ -netdev user,id=usernet,hostfwd=tcp:0.0.0.0:10000-:22 \\ -nographic\n\nThe -netdev user,id=usernet,hostfwd=tcp:0.0.0.0:10000-:22 option forwards the\nhost's 10000 tcp port to VM's 22 tcp port, so you can do this to connect to it\nthrough ssh\n\n    \n    \n    $ ssh -p 10000 myuser@localhost\n\n### References\n\nhttps://unix.stackexchange.com/questions/682733/cannot-boot-aarch64-alpine-\nlinux-on-mac-os-using-qemu-6-2-0 https://ricardobalk.nl/blog/linux/debian-on-\nmacos\n\n", "frontpage": false}
