{"aid": "40075045", "title": "We're building our company as a fork of another project", "url": "https://re.video/blog/fork", "domain": "re.video", "votes": 3, "user": "justusm", "posted_at": "2024-04-18 11:32:03", "comments": 0, "source_title": "Revideo", "source_text": "Revideo\n\nCompany\n\nWe're building our company as a fork of another project - here's why.\n\nForking a Github repository is usually considered uncool - we think it is\njustified in our case\n\n\ud83d\udca1\n\nRevideo is a Typescript framework to create videos with code. People use\nRevideo to create Tiktoks/ Youtube Shorts, ads or demo videos\nprogrammatically. Revideo is MIT licensed and will stay that way. We plan to\nmonetize it down the line by building additional tooling around the open-\nsource framework.\n\nThree weeks ago, we launched Revideo, a framework for programmatically\ncreating videos. Even though we\u2019d only been working on it for a month at that\ntime, Revideo was already quite far along and feature-rich. This was not due\nto us pulling all-nighters for an entire month straight. Instead, we had a\nheadstart by building Revideo as a fork of an existing open source project,\nMotion Canvas.\n\nGenerally, forking an open source project is not considered cool. Why would\nyou create a separate project and force people to choose, when you could\ninstead just contribute to the original project and let people profit from the\nwork of all parties?\n\nAs expected, we received some backlash on Twitter from a maintainer and other\nusers of Motion Canvas:\n\nFull disclosure: I'm one of the Motion Canvas maintainers.\n\nThis feels incredibly icky to me. It's one thing to fork a project to build\nyour business on top of it; that's completely fine. However...View thread\n\n\u2014 Kai Sassnowski \ud83e\udd54 (@warsh33p)\n\nMarch 26, 2024\n\nEven though we expected backlash and the tweet didn\u2019t really reach a huge\naudience, we panicked and felt pretty bad. The initial decision to create a\nfork was not thoughtless, we had spent a lot of time looking for ways to\nachieve our goals without doing so. Still, this mini Twitter drama (which felt\nlike a huge PR crisis to us) prompted us to reevaluate and think about our\ndecision.\n\nWe came to two conclusions:\n\n  * We still believe that forking Motion Canvas is the best practical way to build Revideo. With \u201cbest\u201d, we do not just refer to our gain as a company, but for the developer community as a whole.\n  * A lot of our initial communication oversold our contributions and did not give Motion Canvas enough credit. This is something we are doing very differently now.\n\nWe want to use this post to share some thoughts on why we believe that forking\nis justified, and to clarify our goals and intentions with Revideo.\n\nOur goals for Revideo\n\nIn the beginning of 2024, we pivoted away from LLM finetuning-as-a-service and\nstarted to explore the space of AI-enabled video editing and creation. We\ntalked to some people in the industry and thought about a few use cases such\nas automatically A/B testing and personalizing video ads. In the end, we got\nstarted by building a simple web editor for short-form content, with a heavy\nemphasis on pre-defined templates of popular video formats and memes.\n\nFor example, we provided a template that let people create the \u201cfamous people\nplaying Minecraft\u201d meme by uploading images, voice snippets and a dialogue:\n\nAnother template we offered let you create Youtube Shorts just by providing a\ntopic. Here is an example for the topic \u201canimal rain\u201d:\n\nWhile building the app and exploring other ideas, we were consistently\nfrustrated with the video editing frameworks we used. We initially started\nbuilding on top of Moviepy, but quickly ran into two main issues:\n\n  * Moviepy doesn\u2019t have an option to preview your videos. Therefore, to look at the result of your video, you needed to wait for it to be exported, and thus had to wait huge amounts of time to test your code changes.\n  * More importantly, since Moviepy is not web-based, it didn\u2019t have built-in functionality to do any editing in the browser.\n\nDue to these issues, we later switched to Remotion, which we were quite happy\nwith. However, a big issue for us and the reason why were reluctant to use it\nwas the fact that it is source-available, but doesn\u2019t have an open-source\nlicense. Instead, they maintain the rights to their code and require you to\npay when using Remotion as a company.\n\nWe think that Remotion\u2019s pricing is very fair, and would have been okay with\npaying them. What put us off instead was the dependence on a codebase owned by\na single company. In terms of \u201cvibes\u201d, it just feels better to use open-source\ntooling, particularly if a big part of your product depends on it.\nFurthermore, we did not want everything that we built to require purchasing a\nRemotion license: In case another company wanted to build on top of our\nrepository, it would mean that they would have to pay Remotion too. Similarly,\nif we were to offer services or let an enterprise customer deploy our app by\nthemselves, they would have to make sure to comply with Remotion\u2019s license.\nSince it was the only viable option for us, we did build our MVP on top of\nRemotion, but planned on switching once we found an alternative.\n\nWhile we thought that our video app was fun, we were not really sure if we\ncould turn it into a business. Me and my co-founder are both engineers and\nhave always been more interested in building tooling than consumer products.\nGiven that we had been frustrated with the tools we tried, we decided to build\nthe video editing framework we\u2019d been looking for in the last months\nourselves.\n\nReason 1 for forking: We would have built the same thing anyway\n\nAt the time, we already knew Motion Canvas and really liked its API for\nbuilding animations. In fact, we had spent some time evaluating whether we\ncould use it to replace Remotion for our web app. When we did this, we noticed\nthat it lacked a lot of the functionality we had gotten used to from Remotion.\nFor example:\n\n  * Rendering could only be triggered through the Motion Canvas UI. Obviously, you need this functionality exposed through an API to build apps.\n  * The audio stream of video elements was not exported when rendering videos.\n  * Motion Canvas does not allow you to edit or sync audio files in any way. The only thing you can do is lay a single, pre-made audio file over the animation you\u2019re trying to export.\n  * Video exports are very slow when dealing with video-in-video.\n\nWe saw two options at this point:\n\n  1. Start from scratch with the goal of trying to build something similar to Motion Canvas, and probably spend more than six months to even get close to an MVP.\n  2. Extend Motion Canvas and ship something useful in a month.\n\nUnderstandably, we went for option 2.\n\nReason 2 for forking: Motion Canvas and Revideo have different goals\n\nAfter deciding to extend Motion Canvas, we tried to figure out if we can build\nwhat we wanted without forking. Motion Canvas has a plugin API, but it is\nunfortunately not flexible enough to integrate the functionality we wanted\nRevideo to have.\n\nLurking in the Motion Canvas Discord, we noticed that the maintainers are very\nstrict about what they want Motion Canvas to be. They have a clear vision of\nthe tool and are not interested in adding features that are not in line with\nit. For example, they have repeatedly stated that they do not want to add\naudio support to Motion Canvas, as it is a tool for creating animations and\nnot a video editor. Many of the changes we wanted to make (e.g. headless\nrendering and audio support) were proposed but repeatedly deemed out of scope.\nAs stated on the website, the maintainers see Motion Canvas as \u201ca specialized\ntool designed to create informative vector animations and synchronize them\nwith voice-overs. It's not meant to be a replacement for traditional video\nediting software\u201d. Clearly, we had different opinions, as we wanted to build\nsomething that covers the full functionality of a video editor.\n\nAnother big difference is that the Motion Canvas maintainers don't want people\nto use Motion Canvas as part of their software stack but as a standalone tool.\nThe fact that it is an npm package is merely for the purpose distribution, and\nnot because it is a package in the traditional sense:\n\nAn excerpt from a discussion in Motion Canvas' Github repository.\n\nOf course, this is totally fine - but we want to do different things. We want\npeople to use Revideo as part of their own apps, and expose the functionality\nthrough APIs. Given this, our contributions would have likely been\nconflicting.\n\nMotion Canvas and its maintainers have every right to do whatever they want\nwith the software that they have built. It is not at all our business to tell\nthem that their tool should be usable as a library. We just think that Motion\nCanvas would be really useful as part of other people's apps too.\n\nCommunication and branding\n\nWe understand that some maintainers & users were upset about how we\ncommunicated our fork. We have to admit that we did not do a good job at this.\n\nThis is what our landing page looked like when we launched Revideo:\n\nNotice how we call Revideo \u201cour framework\u201d and don\u2019t mention Motion Canvas at\nall? That was pretty inconsiderate. We have now fixed our landing page\naccording to the suggestion of a Motion Canvas user.\n\nIn general, we have changed the way we present Revideo. Instead of calling it\n\u201cour open source video editing framework\u201d, we mention Motion Canvas and say\nthat we are building tooling to programmatically create video using Motion\nCanvas\u2019 API.\n\nIt was wrong to assume that positioning yourself as a supplementary tool to\nanother popular piece of software would make it difficult to build a \u201cbrand\u201d.\nNextJS, for instance, is very well recognized, and it calls itself \u201cThe React\nFramework for the Web\u201d. Nowadays, we find that many people reach out to us\nexactly because they know and like Motion Canvas and want to build video apps\non top of it.\n\nWrapping things up...\n\nTo sum things up: We are big fans of Motion Canvas and the work its\nmaintainers are doing. We think we have messed up communicating the fork\ninitially, and are sorry for that. However, we still believe that forking was\nthe right choice, as\n\n  * managing our contributions would be a logistical nightmare\n  * the goals of Revideo and Motion Canvas are very different and even conflicting\n\nIf Motion Canvas\u2019 plugin system becomes more extensible, we are happy to build\nour features as plugins so that people do not have to choose between Motion\nCanvas or Revideo. In the meantime, we are going to continue working on\nRevideo and keep it MIT-licensed, with the goal of enabling developers to\nbuild video apps with Motion Canvas.\n\nLast modified: Tue 18. Apr 2024\n\nImprintContact Us\n\nLinkedInTwitter\n\n", "frontpage": false}
