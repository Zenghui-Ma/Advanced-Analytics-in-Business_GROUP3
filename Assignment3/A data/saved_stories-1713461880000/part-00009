{"aid": "40074976", "title": "How to Handle +725M request per week with PHP", "url": "https://developerjoy.co/blog/how-to-handle-725m-request-per-week-with-php", "domain": "developerjoy.co", "votes": 1, "user": "falcon_", "posted_at": "2024-04-18 11:18:21", "comments": 0, "source_title": "DeveloperJoy", "source_text": "How to Handle +725M request per week with PHP - DeveloperJoy\n\n# DeveloperJoy\n\n# How to Handle +725M request per week with PHP\n\nApril 17, 2024\n\nA few days ago, I post an article about how to handle +9M request on a small\nEC2 instance with Laravel and, on Reddit, they said it's nothing. They said\nthat any service is able to manage that amount of traffic easily.\n\nToday, we're going to talk about my experience at Wallbox, where we handled\nover 455M requests per week in a PHP service done with Symfony, and over 725M\nrequests per week in total.\n\nTable of contents:\n\n  * Before, a bit of context\n\n  * How we deal with that huge amount of traffic\n\n  * 1\\. Monitoring, Logging, and Alerting\n\n  * 2\\. Background processes, and queues\n\n  * 3\\. Improve your CD/CI, be able to revert fast\n\n  * 4\\. Forget about Slow Queries\n\n## Before, a bit of context\n\nWallbox is the leading supplier of smart EV chargers. Our chargers are\nconnected to the internet 24/7, sending data to the backend every 3 seconds\nwhile charging and every 9 seconds when idle.\n\nOur mobile and web apps provide users with real-time information,\nconfiguration changes and the ability to make any action or request.\n\nWallbox receives approximately 455 million requests per week in a single\nservice and 725 million requests per week in all their services combined.\n\n## How we deal with that huge amount of traffic\n\n### 1\\. Monitoring, Logging, and Alerting\n\nYou must have the right tools to monitor your application's performance. You\nneed to be able to monitor the performance of your instances, the CPU and\nmemory usage, and disk space. You also need proper logs to know what's\nhappening and to discover and fix errors. Without the proper logs, each error\ncould be a huge problem.\n\nWithout proper alerting, you won't be able to identify when something isn't\nworking properly.\n\nIn Wallbox, we track and log every request. If we start receiving fewer\nrequests from chargers, for example, an alert is triggered, we'll check the\nlogs to see what's going on.\n\n### 2\\. Background processes, and queues\n\nDon't even think about handling that many requests in the foreground. You need\nbackground processes, queues, and messages/jobs.\n\nWith Laravel, you can use something as simple as a cron job and a MySQL\ndatabase. However, when you need to scale, you will need something more\npowerful, such as AWS SES and SQS.\n\nYou must be able to trigger events and messages and perform background\nprocesses. It could be as simple as sending an email or creating or updating a\nresource.\n\nQueues and messages are superpowerful because they allow you to scale. You can\nhave as many background processes as you need, and you will see all the errors\nin your error queues. You can also retry and manage them again.\n\nYou must start thinking about how to split your use case into multiple\nasynchronous background jobs instead of doing everything during the same\nrequest.\n\n### 3\\. Improve your CD/CI, be able to revert fast\n\nMaking your CD/CI fast and efficient is not going to help you improve\nperformance and respond to more requests, but when the traffic you handle is\nso high, it becomes critical.\n\nSometimes we make small features or fixes that without realizing it were\nslightly worsening performance and we would instantly see, thanks to the\nmonitors, that the machines were starting to saturate.\n\nAt that moment we could revert the changes and in a matter of seconds, the\nmachines would return to the previous state without affecting our users. Then,\nthanks to the logs, we could see what had happened, adjust the RM, and bring\nit back up with more peace of mind.\n\nThis was day to day, no matter how many tests we had, it was impossible to\npredict the behavior of a change when processing +725 requests per week.\n\n### 4\\. Forget about Slow Queries\n\nWhen you have few requests you can afford to have some slow queries, but when\nyou work with high amounts of traffic it is important to optimize them.\n\nOne of the things that worked best for us was creating projections.\n\nThese projections were something similar to a view. Instead of making complex\nand slow queries, with several joins, we create and maintain a projection,\nusing events.\n\nThis projection is a table where we have the data ready to consume as we need\nit and queries go from slow to instantaneous.\n\nOf course, before getting to this point, it is important to have a good\nqueuing and event system, as well as logs and monitors. It can become\nimpossible to know why a projection is out of date if you don't have these\npoints previously covered.\n\n\u2190 Go back to the blog\n\n## Work with me\n\nDo you own a company or need help with your Laravel project? I can help you\nwith that. Check the plans and let me know if you have any questions.\n\nGet 1 month free with yearly plan during checkout.\n\n### Technical Advisor\n\n$ 3 ,995\n\n/m\n\nStart now\n\nWhat's included:\n\n  * Lead your team to a better code architecture, testing mentality, clean code, and more.\n  * Lead knowledge-sharing sessions depending on current company status and requirements.\n  * Help with product and technical decisions.\n  * Pause or cancel anytime.\n\n### Integrated Senior Developer\n\n$ 5 ,995\n\n/m\n\nNot available\n\nWhat's included:\n\n  * Includes all Technical Advisor services.\n  * Engages as a team member in daily tasks.\n  * Participates actively in day-to-day development.\n  * Direct communication: Slack, and meetings included.\n  * Pause or cancel anytime.\n\n#### Want to talk first?\n\nOk, just book a call now.\n\n## FAQ\n\nGood question! For starters, the annual cost of a full-time senior-level\ndeveloper now exceeds $100,000, plus benefits (and good luck finding one\navailable).\n\nAside from that, you may not always have enough work to keep them busy at all\ntimes, so you're stuck paying for time you aren't able to utilize.\n\nWith the monthly plan, you can pause and resume your subscription as often as\nyou need to ensure you're only paying your developer when you have work\navailable for them.\n\nNo, once subscribed you're able to request as many things as you'd like, and\nthey will be delivered one by one.\n\nDelivery will always be fast without compromising quality. Very complex\nrequests will be divided into smaller products for continuous delivery.\n\nAlways, before starting to work, we can make a planning so that you know,\nbefore starting, when each change will be delivered.\n\nYou'll work directly with me, the founder and only person behind DeveloperJoy.\n\nWe understand you may not have enough work to fill up entire month. Perhaps\nyou only have one or two requests at the moment. That's where pausing your\nsubscription comes in handy.\n\nBilling cycles are based on 31 day period. Let's say you sign up and use the\nservice for 21 days, and then decide to pause your subscription. This means\nthat the billing cycle will be paused and you'll have 10 days of service\nremaining to be used anytime in the future\n\nI had experience making products with PHP, Go, and JavaScript/TypeScript.\n\nAlso I feel really comfortable working with WordPress, Laravel, Symfony,\nVue.js, React, Svelte, and more.\n\nMail me and we will see how best to collaborate.\n\nYou can make this request by email, sharing a task board with me or, depending\non your plan, by call or Slack.\n\nThat's fine. You can pause your subscription when finished and return when you\nhave additional requests needs. There's no need to let the remainder of your\nsubscription go to waste.\n\nDue to the high quality nature of the work, there will be no refunds issued.\n\n\u00a9 2024 DeveloperJoy\n\n  * Pricing\n  * Blog\n  * Contact\n  * Login\n\n", "frontpage": false}
