{"aid": "40074111", "title": "Aide: The Machine Learning CodeGen Agent", "url": "https://github.com/WecoAI/aideml", "domain": "github.com/wecoai", "votes": 1, "user": "georgehill", "posted_at": "2024-04-18 08:26:37", "comments": 0, "source_title": "GitHub - WecoAI/aideml: AIDE: the Machine Learning CodeGen Agent", "source_text": "GitHub - WecoAI/aideml: AIDE: the Machine Learning CodeGen Agent\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nWecoAI / aideml Public\n\n  * Notifications\n  * Fork 11\n  * Star 190\n\nAIDE: the Machine Learning CodeGen Agent\n\nwww.weco.ai\n\n### License\n\nMIT license\n\n190 stars 11 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# WecoAI/aideml\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nyuxiang-wufix pypi name conflict issueApr 17, 20246fafd97 \u00b7 Apr 17, 2024Apr\n17, 2024\n\n## History\n\n12 Commits  \n  \n### aide\n\n|\n\n### aide\n\n| add example task descriptions| Apr 17, 2024  \n  \n### sample_results\n\n|\n\n### sample_results\n\n| add open-source AIDE| Apr 17, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| add open-source AIDE| Apr 17, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| add open-source AIDE| Apr 17, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| add example task descriptions| Apr 17, 2024  \n  \n### requirements.txt\n\n|\n\n### requirements.txt\n\n| add open-source AIDE| Apr 17, 2024  \n  \n### setup.py\n\n|\n\n### setup.py\n\n| fix pypi name conflict issue| Apr 17, 2024  \n  \n## Repository files navigation\n\n# AIDE: the Machine Learning CodeGen Agent\n\nAIDE is an LLM agent that generates solutions for machine learning tasks just\nfrom natural language descriptions of the task. In a benchmark composed of\nover 60 Kaggle data science competitions, AIDE demonstrated impressive\nperformance, surpassing 50% of Kaggle participants on average (see our\ntechnical report for details). More specifically, AIDE has the following\nfeatures:\n\n  1. Instruct with Natural Language: Describe your problem or additional requirements and expert insights, all in natural language.\n  2. Deliver Solution in Source Code: AIDE will generate Python scripts for the tested machine learning pipeline. Enjoy full transparency, reproducibility, and the freedom to further improve the source code!\n  3. Iterative Optimization: AIDE iteratively runs, debugs, evaluates, and improves the ML code, all by itself.\n  4. Visualization: We also provide tools to visualize the solution tree produced by AIDE for a better understanding of its experimentation process. This gives you insights not only about what works but also what doesn't.\n\n# How to use AIDE?\n\n## Setup\n\nMake sure you have Python>=3.10 installed and run:\n\n    \n    \n    pip install -U aideml\n\nAlso install unzip to allow the agent to autonomously extract your data.\n\nSet up your OpenAI (or Anthropic) API key:\n\n    \n    \n    export OPENAI_API_KEY=<your API key> # or export ANTHROPIC_API_KEY=<your API key>\n\n## Running AIDE via the command line\n\nTo run AIDE:\n\n    \n    \n    aide data_dir=\"<path to your data directory>\" goal=\"<describe the agent's goal for your task>\" eval=\"<(optional) describe the evaluation metric the agent should use>\"\n\nFor example, to run AIDE on the example house price prediction task:\n\n    \n    \n    aide data_dir=\"example_tasks/house_prices\" goal=\"Predict the sales price for each house\" eval=\"Use the RMSE metric between the logarithm of the predicted and observed values.\"\n\nOptions:\n\n  * data_dir (required): a directory containing all the data relevant for your task (.csv files, images, etc.).\n  * goal: describe what you want the models to predict in your task, for example, \"Build a timeseries forcasting model for bitcoin close price\" or \"Predict sales price for houses\".\n  * eval: the evaluation metric used to evaluate the ML models for the task (e.g., accuracy, F1, Root-Mean-Squared-Error, etc.)\n\nAlternatively, you can provide the entire task description as a desc_str\nstring, or write it in a plaintext file and pass its path as desc_file\n(example file).\n\n    \n    \n    aide data_dir=\"my_data_dir\" desc_file=\"my_task_description.txt\"\n\nThe result of the run will be stored in the logs directory.\n\n  * logs/<experiment-id>/best_solution.py: Python code of best solution according to the validation metric\n  * logs/<experiment-id>/journal.json: a JSON file containing the metadata of the experiment runs, including all the code generated in intermediate steps, plan, evaluation results, etc.\n  * logs/<experiment-id>/tree_plot.html: you can open it in your browser. It contains visualization of solution tree, which details the experimentation process of finding and optimizing ML code. You can explore and interact with the tree visualization to view what plan and code AIDE comes up with in each step.\n\nThe workspaces directory will contain all the files and data that the agent\ngenerated.\n\n### Advanced Usage\n\nTo further customize the behaviour of AIDE, some useful options might be:\n\n  * agent.code.model=... to configure which model the agent should use for coding (default is gpt-4-turbo)\n  * agent.steps=... to configure how many improvement iterations the agent should run (default is 20)\n  * agent.search.num_drafts=... to configure the number of initial drafts the agent should generate (default is 5)\n\nYou can check the config.yaml file for more options.\n\n## Using AIDE in Python\n\nUsing AIDE within your Python script/project is easy. Follow the setup steps\nabove, and then create an AIDE experiment like below and start running:\n\n    \n    \n    import aide exp = aide.Experiment( data_dir=\"example_tasks/bitcoin_price\", # replace this with your own directory goal=\"Build a timeseries forcasting model for bitcoin close price.\", # replace with your own goal description eval=\"RMSLE\" # replace with your own evaluation metric ) best_solution = exp.run(steps=10) print(f\"Best solution has validation metric: {best_solution.valid_metric}\") print(f\"Best solution code: {best_solution.code}\")\n\n## Development\n\nTo install AIDE for development, clone this repository and install it locally.\n\n    \n    \n    git clone https://github.com/WecoAI/aideml.git cd aideml pip install -e .\n\nContribution guide will be available soon.\n\n## Algorithm Description\n\nAIDE's problem-solving approach is inspired by how human data scientists\ntackle challenges. It starts by generating a set of initial solution drafts\nand then iteratively refines and improves them based on performance feedback.\nThis process is driven by a technique we call Solution Space Tree Search.\n\nAt its core, Solution Space Tree Search consists of three main components:\n\n  * Solution Generator: This component proposes new solutions by either creating novel drafts or making changes to existing solutions, such as fixing bugs or introducing improvements.\n  * Evaluator: The evaluator assesses the quality of each proposed solution by running it and comparing its performance against the objective. This is implemented by instructing the LLM to include statements that print the evaluation metric and by having another LLM parse the printed logs to extract the evaluation metric.\n  * Base Solution Selector: The solution selector picks the most promising solution from the explored options to serve as the starting point for the next iteration of refinement.\n\nBy repeatedly applying these steps, AIDE navigates the vast space of possible\nsolutions, progressively refining its approach until it converges on the\noptimal solution for the given data science problem.\n\n## Solution Gallery\n\nDomain| Task| Top%| Solution Link| Competition Link  \n---|---|---|---|---  \nUrban Planning| Forecast city bikeshare system usage| 5%| link| link  \nPhysics| Predicting Critical Heat Flux| 56%| link| link  \nGenomics| Classify bacteria species from genomic data| 0%| link| link  \nAgriculture| Predict blueberry yield| 58%| link| link  \nHealthcare| Predict disease prognosis| 0%| link| link  \nEconomics| Predict monthly microbusiness density in a given area| 35%| link|\nlink  \nCryptography| Decrypt shakespearean text| 91%| link| link  \nData Science Education| Predict passenger survival on Titanic| 78%| link| link  \nSoftware Engineering| Predict defects in c programs given various attributes\nabout the code| 0%| link| link  \nReal Estate| Predict the final price of homes| 5%| link| link  \nReal Estate| Predict house sale price| 36%| link| link  \nEntertainment Analytics| Predict movie worldwide box office revenue| 62%|\nlink| link  \nEntertainment Analytics| Predict scoring probability in next 10 seconds of a\nrocket league match| 21%| link| link  \nEnvironmental Science| Predict air pollution levels| 12%| link| link  \nEnvironmental Science| Classify forest categories using cartographic\nvariables| 55%| link| link  \nComputer Vision| Predict the probability of machine failure| 32%| link| link  \nComputer Vision| Identify handwritten digits| 14%| link| link  \nManufacturing| Predict missing values in dataset| 70%| link| link  \nManufacturing| Predict product failures| 48%| link| link  \nManufacturing| Cluster control data into different control states| 96%| link|\nlink  \nNatural Language Processing| Classify toxic online comments| 78%| link| link  \nNatural Language Processing| Predict passenger transport to an alternate\ndimension| 59%| link| link  \nNatural Language Processing| Classify sentence sentiment| 42%| link| link  \nNatural Language Processing| Predict whether a tweet is about a real disaster|\n48%| link| link  \nBusiness Analytics| Predict total sales for each product and store in the next\nmonth| 87%| link| link  \nBusiness Analytics| Predict book sales for 2021| 66%| link| link  \nBusiness Analytics| Predict insurance claim amount| 80%| link| link  \nBusiness Analytics| Minimize penalty cost in scheduling families to santa's\nworkshop| 100%| link| link  \nBusiness Analytics| Predict yearly sales for learning modules| 26%| link| link  \nBusiness Analytics| Binary classification of manufacturing machine state| 60%|\nlink| link  \nBusiness Analytics| Forecast retail store sales| 36%| link| link  \nBusiness Analytics| Predict reservation cancellation| 54%| link| link  \nFinance| Predict the probability of an insurance claim| 13%| link| link  \nFinance| Predict loan loss| 0%| link| link  \nFinance| Predict a continuous target| 42%| link| link  \nFinance| Predict customer churn| 24%| link| link  \nFinance| Predict median house value| 58%| link| link  \nFinance| Predict closing price movements for nasdaq listed stocks| 99%| link|\nlink  \nFinance| Predict taxi fare| 100%| link| link  \nFinance| Predict insurance claim probability| 62%| link| link  \nBiotech| Predict cat in dat| 66%| link| link  \nBiotech| Predict the biological response of molecules| 62%| link| link  \nBiotech| Predict medical conditions| 92%| link| link  \nBiotech| Predict wine quality| 61%| link| link  \nBiotech| Predict binary target without overfitting| 98%| link| link  \nBiotech| Predict concrete strength| 86%| link| link  \nBiotech| Predict crab age| 46%| link| link  \nBiotech| Predict enzyme characteristics| 10%| link| link  \nBiotech| Classify activity state from sensor data| 51%| link| link  \nBiotech| Predict horse health outcomes| 86%| link| link  \nBiotech| Predict the mohs hardness of a mineral| 64%| link| link  \nBiotech| Predict cirrhosis patient outcomes| 51%| link| link  \nBiotech| Predict obesity risk| 62%| link| link  \nBiotech| Classify presence of feature in data| 66%| link| link  \nBiotech| Predict patient's smoking status| 40%| link| link  \n  \n## About\n\nAIDE: the Machine Learning CodeGen Agent\n\nwww.weco.ai\n\n### Topics\n\ndata-science machine-learning ai llm\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\nCustom properties\n\n### Stars\n\n190 stars\n\n### Watchers\n\n16 watching\n\n### Forks\n\n11 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Contributors 3\n\n  * ZhengyaoJiang Zhengyao Jiang\n  * yuxiang-wu Yuxiang (Jimmy) Wu\n  * schmidtdominik Dominik Schmidt\n\n## Languages\n\n  * Python 95.1%\n  * JavaScript 4.1%\n  * HTML 0.8%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
