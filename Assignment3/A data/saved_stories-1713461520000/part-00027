{"aid": "40074086", "title": "The Domino Computer", "url": "https://www.andrewt.net/maths/domputer/", "domain": "andrewt.net", "votes": 6, "user": "bschne", "posted_at": "2024-04-18 08:22:04", "comments": 0, "source_title": "The Domino Computer", "source_text": "andrewt.net | The Domino Computer\n\n# Andrew Taylor\n\n#\n\nThe Domino Computer\n\nAs part of the Manchester Science Festival 2012, Matt Parker decided to\ndemonstrate how computers worked by building one out of dominoes.\n\nThis page will show you how the domino computer was designed \u2014 here is the\nofficial video from the weekend, but be aware it contains answers to some of\nthe interactive domino puzzles below.\n\nThe computer comprised about ten thousand dominoes, and could add up any two\nthree-bit numbers to give a four-bit number (although only once). I was part\nof the team which built it, and helped design the layout.\n\nLike (nearly) all computers, ours uses binary. This is much like the decimal\nnumbers you\u2019re used to, except that the largest digit is 1 \u2014 so we count 0, 1\nas normal, but we can't write a \u20182\u2019, so the next number is 10. Then we go 11,\n100, 101, 110, 111, 1000, and so on.\n\nThe aim is to demonstrate how very simple reactions, simple enough that they\noccur in real physics, can be combined to perform mathematical calculations \u2014\nwhich hopefully helps explain how large numbers of transistors can combine to\nplay Doom.\n\nMatt has also produced these explanatory worksheets aimed at teachers, and\nthis Numberphile video which goes a little deeper into the workings of the\ndomino computer.\n\nThe computer is made of \u201cwires\u201d, which are made of normal domino chains. They\nwork much the same way as the connections in a normal, electrical circuit,\nalthough there are a few important differences, notably that they can only be\nused once. Try dragging a domino wire from the blue \u201ctrigger\u201d dominoes on the\nleft to the green \u201cdisplay\u201d dominoes on the right.\n\n(If you\u2019re reading this on a mobile device, you might not be able to add\ndominoes, but you should be able to cheat your way through using the \u201creveal\nanswer\u201d buttons \u2014 or play along when you get back to a computer with a mouse.)\n\nPress \u201cplay\u201d or click the blue trigger area to watch the dominoes fall.\n\nYou can also split a signal in two. Try hitting both of these output areas:\n\nThis is a little pointless since the two arms are exactly the same, so let\u2019s\ntry adding an input. We program our domino computer by adding dominoes in\ncertain places. In this case, we\u2019re going to add two yellow \u201cinput\u201d areas\npartway along the floor. Click one of the input areas to turn it on and off.\nThis time, hit the top output area only if the top input area is on, and\nsimilarly for the bottom one:\n\nLet\u2019s try something a little more complex: this time, try to trip the bottom\noutput panel if the input is activated, and the top one if it isn\u2019t. (The\noutput areas will turn red or green when you toggle an input area, so you can\nsee what you\u2019re going for.) There is probably more than one sensible answer to\nthis one, but I\u2019ve included mine in case you get stuck. If you need a hint,\nthink about how to stop the signal to the bottom output.\n\nThese sim-dominoes can only fall exactly forward or backward, so bear that in\nmind when you're stopping a line.\n\nYou can always remove a domino by clicking on it, or start again by clicking\n\u201cclear\u201d.\n\nWhat we\u2019ve built here is a NOT gate: the top output is active if and only if\nthe input isn\u2019t. Let\u2019s try to build some other gates. The easiest one to make\nis the OR gate: try to get the output active if either (or both) of the inputs\nare:\n\nNext, try an AND gate: trigger the output panel only if both inputs are\nactive:\n\nIf you\u2019re like me, you just drew a chain of dominoes through both input\npanels. This is entirely correct, but can\u2019t really be combined with other\ngates, so isn\u2019t very useful for building a computer. Try doing it without\nplacing any dominoes in the grey area:\n\n(If you need a hint, think about how you built the NOT gate \u2014 the solution is\nsurprisingly similar. At least, mine is. There are others.)\n\nThe last common logic gate is XOR, or \u201cexclusive or\u201d. In this case, you need\nto activate the output if exactly one of the inputs is active. If both or\nneither are, nothing should happen:\n\n(If you need a hint, bear in mind that any piece of domino \u201cwire\u201d can be used\nexactly once. And this one is hard: it\u2019s probably fine if you click \u201creveal\nanswer\u201d on this one.)\n\nFour years later, to go with the world\u2019s slowest computer, we built the\nworld\u2019s lowest framerate RGB display.\n\nThe trick to building a binary adding machine, or indeed any computer, is\ncombining these simple gates into something more complex. Specifically, the\nnext step in our chain is the Half Adder. This essentially outputs a 2-bit\nbinary number (00, 01, or 10) representing the number of inputs which are\nactive. Try to activate the top output if exactly one input is active, and the\nbottom if both are. (You may have to scroll or expand this one.)\n\nIt\u2019s useful to realise that this is simply an XOR gate and an AND gate on the\nsame board, although you may find you can\u2019t use the same designs as before\nbecause there isn\u2019t room or because you can\u2019t easily cross domino wires. A\nlittle lateral thinking can produce a solution, though, and you can always\nreveal my answer if you get stuck.\n\nBy now you\u2019re probably starting to get nearby rows of dominoes knocking each\nother over, and blocking lines arriving after the signal has got through.\nThese are problems we encountered on our second attempt at building a domino\nadder. We got overambitious and tried to build a four-bit adder in the same\nspace, with the same number of dominoes. But these are problems faced by real\nelectronics: signal can bleed from one line to a nearby one, and electric\nsignals do not travel instantly, so timing can be an issue in very fast chips.\n\nPerhaps predictably, the next step is a Full Adder. This takes three inputs,\nand again outputs a 2-bit number (now 00, 01, 10 or 11) representing the\nnumber of inputs which are active. Where the Half Adder can add two one-bit\nnumbers, the Full Adder is designed to also accept a \u201ccarried\u201d one from the\nprevious digit (which we aren\u2019t doing yet). The finished computer will be\nessentially a series of Full Adders.\n\nThere is a clue in the name as to how to get from a Half Adder to a Full\nAdder, but it\u2019s not a simple task.\n\nThe last step is to connect the Full Adders together. To add two three-bit\nnumbers, we used two Full Adders and one Half Adder (because the first digit\nnever has anything carried into it). The XOR outputs from the Adders, and the\nAND output from the last Full Adder become the four digits of the display, and\nthe AND outputs from the first two adders become the \u201ccarried\u201d digit input for\nthe two Full Adders. This leaves two inputs on each Adder. These are where we\ninput our two binary numbers to be added.\n\nReal dominoes are not as well behaved as the pretend ones you are using.\nThey\u2019re all different shapes and you can\u2019t test it before you start. Therefore\nthe entire system was designed to use only one junction design*. We tested\nthat one junction design meticulously, and it worked every time.\n\nIt\u2019s also impossible to be sure how the timings will play out, so many parts\nof the circuit were much larger than they probably needed to be, to make sure\neverything would happen in order.\n\nThe last thing to remember is that each Adder can only be toppled when the\nprevious one has completed, otherwise we won\u2019t know if there\u2019s a one to carry.\nTherefore the \u201ctrigger\u201d line for each one is activated either by the carry\nline from the previous Adder, or from a \u201cclock\u201d line. The job of the clock\nline is to activate the Adder if nothing is carried. The clock line is\ntherefore very long and bendy to ensure it never triggers an Adder before the\ncarry line can get there.\n\nI\u2019m not going to make you build the entire domino computer with your mouse,\nbut you\u2019ve built every major component of it now. If you scroll back to the\ntop and watch the video (again), perhaps you\u2019ll be able to see all the XOR\ngates and Full Adders as they fall.\n\nCopyright \u00a9 2001-2022 Andrew Taylor\n\n  * Twitter\n  * Mastodon\n  * Email\n  * GitHub\n\n", "frontpage": true}
