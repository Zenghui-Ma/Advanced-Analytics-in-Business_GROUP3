{"aid": "40145343", "title": "We suck at estimating software projects", "url": "https://www.infoworld.com/article/3715342/why-we-suck-at-estimating-software-projects.html", "domain": "infoworld.com", "votes": 2, "user": "biscuit1v9", "posted_at": "2024-04-24 15:14:14", "comments": 0, "source_title": "Why we suck at estimating software projects", "source_text": "Why we suck at estimating software projects | InfoWorld\n\nClose Ad\n\ninfoworld\n\nUNITED STATES\n\n  * United States\n  * United Kingdom\n\n  * App Dev\n  * Cloud\n  * Gen AI\n  * Machine Learning\n  * Analytics\n  * Newsletters\n  * White Papers/Webcasts\n\n\u00d7\n\nClose\n\n# Why we suck at estimating software projects\n\n### You can plan, strategize, chunk, fold, spindle, and mutilate a project for\ncountless person-hours, and you still won\u2019t know the difficulties that lay\nahead in actually writing the code.\n\nBy Nick Hodges\n\nContributing Writer, InfoWorld\n\n| Apr 23, 2024 2:00 am PDT\n\nThinkstock\n\nOkay, so I\u2019m just going to go ahead and say it:\n\nIt is impossible to accurately estimate a software project of any\nsignificance.\n\nNow, a non-trivial number of you are going to read that sentence and think I\u2019m\nnuts. And maybe I am. But someone has to just say what we all know to be true\nbut don\u2019t want to admit.\n\n#### [ Keep up with the latest developments in software development. Subscribe\nto the InfoWorld First Look newsletter ]\n\nLook, there have been countless books written, innumerable conferences held,\nuntold consulting hours purchased, and endless blog posts written on how to be\nbetter at estimating software projects. I get it. We all work earnestly to\ngive our best effort in an attempt to placate hungry bosses who want to know\nwhen a new feature will be ready. We all set deadlines based on a conference\ndate and not when the software will actually be ready.\n\nBut the bottom line is that we simply can\u2019t do it. Well, we can do it\u2014indeed,\nwe do it all the time\u2014but we can\u2019t do it well. In other words, we are always\nwrong.\n\nI mean, we keep spending the money and going to seminars and reading the blogs\nand books. We bring in highly paid consultants who act like they know what\nthey are talking about. But it just never gets better. We suck at it, and we\nkeep thinking we can improve and that the next fad really will be the silver\nbullet. But we won\u2019t admit to ourselves what we know to be true: We can\u2019t\nestimate software projects with very much confidence at all.\n\nWe\u2019ve all done projects that we thought would take a given chunk of time and\nthen they end up taking twice or three times as long. You may have been\ninvolved in a project that finished in half the time expected. But it is a\nrare and strange project that finishes within a tight window around the\nactual, original estimate. And then, when we apply Hofstadter\u2019s law (\u201cIt\nalways takes longer than you expect, even when you take into account\nHofstadter\u2019s Law\u201d) and double the estimate, that proves to be wrong, too.\n\nThere are reasons this is the case. The most prominent one, and the one I\nthink most folks have the hardest time with, is that each and every software\nproject is unique with its own long list of \u201cunknown unknowns.\u201d You can plan,\nstrategize, chunk, fold, spindle, and mutilate a project for countless person-\nhours, and you still won\u2019t know the difficulties that lay ahead in actually\nwriting the code. Some things that you think will be challenging will turn out\nto be easy. But most often, you will dramatically underestimate the challenge\nthat some particular aspect of the project will pose.\n\nOf course, this happens because the average software manager will always\nbelieve that the path taken will be a flat, straight highway with lovely\nweather all the way to the destination. And that is simply never the case. The\nrequirements change, never making the project smaller. People take unexpected\nPTO. Other projects or priorities interfere. The sales department needs this\none little tweak to close a major deal. Nothing is fair winds and following\nseas from start to finish. Ever.\n\nI have a friend with a fancy degree in computer engineering who gets so mad at\nme when I say this, but the real problem is that software development is not\nan engineering discipline. Instead, it is a process mired in changing human\ndesires, interacting personalities and dynamics, shifting customer\nunderstanding, and unscientific solutions. Software development is a creative\nprocess, not a scientific one, and creative endeavors cannot be distilled down\nto knowable steps and a repeatable system.\n\nHey, I get that this is hard to hear. Businesses\u2014and by that I mean\ncustomers\u2014don\u2019t want to hear \u201cWell, we really aren\u2019t sure when we\u2019ll have that\nfor you.\u201d They\u2019ll seek out vendors who will tell them what they want to hear,\neven if it is complete baloney. Companies have to make money, and to do that\nthey need to produce value sooner rather than later. That demo of the new\nfeature actually does have to happen at that conference on that particular\ndate.\n\nAnd we need to figure out how to accept and live with this. I say this because\nI think that as an industry, we have been on a decades-long quest for the holy\ngrail of software estimation, and we always will be. But we\u2019ll never figure it\nout. We just won\u2019t. Until we come to terms with that, we\u2019ll struggle and flail\nand continue to tell ourselves something that we know simply isn\u2019t true.\n\nI don\u2019t have a solution, and I doubt there even is a solution. Accepting that\nis the first step in coming to terms with a problem that simply will never go\naway.\n\nNext read this:\n\n  * Why companies are leaving the cloud\n  * 5 easy ways to run an LLM locally\n  * Coding with AI: Tips and best practices from developers\n  * Meet Zig: The modern alternative to C\n  * What is generative AI? Artificial intelligence that creates\n  * The best open source software of 2023\n\nRelated:\n\n  * Software Development\n\nNick Hodges is a senior developer at Ideal Software Systems. He\u2019s a long-time\nDelphi Developer who is currently interested in Astro and TypeScript. You can\nfind him at nickhodges.com.\n\nFollow\n\nCopyright \u00a9 2024 IDG Communications, Inc.\n\nInfoWorld\n\nCopyright \u00a9 2024 IDG Communications, Inc.\n\nExplore the Foundry Network descend\n\n  * CIO\n  * Computerworld\n  * CSO Online\n  * InfoWorld\n  * Network World\n\n### InfoWorld wants to show you notifications\n\n#### You can turn off notifications at any time from your browser\n\n##### Powered by subscribers\n\n", "frontpage": false}
