{"aid": "40094959", "title": "Wax compiler \u2013 a tiny language designed to transpile to other languages", "url": "https://waxc.netlify.app/", "domain": "waxc.netlify.app", "votes": 2, "user": "shakna", "posted_at": "2024-04-20 05:05:17", "comments": 0, "source_title": null, "source_text": "wax compiler\n\nA tiny language designed to transpile to other languages.\n\nExample:\n\nTranspile to:\n\nRealtime:\n\n    \n    \n    xxxxxxxxxx\n\n170\n\n1\n\n    \n    \n    ;; Universal Turing Machine Simulation\n\n2\n\n    \n    \n    ;; A wax feature demo\n\n3\n\n4\n\n    \n    \n    ; enums for shift directions\n\n5\n\n    \n    \n    (@define STAY 0)\n\n6\n\n    \n    \n    (@define LEFT 1)\n\n7\n\n    \n    \n    (@define RIGHT 2)\n\n8\n\n9\n\n    \n    \n    ; datastructure for the transition function\n\n10\n\n    \n    \n    (struct transition\n\n11\n\n    \n    \n    (let q_curr int) ; current state\n\n12\n\n    \n    \n    (let q_targ int) ; target state\n\n13\n\n    \n    \n    (let sym_r int) ; read symbol\n\n14\n\n    \n    \n    (let sym_w int) ; write symbol\n\n15\n\n    \n    \n    (let shift int) ; shift direction\n\n16\n\n    \n    \n    )\n\n17\n\n18\n\n    \n    \n    ; datastructure for the turing machine\n\n19\n\n    \n    \n    ; (map int int) is used to represent the tape,\n\n20\n\n    \n    \n    ; mapping position to symbol, to simulate \"infinite\" length.\n\n21\n\n    \n    \n    ; tmin/tmax are tape extremas for visualization\n\n22\n\n    \n    \n    (struct machine\n\n23\n\n    \n    \n    (let state int) ; current state\n\n24\n\n    \n    \n    (let head int)\n\n25\n\n    \n    \n    (let tape (map int int))\n\n26\n\n    \n    \n    (let tmin int) ; leftmost visited tape position\n\n27\n\n    \n    \n    (let tmax int) ; rightmost visited tape position\n\n28\n\n    \n    \n    )\n\n29\n\n30\n\n    \n    \n    ; simulate the turing machine for 1 step.\n\n31\n\n    \n    \n    (func step\n\n32\n\n    \n    \n    (param M (struct machine))\n\n33\n\n    \n    \n    (param D (arr (struct transition)))\n\n34\n\n    \n    \n    (let tape (map int int) (get M tape))\n\n35\n\n36\n\n    \n    \n    ; check each transition function, to see if conditions apply\n\n37\n\n    \n    \n    (for i 0 (< i (# D)) 1 (do\n\n38\n\n39\n\n    \n    \n    (if (&&\n    \n    \n    xxxxxxxxxx\n\n1\n\n", "frontpage": false}
