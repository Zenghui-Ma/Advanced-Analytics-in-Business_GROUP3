{"aid": "40075282", "title": "Show HN: A minimal workflow orchestrator for Python written in Rust", "url": "https://github.com/RainingComputers/Flowmium", "domain": "github.com/rainingcomputers", "votes": 2, "user": "shnoo28", "posted_at": "2024-04-18 12:02:18", "comments": 0, "source_title": "GitHub - RainingComputers/Flowmium: Workflow orchestrator written in rust", "source_text": "GitHub - RainingComputers/Flowmium: Workflow orchestrator written in rust\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nRainingComputers / Flowmium Public\n\n  * Notifications\n  * Fork 0\n  * Star 22\n\nWorkflow orchestrator written in rust\n\n### License\n\nMIT license\n\n22 stars 0 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# RainingComputers/Flowmium\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n0 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nRainingComputersFix x86 docker imageDec 24, 20238d02afb \u00b7 Dec 24, 2023Dec 24,\n2023\n\n## History\n\n225 Commits  \n  \n### .github/workflows\n\n|\n\n### .github/workflows\n\n| Add cache for cargo in github workflows| Oct 4, 2023  \n  \n### .vscode\n\n|\n\n### .vscode\n\n| Add docs for client module| Oct 4, 2023  \n  \n### examples\n\n|\n\n### examples\n\n| Fix typos in doc comments, refactor public API and add Rust integrati...|\nOct 4, 2023  \n  \n### flowmium\n\n|\n\n### flowmium\n\n| Fix x86 docker image| Dec 24, 2023  \n  \n### framework\n\n|\n\n### framework\n\n| Fix typos in doc comments, refactor public API and add Rust integrati...|\nOct 4, 2023  \n  \n### .flake8\n\n|\n\n### .flake8\n\n| Add --dry-run option to framework| Aug 26, 2023  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| Change project structure| Dec 30, 2022  \n  \n### .readthedocs.yml\n\n|\n\n### .readthedocs.yml\n\n| Fix .readthedocs.yml| Sep 16, 2023  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| Initial commit| Dec 4, 2022  \n  \n### Makefile\n\n|\n\n### Makefile\n\n| Skeleton for examples| Sep 16, 2023  \n  \n### README.md\n\n|\n\n### README.md\n\n| Fix typos in doc comments, refactor public API and add Rust integrati...|\nOct 4, 2023  \n  \n### logo.svg\n\n|\n\n### logo.svg\n\n| Update logo| Dec 31, 2022  \n  \n## Repository files navigation\n\n# Flowmium\n\nFlowmium is a workflow orchestrator that uses Kubernetes. You can define and\nrun a YAML workflow of containers or you can run a python workflow where each\nfunction runs as a Kubernetes pod.\n\nA python workflow would look like this\n\n    \n    \n    from flowmium import Flow, FlowContext from flowmium.serializers import plain_text, json_text, pkl flow = Flow(\"testing\") @flow.task(serializer=json_text) def foo() -> str: return \"Hallo world\" @flow.task({\"input_str\": foo}, serializer=plain_text) def replace_letter_a(input_str: str, flowctx: FlowContext) -> str: return input_str.replace(\"a\", \"e\") + str(flowctx.task_id) @flow.task({\"input_str\": foo}, serializer=pkl) def replace_letter_t(input_str: str) -> str: return input_str.replace(\"t\", \"d\") @flow.task( {\"first\": replace_letter_t, \"second\": replace_letter_a}, serializer=plain_text ) def concat(first: str, second: str) -> str: return f\"{first} {second}\" if __name__ == \"__main__\": flow.run()\n\n## Getting started\n\n  * Setting up on local for testing\n  * Deploying on production\n  * Example python package workflow\n  * Example python script workflow\n  * Example YAML definition workflow\n  * Python framework documentation\n  * API documentation\n  * Rust client docs\n  * Integrating into an existing Rust project\n\n## flowctl CLI\n\nThe flowctl CLI is used to monitor current status of workflows, submit new\nworkflows and download artifacts.\n\n### Install\n\n    \n    \n    cargo install flowmium\n\n### Usage\n\nAction| Command  \n---|---  \nList workflows| flowctl list  \nUse explicit URL| flowctl --url http://localhost:8080 list  \nSubmit a YAML flow| flowctl submit flow.yaml  \nDownload artefact| flowctl download <flow-id> <output-name> <local-dir-path>  \nSubscribe to events| flowctl subscribe  \nDescribe a flow| flowctl describe <id>  \nCreate secrets| flowctl secret create <key> <value>  \nUpdate secret| flowctl secret update <key> <value>  \nDelete secret| flowctl secret delete <key>  \n  \n### Notes\n\nSecrets are stored in the server and can be referred to set environment\nvariable values in YAML definition or the Python workflows. This is so you\ndon't have to commit secrets to your repository. They don't however use\nKubernetes secrets, they are set as normal environment variables when workflow\ntasks are deployed as a Job.\n\n## YAML flow definition schema\n\nReference for YAML flow definition. See example.\n\n### Root\n\nKey| Type| Description  \n---|---|---  \nname| string| Name of the flow  \ntasks| list of Task| List of tasks, each task will be deployed as a kubernetes\njob  \n  \n### Task\n\nKey| Type| Description  \n---|---|---  \nname| string| Name of the task  \nimage| string| Docker image for the task  \ndepends| list of string| List of names of other tasks this task depends on,\nthese tasks will be run before this task  \ncmd| list of string| Entry point command the task  \nenv| list of Env| List of environment variables for the task  \ninputs| list of Input| List of inputs to download from dependency tasks  \noutputs| list of Output| List of outputs to upload from the task so it can be\nused by other tasks  \n  \n### Env\n\nKey| Type| Description  \n---|---|---  \nname| string| Name of the environment variable  \nvalue or fromSecret| string| Literal string value if value or name of the\nsecret if fromSecret  \n  \n### Input\n\nKey| Type| Description  \n---|---|---  \nfrom| string| Name of output from a dependency task to be downloaded  \npath| string| The path to which to the input should be downloaded to  \n  \n### Output\n\nKey| Type| Description  \n---|---|---  \nname| string| Name of the output  \npath| string| The path to which to the output will be written to by running\ncmd  \n  \n## Running from source\n\n### Running python flow example from source\n\nThese instructions will allow you to run an example python flow\n(framework/tests/example_flow.py) all from local source without pulling from\nupstream (including the executor). Use this to validate your changes.\nInstructions assume you are at the root of the repo.\n\n  * Install sqlx CLI\n    \n        cargo install sqlx-cli\n\n  * Run a test kubernetes cluster, minio and container registry in local\n    \n        cd flowmium/ make up\n\n  * Watch for pods running in the local cluster\n    \n        cd flowmium/ make watch\n\n  * Run migrations\n    \n        cd flowmium/ sqlx migrate run\n\n  * Run the flowmium server from root of this repo\n    \n        cd flowmium/ export FLOWMIUM_POSTGRES_URL='postgres://flowmium:flowmium@localhost/flowmium' export FLOWMIUM_STORE_URL='http://localhost:9000' export FLOWMIUM_TASK_STORE_URL='http://172.16.238.4:9000' export FLOWMIUM_BUCKET_NAME='flowmium-test' export FLOWMIUM_ACCESS_KEY='minio' export FLOWMIUM_SECRET_KEY='password' export FLOWMIUM_INIT_CONTAINER_IMAGE='docker.io/shnoo28/flowmium:latest' export FLOWMIUM_NAMESPACE=default export KUBECONFIG=./kubeconfig.yaml cargo run --bin flowmium -- server --port 8080\n\n  * Watch flow status using flowctl\n    \n        cd flowmium/ cargo build watch ./target/debug/flowctl list\n\n  * Build and push the example python flow (NOTE: You might want to use a different image name if you running the test for the second time or prune docker images on your machine)\n    \n        cd framework/ docker build . -t py-flow-test docker tag py-flow-test localhost:5180/py-flow-test:latest docker push localhost:5180/py-flow-test:latest\n\n  * Submit the flow to the executor server\n    \n        python3 -m tests --image registry:5000/py-flow-test:latest --cmd 'python3 -m tests' --flowmium-server http://localhost:8080\n\n### Running e2e tests\n\n  * For running e2e tests with init container from upstream\n    \n        make test\n\n  * For running e2e tests with init container from source\n    \n        FLOWMIUM_INIT_CONTAINER_IMAGE_FROM_SOURCE=true make test\n\n### Running unit tests for python framework\n\nRun make test from framework/ path.\n\n## About\n\nWorkflow orchestrator written in rust\n\n### Topics\n\nkubernetes rust workflow jobs k8s\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\nActivity\n\n### Stars\n\n22 stars\n\n### Watchers\n\n3 watching\n\n### Forks\n\n0 forks\n\nReport repository\n\n## Releases\n\nNo releases published\n\n## Packages 0\n\nNo packages published\n\n## Languages\n\n  * Rust 86.0%\n  * Python 11.3%\n  * Makefile 2.1%\n  * Other 0.6%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
