{"aid": "40047557", "title": "Tinybird rebuilt their docs from scratch", "url": "https://www.tinybird.co/blog-posts/new-docs", "domain": "tinybird.co", "votes": 2, "user": "kaycebasques", "posted_at": "2024-04-16 01:39:01", "comments": 0, "source_title": "We rebuilt our docs from scratch. It was worth it.", "source_text": "We rebuilt our docs from scratch. It was worth it.\n\n\ud83d\udd17Dub ships user-facing analytics faster with Tinybird.Read their story.\n\nProductPricingDocsBlog\n\nProductPricingDocsBlogStart building\n\nSign InStart building\n\nApr 15, 2024\n\n# We rebuilt our docs from scratch. It was worth it.\n\nBuilding modern docs begins with a modern tech stack. Here\u2019s how we rebuilt\nour documentation and what it enables us to do for our customers.\n\nProductBuilding In Public\n\nJulia Vallina\n\nFrontend Web Developer\n\nDocumentation is a core part of any developer-focused product. Docs help\ndevelopers learn how to use your product, find inspiration for new use cases\nand solutions, and debug problems they may encounter.\n\nDocumentation can also be a powerful conversion tool for a modern company with\na product-led growth strategy. Good documentation solves problems for users,\nand great documentation inspires non-users by showing them the possibilities\nyour product creates. In our web analytics, it's not uncommon to see our site\nvisitors land on the homepage, check out the pricing, and then immediately\nclick into docs.\n\nIn short, docs matter.\n\nRecently, I worked with my colleague (and all-around Docs wizard) Lucy\nMitchell to revamp Tinybird's docs. We ditched our old docs tech stack and\nrebuilt something new, from scratch. We chose not to use a pre-packaged docs\nframework, instead opting to piece together parts and get exactly what we\nneeded.\n\nIt was totally worth it.\n\n> We recently ditched our old docs stack and built something from scratch. It\n> was totally worth it.\n\n## What got us here won\u2019t get us to the next stop\n\nOur old docs tech stack was based on Sphinx. It was slow and, for lack of a\nbetter term, \"monochromatic\"; just text and images that weren't very\ninspiring. The stack served its purpose as Tinybird grew up, but we needed\nmore for where Tinybird was going.\n\nFor example, we didn't have an easy way to generate \u201crelated\u201d documentation or\npersonalize pages based on a user\u2019s interactions with Tinybird\u2019s website. If\nyou viewed a live coding session on building real-time dashboards over Kafka,\nthe chances are high that you would be interested in Tinybird\u2019s Kafka\nconnector. We think this personalized information should be presented to you\nas you explore the docs.\n\n> We want to create a personalized docs experience that syncs with your\n> product usage in Tinybird.\n\nOur prior stack also didn\u2019t allow for easy integration with Auth0, which meant\nwe couldn't create the \u201clogged-in experience\u201d that we hoped to build so we\ncould personalize content, add easter eggs, show code snippets using your data\nand schemas, etc.\n\nPerhaps most importantly, our old docs tech stack didn\u2019t gel with the\nworkflows of the people who could and should be our most prolific tech\nwriters: our product and engineering team.\n\n## Features we needed to support\n\nWhen we set out to build new docs, we listed the features we wanted and\nsurveyed our customers asking the same. From there, we built a list of\nfeatures we felt should be supported in our docs. Here's the feature list that\nbecame the foundation from which we began to explore our new tech stack:\n\n### Initial (MVP) Features\n\n  * Code snippets\n  * Search\n  * Auto-generated API documentation\n  * Simple image management\n  * Analytics\n  * Dark mode (and more)\n\n### Long-term Features\n\n  * Personalized, logged-in docs experience that persists between the product and docs\n  * Dynamic code snippets that adapt based on your Tinybird data\n  * Copy-to-clipboard functions that auto-populate code snippets with your API keys and tokens\n  * Personalization (\u201cread this next,\u201d \u201crelated documents\u201d, \"bookmarks\", etc.)\n  * AI search\n  * Image optimization\n  * Collapsible nav elements\n  * Content feedback tools\n  * Guides that adapt based on your preferences (e.g. UI vs. CLI workflow)\n\n## Operational requirements\n\nIn addition to our feature list, we asked ourselves a series of questions\nabout how we would maintain our docs:\n\n  * Who is going to maintain this stack? Will there be a specific team, or will everyone be able (or expected) to maintain it? Do those people have the skills to do the job? Me (Julia), a frontend web developer.\n  * Will the site require frequent maintenance? Like, disk resizing, restarting of subsystems, upgrading? Not really.\n  * Is this critical functionality? If so, will it be in on-call alerts? Will it be easy to maintain? Will it fail often? Will it be included in the status pages? Yes, it is critical because it is customer-facing. Failed docs mean bad UX. But, it is a static site and is unlikely to fail, so on-call alerts are not needed.\n  * Will there be migrations? Will the same team handle them? Will the system scale gracefully? No migrations.\n  * Does scalability matter? Yes. We need to be able to scale to upwards of 10x what we already have.\n\n## Checking out the developer docs landscape\n\nWe also took a look at all the docs that inspire us and the tech stacks they\nwere using:\n\nDocs Site| Tech Stack  \n---|---  \nStripe| Rails (?) + Markdoc  \nTailwind| Next.js  \nGitLab Handbook| Hugo + Docsy theme  \nOpenAI| Nuxt.js  \nAstro| Starlight + Astro  \nJest| Docusaurus  \nSegment| Next.js  \nPlaid| Next.js  \nMeilisearch| Next.js + MDX  \nRockset| Readme.com  \nMongoDB| Gatsby  \nPinecone| Readme.com  \n  \nThey all use different tools, but the same approach: static site generator.\nSome use a specific CMS (such as Readme.com), but in general, the trend is to\nuse Markdown for documentation.\n\n> Most of the docs sites we love use a static site generator with Markdown.\n\n## Monorepo or separate repo?\n\nWe also needed to make some decisions about where our docs would live (both\nthe underlying docs platform and the docs content). We\u2019ve always wanted to\nopen source our docs so that our community can be more involved, raising (or\neven fixing) issues directly against the content.\n\nWe could...\n\nWe could...| \u2705 Pros| \u274c Cons  \n---|---|---  \nKeep it in the main Tinybird codebase monorepo.|\n\n  * Product and Engineering can use the same repo as they already use.\n  * In theory, docs remain close to the product.\n\n|\n\n  * This is a huge repo with tons of existing workflows, templates, labels, etc. That's a lot of baggage for non-product teams to deal with.\n  * It wouldn't allow us to open source the docs without moving it anyway.\n\n  \nInclude it in the marketing website mono repo as a new app.|\n\n  * Gives us the option to reuse code and styles from our website.\n  * Simpler repo than our product codebase.\n\n|\n\n  * Has the same downsides as our product codebase.\n  * Still keeps the docs separate from product.\n\n  \nCreate a dedicated repository for it.|\n\n  * Provides the simplest workflow and minimizes overall contribution friction.\n  * Very easy to open source.\n\n|\n\n  * More difficult to reuse things and maintain consistency.\n\n  \n  \nWe decided to use a dedicated repository.\n\nOn balance, the productivity gains we'd get from having a dedicated repo far\noutweighed the slight duplication it would require. A dedicated repo also\nremoves almost all of the technical friction to make the docs open source,\nwhich gives us one less excuse to put it off! \ud83d\ude05\n\n## Which docs language?\n\nOur old stack used reStructuredText (rST). There are some nice things about\nrST, and it made sense given that our docs started life as comments in Python\nfiles back in 2019. But there are also a lot of not-so-nice things about rST.\nThe ecosystem is small, and rST has significantly less adoption in the broader\ndeveloper community than Markdown. It\u2019s pretty easy to find devs who have\nnever even heard of rST, but almost every dev has written at least a few lines\nof Markdown.\n\nWe didn\u2019t need to research it, we knew Markdown was the only way to go...\n\nBut...\n\nWe knew we would want to extend just plain Markdown and add additional\ninteractive elements, so that wasn\u2019t the end of the story.\n\nTo enrich Markdown with custom code we considered two options: MDX and\nMarkdoc.\n\nLanguage| \u2705 Pros| \u274c Cons  \n---|---|---  \nMDX|\n\n  * React community alignment\n\n|\n\n  * Mixes code and docs\n\n  \nMarkdoc|\n\n  * Declarative syntax\n  * Separation of code and docs\n  * Not React specific\n\n|\n\n  * Smaller community\n  * Risk to future support and evolution\n\n  \n  \nUltimately, MDX and Markdoc are both great, and there was no objectively wrong\nanswer. We chose Markdoc because we like the philosophy of keeping code and\ndocumentation separate.\n\n## Which framework?\n\nWe were originally leaning towards Docusaurus, but then we decided to\ninvestigate the pros and cons of the different frameworks we could use.\n\nFramework is a critical decision, perhaps the most important in this process.\nOnce we made the decision and built the site, there was no turning back\nwithout a lot of work. The further we advanced the docs, the more dependent\nwe'd be on our chosen framework.\n\n> Framework was probably our most important decision. Once you build with a\n> framework, it's hard to change.\n\nUltimately, we'd need to choose between a general-purpose framework capable of\nbuilding any website (e.g. Next.js) and a docs-specific static site generator\nwith built-in capabilities specifically for technical documentation (e.g.\nDocusaurus or Starlight).\n\nOur current website is built with Next.js. We're comfortable with it, we know\nits capabilities, and it has a massive community. Plus a bunch of our most\nloved docs sites use it (Segment and Plaid).\n\nDocusaurus is very well-known for being an awesome framework for building\ndocs. It is based on React and supports MDX.\n\nStarlight is built as a library on top of Astro, so technically it would be an\nintermediate solution between both: a general-purpose tool + docs specific.\n\nWe laid out the pros and cons of each:\n\nFramework| \u2705 Pros| \u274c Cons  \n---|---|---  \nNext.js|\n\n  * Flexibility\n  * Same stack as the website\n  * We're comfortable with it\n  * Community\n\n|\n\n  * Build features from scratch\n  * Need to build docs for contribution\n\n  \nDocusaurus|\n\n  * Faster startup\n  * A lot of built-in features\n  * It's own docs for contribution\n\n|\n\n  * Little flexibility\n  * New tool for our stack\n  * Need to learn it\n  * Harder to do auth and personalization\n\n  \nStarlight|\n\n  * Faster startup\n  * A lot of built-in features\n  * It's own docs for contribution\n  * Astro has great performance\n  * Pretty flexible\n\n|\n\n  * New tool for our stack\n  * Need to learn it\n  * Harder to do auth and personalization\n\n  \n  \nAnd we created a side-by-side feature comparison matrix:\n\nFeature| Next.js| Docusaurus| Starlight  \n---|---|---|---  \nAuth0 Integration| \u2705 Easy| \u274c Hard| \u274c Hard  \nSearch| \u2705 Easy| \u2705\u2705 Easier| \u2705\u2705 Easier  \nCustom Styles| \u2705 Easy| \u274c Hard| \u26a0\ufe0f Medium  \nMarkdown Support| \u2705 Yes| \u2705 Yes| \u2705 Yes  \nDark Mode| \u2705 Easy| \u2705\u2705 Built-in| \u2705\u2705 Built-in  \nCustom Snippets| \u2705 Yes| \u2705 Yes| \u2705 Yes  \nPage Chaining| \u26a0\ufe0f From Scratch| \u2705 Built-in| \u2705 Built-in  \nPersonalization| \u2705 Yes| \u274c\u274c No| \u274c Hard (no SSR)  \nMDX Support| \u2705 Yes| \u2705 Yes| \u2705 Yes (but in Astro)  \nMarkdoc Support| \u2705 Yes| \u274c\u274c No| \u2705 Yes but in Astro  \nVersioning| \u26a0\ufe0f From Scratch| \u2705 Yes| \u26a0\ufe0f From Scratch  \n  \nDocusaurus did not meet some of our core requirements. So it was out.\n\nNext.js and Starlight would both be good options to build the documentation of\nour dreams.\n\nWe decided on Next.js, ultimately prioritizing the consistency with our\ncurrent stack, our comfort with it, the flexibility it provides when building\nanything, and the supportive community.\n\n> Next.js gave us a lot of flexibility and we were already comfortable with\n> it, so it seemed like the best choice.\n\n## Infrastructure and styles\n\nWe use Vercel to host and Tailwind CSS for the CSS framework. There\u2019s nothing\ninteresting to say about these decisions. It's what we use for everything, and\nthere was no reason to consider anything else \ud83e\udd37\u2640\ufe0f\n\n## Features\n\nNow we get to the really fun decisions: the main features we want to keep or\nincorporate into this documentation site and the technologies we value using.\nThese are not the only features, rather they are the ones we consider worth\nsharing or investigating to make a more thoughtful and shared decision.\n\n### Authentication\n\nWe use Auth0 in the product, and soon, we will provide a logged-in experience\nin our docs based on Auth0. If you have a Tinybird account and are logged in,\nyou will continue to be logged in when you visit our docs.\n\n### Analytics\n\nWe use Google Tag Manager, to which we have added GA4. This is the spine of\nour marketing analytics stack, and we will continue to use it in our docs.\nEventually, this will enable us to personalize (using Tinybird!) our docs\nbased on your Tinybird website and product activity.\n\n### Images\n\nVercel and Next.js have built-in image optimization features. It\u2019s still\nimportant to keep images small for the sake of the repository. In the long\nterm, we will explore more sophisticated image processing tools.\n\n### Search\n\nPagefind is a perfect match for us. It\u2019s a library that does not require a\ndedicated server, it runs after your static generator, and it outputs a static\nsearch bundle to your generated site. The index is generated for you from your\ngenerated site.\n\nWe considered other options:\n\n  * Meilisearch: A nice, modern alternative to ElasticSearch, it\u2019s an attractive option for building a custom search experience. We decided it was too much for us right now as we have a relatively small amount of content, and it would take a bit longer to ship. If we decide that Pagefind isn\u2019t working out, Meilisearch is our top contender.\n  * Algolia DocSearch: We\u2019ve used this before for FOSS projects but couldn't use it here. Our docs don\u2019t have enough content to justify the cost of the paid Algolia.\n  * Fuse.js: This is a nice lightweight JavaScript library, but it's unclear if the project is still maintained \ud83d\ude2c, and it would require more effort to adapt for Markdown.\n\nI\u2019m particularly proud of our search implementation. It\u2019s fast and it\u2019s a\ngreat developer experience.\n\n0:00\n\n/0:14\n\n### API docs in-code\n\nWe currently generate our REST API documentation automatically from comments\ninside our product Python code. This was one of the reasons we had originally\nselected a Sphinx-based stack for our prior documentation platform.\nUnfortunately, it will be difficult to keep this integration as easy or smooth\nas it is currently. It is one of the things we will \u201csacrifice.\u201d\n\nOur solution here is a bit of a hack. Sphinx compiles this documentation from\nthe comments into HTML fragments, which are then pushed to a known location.\nThe new docs pull them in to build the full page. It\u2019s not ideal, but it works\nand doesn\u2019t impact the user.\n\nAs is typical with small companies, there are many things to do, and migrating\nour REST API to OpenAPI just hasn\u2019t happened yet. We\u2019ll get there, and then we\ncan revisit this.\n\n### Code snippets\n\nBecause of the limitations of Sphinx, our old documentation used iframes for\ncode snippets. We had built a little \"snippet generator\" where we could submit\nany code and it would return a little HTML <iframe> tag to paste into the rST\ndocument.\n\nThat iframe took care of the important basics for code snippets:\n\n  * Copy to clipboard button\n  * Highlighting & formatting for different languages: Tinybird SQL, bash, JSON, etc.\n\nThis was a nice little hack for a while. It didn\u2019t take long to build, and it\nsolved an annoying problem, but it wasn't ideal moving forward. You couldn\u2019t\nread snippets in the doc file, and to modify the snippet you just had to\ncreate a new iframe and replace it. It also wouldn\u2019t work if the docs were\nopen sourced.\n\n> Tinybird SQL is a bit unique because it combines ClickHouse SQL with our\n> dynamic templating library, so we needed a custom code snippet generator for\n> our documentation.\n\nFortunately, the migration away from this was quite simple. We\u2019d already built\na custom React component for the snippet generator that did everything we\nneeded, so we just took that and used it to render the Markdown code blocks\ndenoted by triple backticks (\u201c```\u201d). The most time-consuming part was just\ncopying all the code from inside all the existing snippets and pasting it into\nthe new Markdown.\n\n### Accessibility\n\nOur new documentation ensures that accessibility is taken into account. At the\nmoment, we comply with level AA.\n\nSome of the initial measures we have taken are:\n\n  * Adding a dark mode option\n  * Supporting keyboard navigation\n  * Including some standard shortcuts, such as Ctrl/\u2318 + k to open the search.\n\nAs part of our documentation style guide, we ensure that images and videos\nalways have alt text or captions describing what is seen. For custom\ncomponents, we rely on React Aria Components.\n\nIn the future, we are aiming for level AAA support.\n\n## What\u2019s next?\n\nWe have a huge wish list for features for our docs, including:\n\n  * AI-powered help: chatbots, GPT-powered prompts, and more.\n  * Image optimization for resizing, compression, and hosting\n  * Personalization across our site based on interactions a user has had on our various web properties as well as within the product\n  * Feature flag support. As customers are added to pre-release features using feature flags, that content is automatically shown for them in our docs\n  * Versioning for different versions of our API and CLI\n\n## Check out our docs!\n\nWant to see the fruits of our labor? Check out our documentation and let us\nknow what you think.\n\nAnd if, while you're reading, you realize that Tinybird is exactly what you've\nbeen missing in your life, then you should sign up. It's free to start, with\nno credit card required and no time limit. If you have questions or feedback,\nyou can join our public Slack community and ask away.\n\nDo you like this post?\n\nRelated posts\n\nReal-time Data\n\nReal-time Data Visualization: How to build faster dashboards\n\nCameron Archer\n\nContent Lead\n\nAug 08, 2023\n\nProduct\n\nA new way to create intermediate Data Sources in Tinybird\n\nTinybird\n\nTeam\n\nJun 15, 2023\n\nProduct\n\nExport data from Tinybird to Amazon S3 with the S3 Sink\n\nTinybird\n\nTeam\n\nMar 21, 2024\n\nTech\n\nTinybird: A ksqlDB alternative when stateful stream processing isn't enough\n\nAlasdair Brown\n\nDevRel Lead\n\nJul 27, 2023\n\nProduct\n\nTo the limits of SQL... and beyond\n\nDavid Margulies\n\nSales Engineer\n\nJul 15, 2022\n\nProductOur Beliefs\n\nAutomating data workflows with plaintext files and Git\n\nAlberto Romeu\n\nBackend Developer\n\nOct 23, 2023\n\nDev Q&As\n\nChatting GraphQL with Jamie Barton of Grafbase\n\nTinybird\n\nTeam\n\nApr 24, 2023\n\nReal-time Data\n\nWhat it takes to build a real-time recommendation system\n\nJoe Karlsson\n\nDeveloper Advocate\n\nJul 25, 2023\n\nClickHouse\n\nWe launched an open source ClickHouse Knowledge Base\n\nTinybird\n\nTeam\n\nOct 11, 2022\n\nOur Beliefs\n\nThe definition of real-time data\n\nAlasdair Brown\n\nDevRel Lead\n\nJul 29, 2022\n\n### Build fast data products, faster.\n\nTry Tinybird and bring your data sources together and enable engineers to\nbuild with data in minutes. No credit card required, free to get started.\n\nStart buildingRequest a demo\n\nNeed more? Contact sales for Enterprise support.\n\nSpain Calle del Dr. Fourquet, 27 28012 Madrid\n\nUSA 41 East 11th Street 11th floor New York, NY 10003\n\n#### Company\n\nProductPricingROI CalculatorAbout UsShopCareersRequest a demo\n\n#### Resources\n\nDocsBlogCommunityLive CodingCustomer StoriesRSS Feed\n\n#### Integrations\n\nAmazon S3Kafka Data StreamsGoogle Cloud StorageGoogle\nBigQuerySnowflakeConfluent\n\n#### Use cases\n\nIn-Product AnalyticsOperational IntelligenceRealtime PersonalizationAnomaly\nDetection & AlertsUsage Based PricingSports Betting/GamingSmart Inventory\nManagementManaged ClickHouse\n\nAll systems operational\n\nCopyright \u00a9 2024 Tinybird. All rights reserved\n\nTerms & conditionsCookiesSecurity\n\nSpain Calle del Dr. Fourquet, 27 28012 Madrid\n\nUSA 41 East 11th Street 11th floor New York, NY 10003\n\nWe use our own cookies on our websites to enhance your experience and analyze\nour traffic. By clicking \u201cAllow all\u201d or turning an option on in Cookie\nPreferences, you agree to this, as outlined in our Cookie Policy\n\n", "frontpage": false}
