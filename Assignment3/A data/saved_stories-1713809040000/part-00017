{"aid": "40112095", "title": "E-Commerce Enterprise Search with Apache Solr", "url": "https://unchained.shop/blog/apache-solr-integration", "domain": "unchained.shop", "votes": 1, "user": "kaufmae", "posted_at": "2024-04-22 07:25:11", "comments": 0, "source_title": "How Apache Solr Enables Precise Product Search on Professional Web Shops - Unchained Commerce", "source_text": "How Apache Solr Enables Precise Product Search on Professional Web Shops -\nUnchained Commerce\n\nTech\n\nMikael Araya, 3/17/2024\n\n# How Apache Solr Enables Precise Product Search on Professional Web Shops\n\nGuide to Boosting Your Site's Search Capabilities and Driving Sales by\nconnecting Apache Solr with Unchained Engine.\n\n## Introduction\n\nIn the highly competitive world of e-commerce, providing a seamless and\nefficient shopping experience for customers is paramount to success. One of\nthe most important aspects of this experience is having a strong search\nfunction that allows customers to easily find the products they are looking\nfor. Research shows that customers who use site search are more likely to make\na purchase and have a higher average order value than those who do not.\n\nHowever, implementing an efficient and accurate search function on an\ne-commerce site can be challenging, particularly for e-commerce backends with\nlarge products. That's where Solr comes in. Solr is a search engine built on\ntop of Apache Lucene, which uses advanced algorithms and data indexing\ntechniques to deliver fast, accurate, and relevant search results.\n\nSolr is designed to handle the unique challenges of e-commerce and other\ncontent-heavy websites, making it an excellent solution for businesses looking\nto improve their site's search capabilities. By using Solr, e-commerce\nbusinesses can provide their customers with a user-friendly and efficient\nsearch experience, leading to increased customer satisfaction and sales.\n\nIn this article, we'll explore how Solr can help you boost your site's search\ncapabilities and drive sales. We'll start by explaining what Solr is and how\nit works, including its architecture and components. We'll then discuss the\nspecific ways Solr can help improve product search on unchained e-commerce\nbackends, such as through faceted search and query suggestions. Additionally,\nwe'll cover the benefits of using Solr for e-commerce searches, including its\nscalability and fault tolerance.\n\nWe'll also provide practical tips and best practices for implementing Solr on\nyour site, including steps for data indexing and configuration, as well as how\nto optimize Solr performance and troubleshoot common issues. Furthermore,\nwe'll offer case studies of e-commerce sites that have successfully used Solr\nto improve their search capabilities and drive sales.\n\nBy the end of this article, you'll have a better understanding of how Solr can\nhelp improve your site's search capabilities and drive sales. You'll also have\nthe practical knowledge and resources to implement Solr on your site, making\nit easier for your customers to find and purchase the products they want.\n\n## What is Solr and how does it work?\n\nSolr is a highly scalable, fault-tolerant, and open-source search engine\ndesigned to handle complex data structures, including those found in\ne-commerce and content-heavy websites. Solr is built on top of Apache Lucene,\nwhich is a powerful search engine library that provides the foundational\nbuilding blocks for Solr's capabilities.\n\nOne of the key benefits of Solr is its ability to provide fast and accurate\nsearch results. Solr achieves this through a combination of data indexing and\nquerying techniques designed to optimize search performance. When data is\nindexed in Solr, it is first analyzed to identify the most relevant and\nimportant fields, such as product names, descriptions, and categories. Solr\nthen creates an inverted index, which is a data structure that maps keywords\nto the documents that contain them. This process is called tokenization and it\nconverts text into individual terms, known as tokens, which are stored in the\ninverted index. When a user enters a search query, Solr uses the inverted\nindex to quickly identify the documents that are most relevant to the query.\nSolr then ranks the results based on a variety of factors, including keyword\nfrequency, proximity, and relevance. This process is called scoring and it\nhelps ensure that the most relevant results are returned first.\n\nAnother key feature of Solr is its support for faceted search, which allows\nusers to refine their search results based on specific criteria. For example,\na user might search for \"red shoes\" and then use a faceted search to filter\nthe results by size, brand, or price range. Solr achieves this by using a\ntechnique called faceting, which involves grouping search results into\ncategories based on specific fields or attributes of the data. Faceting can be\napplied to both structured and unstructured data, making it a powerful tool\nfor e-commerce sites that have complex data structures.\n\nIn addition to faceted search, Solr also provides support for spell-checking\nand query suggestions. When a user enters a search query that contains a\nmisspelled word, Solr can suggest alternative spellings or related keywords\nbased on the data it has indexed. Solr achieves this through a combination of\ntechniques, including fuzzy matching and phonetic analysis. This helps ensure\nthat users can still find what they are looking for, even if they make a\nmistake when entering their search query.\n\nSolr also offers a range of configuration options and customization\ncapabilities, which allow businesses to tailor the search experience to their\nspecific needs. For example, businesses can configure Solr to weight certain\nfields more heavily in search results, or to prioritize certain products or\ncategories over others. Solr can also be integrated with a variety of third-\nparty tools and services, including content management systems, analytics\nplatforms, headless e-commerce engines like unchained and more.\n\n## Benefits of Using Solr for E-Commerce Search\n\nSolr is a powerful search engine that can significantly enhance the search\ncapabilities of e-commerce websites. In this section, we will discuss the\nbenefits of using Solr for e-commerce searches.\n\n  1. More Accurate Search Results: Solr's advanced search algorithms enable it to deliver more accurate search results compared to traditional search engines. This is because Solr uses data indexing and querying to match user queries with relevant products. Solr's faceted search feature also allows users to filter search results based on specific product attributes such as color, price, and size.\n\n  2. Scalability and Fault-tolerance: Solr is designed to be highly scalable and fault-tolerant, making it a reliable choice for large e-commerce sites. Solr can handle large volumes of data and can be easily scaled up or down depending on the website's needs. Additionally, Solr's fault tolerance ensures that search functionality is not disrupted in case of system failures or downtime.\n\n  3. Multilingual Search Capabilities: With Solr, you can implement multilingual search capabilities on your e-commerce site, which can help attract and retain customers from diverse linguistic backgrounds. Solr provides support for multiple languages out of the box and allows for advanced language processing features such as stemming, synonyms, and more. It understands the language that it indexes gramatically. So a search for \"some books for\" will stemm to \"book\" and show you the same results as searching for \"book\". It can also split up German words like \"Massgeschneidert\", indexing it as \"mass\" \"schneidern\" for example so it can also find text that contains \"ein auf mass geschnidertes hemd\".\n\n  4. Customizability and Flexibility: Solr is highly customizable and flexible, allowing you to tailor the search experience to your specific e-commerce site requirements. You can customize the search algorithm, indexing, and ranking techniques to ensure that the most relevant products appear at the top of search results.\n\n## A Short Introduction to Unchained Engine for E-Commerce\n\nUnchained E-commerce Engine is an open-source e-commerce platform that is\ndesigned to provide a flexible and scalable solution for online retailers. It\nwas developed by a team of experienced e-commerce professionals with the goal\nof providing a platform that is easy to use, customizable, and capable of\nhandling high levels of traffic and transaction volume.\n\nOne of the key features of the Unchained E-commerce Engine is its modular\narchitecture and the strict \"code is law\" methodology, which allows retailers\nto add and remove functionality as needed and implement even the most complex\ndiscounting and pricing logics you can think of without boundaries.\n\nThis makes it easy to customize the platform to meet the specific needs of a\nbusiness, and also ensures that the platform can be easily scaled up or down\nas traffic and transaction volume fluctuates.\n\n## How Solr Improves Product Search on Unchained E-commerce Backend\n\nUnchained engine is a code-first e-commerce engine that is designed to handle\nmost of an e-commerce transactional needs. However, it only provides full-text\nsearch out of the box. This means that the search capabilities of an unchained\ne-commerce backend can be limited, which can negatively impact the user\nexperience and ultimately lead to lost sales.\n\nThis is where Solr comes in as a powerful search engine that is specifically\ndesigned to address the challenges of implementing search functionalities on\nunchained e-commerce backends. Solr provides a range of features that can\nimprove the search capabilities of an unchained e-commerce backend and enhance\nthe overall user experience.\n\nOne of the key benefits of using Solr with an unchained e-commerce backend is\nits advanced spell-checking and query suggestion capabilities. With Solr,\nusers can find what they are looking for even if they make a spelling mistake\nor use a synonym. This is particularly important for e-commerce sites that\nhave a large and diverse product catalog, as users may use different terms to\ndescribe the same product.\n\nIn addition, Solr supports a range of customization options that can further\nimprove search accuracy. For example, businesses can boost or prioritize\ncertain products or categories in search results, which can be particularly\nuseful for promoting seasonal products or best-sellers. This level of\ncustomization can help businesses to provide a more personalized and relevant\nsearch experience for their customers. Another powerful feature of Solr is its\nfaceted search capabilities, which allow users to filter search results based\non different attributes such as price, brand, or color. This can help users to\nquickly and easily find the products they are looking for, even if they are\nunsure of the exact product name or description.\n\nSolr's scalability and fault tolerance also makes it a reliable choice for\nlarge e-commerce sites. As the size of an e-commerce site grows, so does the\ncomplexity of the search queries and indexing required to support it. Solr's\ndistributed architecture allows it to scale with the growing demands of an\ne-commerce site, while its fault tolerance ensures that search functionality\nremains available even in the event of hardware or software failures.\n\nFinally, Solr has a proven track record of success in improving the search\ncapabilities of e-commerce businesses using the unchained engine as their\nbackend. For example, Publicare a medical supply retailer implemented Solr to\nimprove its site search and saw an increase in conversion rates. These\ndemonstrate the value of implementing Solr to improve the search capabilities\nof an unchained e-commerce backend.\n\nIn summary, Solr is a powerful search engine that can greatly enhance the\nsearch capabilities of an unchained e-commerce backend. Its advanced spell-\nchecking and query suggestion capabilities, faceted search options,\nscalability and fault-tolerance, and proven track record of success make it an\nexcellent choice for e-commerce businesses looking to improve their search\nfunctionality and drive sales.\n\n## How to Implement Solr on Your Unchained engine backed E-commerce Site\n\nImplementing Solr on your unchained engine-backed e-commerce site involves\nseveral steps that require careful planning and consideration. By organizing\nyour product data into a format that Solr can understand and writing a filter\nplugin to integrate the power of Solr into your unchained engine, you can\nprovide more accurate and relevant search results, which can increase\nengagement and drive sales.\n\nThe first step in implementing Solr is to decide whether to use a hosted Solr\nservice or set up Solr on your own servers. Hosted services can be a good\noption for smaller e-commerce businesses or those with limited technical\nresources, as they allow you to outsource the infrastructure and maintenance\nof your search engine. However, larger businesses with more complex\nrequirements may prefer to set up Solr on their own servers for greater\ncontrol and customization.\n\nOnce you've decided on your implementation approach, the next step is to\ncreate a Solr core, which is a collection of data that Solr will use to\ngenerate search results. This can be done through the Solr web interface,\nthrough a command-line tool, or using Solr API endpoints. You'll need to\nspecify the schema for your data, which defines the fields and data types that\nwill be indexed by Solr. In this article, we will use the Solr API approach to\nmanage the Solr instance and below you will find some code snippets used to\nperform just that.\n\n    \n    \n    const { SOLR_URL } = process.env; const createCollection = async () => { const url = `${SOLR_URL}/api/collections`; const response = await fetch(url, { method: 'POST', mode: 'cors', cache: 'no-cache', credentials: 'same-origin', headers: { 'Content-Type': 'application/json', }, redirect: 'follow', referrer: 'no-referrer', body: JSON.stringify({ create: { name: 'products', config: 'publicare', numShards: 1 }, }), }); return response.json(); };\n\nThe above snippet will create a collection of products to store indexes of\nproduct on Solr instance. In this case, we are using the create action\navailable in Solr.\n\nBecause unchained provides a graphql API endpoint we will be using graphql\ntools to extract the product information from the engine.\n\nAfter creating the core, you'll need to index your data. This involves\nextracting and organizing the product information stored in your unchained\ne-commerce engine database into a format that Solr can understand. There are\nseveral ways to do this, including using a data import handler or a custom\nscript to send the data to the configured Solr endpoint. You'll also need to\nconfigure the data source, which tells Solr where to find the data to be\nindexed. Since we will be using the products data store we created above for\nthis case.\n\n    \n    \n    import gql from 'graphql-tag'; import { linkToExecutor, createServerHttpLink } from '@graphql-tools/links'; import localizedProducts from './queries/localizedProducts'; const BATCH_SIZE = 250; const link = createServerHttpLink({ uri: process.env.GRAPHQL_ENDPOINT, }); const request = linkToExecutor(link); const { SOLR_URL } = process.env; const updateSolr = async (body: any) => { if (!SOLR_URL) return false; const response = await fetch(`${SOLR_URL}/solr/products/update?commit=true`, { method: 'POST', mode: 'cors', cache: 'no-cache', credentials: 'same-origin', headers: { 'Content-Type': 'application/json', }, redirect: 'follow', referrer: 'no-referrer', body: JSON.stringify(body), }); if (response.status !== 200) { return false; } return response.json(); }; async function productsBatch(offset = 0) { const { data } = await request({ document: gql(localizedProducts), variables: { limit: BATCH_SIZE, offset, filter: { published: true, title: { $ne: '' }, }, frFilter: { published: true, title_fr: { $ne: '' }, }, itFilter: { published: true, title_it: { $ne: '' }, }, }, }); const prepared = data.map((item: any) => { return { id: item._id, collection_s: 'products', title_txt_de: item?.de?.newsletterTitle, subtitle_txt_de: item?.de?.subTitle, slug_txt_de: item?.de?.slug, title_txt_fr: item?.fr?.newsletterTitle, subtitle_txt_fr: item?.fr?.subTitle, slug_txt_fr: item?.fr?.slug, title_txt_it: item?.it?.newsletterTitle, subtitle_txt_it: item?.it?.subTitle, slug_txt_it: item?.it?.slug, last_modified: new Date().toISOString(), }; }); const importedIDs = await updateSolr(prepared as any); if (data.length) { return [...importedIDs, ...(await productsBatch(offset + BATCH_SIZE))]; } return importedIDs; } const updateProductsSearchIndex = async () => { await productsBatch(0); };\n\nOnce your data is indexed, you'll need to configure Solr to ensure that it is\noptimized for your specific e-commerce site's needs. This may involve\nconfiguring search fields, synonyms, stop words, and other parameters that\naffect how Solr processes search queries. It's important to test and refine\nyour Solr configuration to ensure that it produces accurate and relevant\nsearch results.\n\nTo optimize Solr performance, there are several best practices you can follow.\nOne tip is to monitor search analytics to identify patterns and trends in user\nbehavior, which can help you fine-tune query parameters and boost certain\nproducts or categories in search results. Another tip is to use caching to\nreduce query times and improve overall search performance. You may also want\nto consider implementing features like faceted search, spell-checking, and\nquery suggestions to improve the user experience and increase engagement.\n\nThere are many resources available for learning more about Solr and\ntroubleshooting common issues. The Apache Solr website provides comprehensive\ndocumentation, tutorials, and forums where users can ask questions and get\nsupport. Additionally, there are many online courses and communities dedicated\nto Solr, such as Solr Training, which offers in-depth training on Solr\nimplementation and optimization. Finally, after indexing and optimizing Solr,\nyou will need to create a custom Filter plugin to extend the default unchained\nfull-text-based product search plugin to use Solr instead.\n\n    \n    \n    import { FilterDirector, FilterAdapter } from '@unchainedshop/core-filters'; import type { IFilterAdapter } from '@unchainedshop/types/filters'; import doProductsSearch from '../lib/search/doProductsSearch'; const SolrSearch: IFilterAdapter = { ...FilterAdapter, key: 'solr-products-search', label: 'Solr Product search', version: '1.0', orderIndex: 1, actions: (params) => { return { ...FilterAdapter.actions(params), async searchProducts({ productIds }) { const { queryString } = params.searchQuery; if (!queryString) return productIds; const language = params.localeContext?.language || 'de'; const docs = await doProductsSearch(queryString, language, { log: this.log, }); return docs.map((doc) => doc.id); }, }; }, }; FilterDirector.registerAdapter(SolrSearch);\n\n## Conclusion\n\nIn conclusion, implementing an efficient search function is critical for any\ne-commerce site looking to drive sales and retain customers. While there are\nmany search engines available in the market, Solr stands out as a powerful\nopen-source search engine that provides fast and accurate search results, even\nwhen dealing with large amounts of data.\n\nOne of the main advantages of Solr is its highly customizable search\nfunctionality. With Solr, you can easily configure your search parameters to\nprovide highly relevant results to your users. It provides advanced search\nfeatures, such as faceted search, which allows your users to easily filter and\nrefine their search results based on specific attributes like price, category,\ncolor, and more.\n\nAdditionally, Solr offers powerful spell-checking and query suggestion\nfeatures that can help users find what they're looking for even if they\nmisspell a keyword or use a term that is not commonly used. This helps improve\nthe user experience and ultimately drives more sales.\n\nAnother important benefit of Solr is its scalability. With Solr, you can\neasily index and search large volumes of data in real time, providing fast and\naccurate search results to your users, even during peak traffic periods.\n\nSetting up and configuring Solr may require some technical knowledge, but\nthere are many resources available online that can help you get started. Once\nset up, Solr offers a range of tools for monitoring and optimizing your search\nperformance, such as query analysis and optimization, monitoring search\nanalytics, and tuning query parameters.\n\nIn summary, Solr is a highly customizable, scalable, and powerful search\nengine that can help e-commerce sites improve their search capabilities, drive\nmore sales, and ultimately increase customer loyalty. As a CTO, investing in\nSolr can be a valuable addition to your e-commerce tech stack. Take the time\nto research and explore Solr, and see how it can help take your e-commerce\nsite's search capabilities to the next level.\n\nThis work is licensed under a Creative Commons Attribution 4.0 International\nLicense.\n\nTo the blog overview\n\n##### Solutions\n\nB2BRetailnew\ud83c\udfab \ud83c\udf9f\ufe0f TicketingBlockchain\n\n##### Products\n\nUnchained EngineOperational ServicesProfessional ServicesUnchained Admin\nUIUnchained CloudUnchained Box\n\n##### Company\n\nAboutCareersBlogContact\n\n##### Resources\n\nWhat is Headless?Success StoriesVeloplus\nStoryFeaturesMigrationsPartnersGlossary\n\n##### Developers\n\nDocumentation \ud83d\udd17FAQQuick SampleGitHub \ud83d\udd17\n\nService Desk \ud83d\udd17ImprintData Protection\n\n", "frontpage": false}
