{"aid": "40112016", "title": "101: Matt Godbolt", "url": "https://microarch.club/episodes/101/", "domain": "microarch.club", "votes": 2, "user": "mariuz", "posted_at": "2024-04-22 07:04:58", "comments": 0, "source_title": "101: Matt Godbolt | Microarch Club", "source_text": "101: Matt Godbolt | Microarch Club\n\n# 101: Matt Godbolt\n\nDate: 2024-04-10\n\nDuration: 02:29:23\n\nMatt Godbolt joins to talk about early microprocessors, working in the games\nindustry, performance optimization on modern x86 CPUs, and the compute\ninfrastructure that powers the financial trading industry. We also discuss\nMatt\u2019s work on bringing YouTube to early mobile phones, and the origin story\nof Compiler Explorer, Matt\u2019s well-known open source project and website.\n\nMatt\u2019s Site: https://xania.org/\n\nMatt on LinkedIn: https://www.linkedin.com/in/godbolt/\n\nMatt on X: https://twitter.com/mattgodbolt\n\nMatt on Mastodon: https://hachyderm.io/@mattgodbolt\n\nMatt on Bluesky: https://bsky.app/profile/mattgodbolt.bsky.social\n\n### Show Notes\n\n  * Welcome Matt (00:01:51)\n  * Jonathan Yu Mastodon Post (00:02:30)\n\n    * https://mastodon.social/@jawnsy/111933302725552765\n  * Matt\u2019s Introduction to Computing (00:03:42)\n  * Sinclair ZX Spectrum (00:04:04)\n\n    * https://en.wikipedia.org/wiki/ZX_Spectrum\n  * BASIC (00:04:42)\n\n    * https://en.wikipedia.org/wiki/BASIC\n  * Z80 Processor (00:05:33)\n\n    * https://en.wikipedia.org/wiki/Zilog_Z80\n  * Playing Computer Games (00:06:08)\n  * Writing Computer Games (00:06:44)\n  * Writing Assembly with a Pencil and Paper (00:07:51)\n  * BBC Micro (00:09:53)\n\n    * https://en.wikipedia.org/wiki/BBC_Micro\n  * Microcomputers (00:10:02)\n\n    * https://en.wikipedia.org/wiki/Microcomputer\n  * Acorn Computers (00:11:02)\n\n    * https://en.wikipedia.org/wiki/Acorn_Computers\n  * BBC Master (00:11:56)\n\n    * https://en.wikipedia.org/wiki/BBC_Master\n  * MOS 6502 (00:12:02)\n\n    * https://en.wikipedia.org/wiki/MOS_Technology_6502\n  * RISC (00:12:11)\n\n    * https://en.wikipedia.org/wiki/Reduced_instruction_set_computer\n  * Type-In Programs (00:13:09)\n\n    * https://en.wikipedia.org/wiki/Type-in_program\n  * BBC BASIC Assembler (00:14:24)\n\n    * https://www.bbcbasic.co.uk/bbcwin/manual/bbcwina.html\n  * Acorn Archimedes (00:14:39)\n\n    * https://en.wikipedia.org/wiki/Acorn_Archimedes\n  * 6502 Unspecified Opcodes (00:15:11)\n\n    * https://www.masswerk.at/nowgobang/2021/6502-illegal-opcodes\n  * Apple I & II (00:18:24)\n\n    * https://en.wikipedia.org/wiki/Apple_I\n    * https://en.wikipedia.org/wiki/Apple_II\n  * Nintendo Entertainment System (NES) (00:18:26)\n\n    * https://en.wikipedia.org/wiki/Nintendo_Entertainment_System\n  * Bender (Futurama) (00:18:32)\n\n    * https://en.wikipedia.org/wiki/Bender_(Futurama)\n  * The Terminator (00:18:35)\n\n    * https://en.wikipedia.org/wiki/The_Terminator\n    * https://www.apl2bits.net/2016/07/18/terminator-6502/\n  * 6502 vs. Z80 Price Comparison (00:18:50)\n  * 6502 vs. Z80 Microarchitecture (00:21:13)\n  * Z80 Rotate Instruction (00:24:08)\n\n    * https://jgmalcolm.com/z80/advanced/shif\n  * Read-Modify-Write Instructions (00:24:24)\n\n    * https://en.wikipedia.org/wiki/Read%E2%80%93modify%E2%80%93write\n  * Programmable Logic Array (PLA) (00:25:29)\n\n    * https://en.wikipedia.org/wiki/Programmable_logic_array\n  * Memory Mapped Hardware (00:26:04)\n\n    * https://en.wikipedia.org/wiki/Memory-mapped_I/O_and_port-mapped_I/O\n  * Encrypting Games (00:26:18)\n  * Obfuscating Decryption using Unspecified Instructions (00:28:29)\n  * Writing a 6502 Simulator in 6502 Assembly (00:30:08)\n  * Writing a 6502 Emulator in Javascript (00:30:27)\n\n    * https://github.com/mattgodbolt/jsbeeb\n  * Zero Page Addressing (00:31:13)\n\n    * https://en.wikipedia.org/wiki/Zero_page\n  * Non-Maskable Interrupts (NMI) (00:32:55)\n\n    * https://en.wikipedia.org/wiki/Non-maskable_interrupt\n  * 6502 Addressing Modes (00:33:43)\n\n    * https://www.nesdev.org/obelisk-6502-guide/addressing.html\n  * Register Windows (00:34:29)\n\n    * https://en.wikipedia.org/wiki/Register_window\n  * Microarch Club Episode with Robert Garner (00:34:45)\n\n    * https://microarch.club/episodes/11/\n  * The Rising Complexity of Computing (00:35:29)\n  * Tom Lyon (00:36:33)\n\n    * https://akapugs.blog/\n  * Sun Microsystems (00:36:37)\n\n    * https://en.wikipedia.org/wiki/Sun_Microsystems\n  * Abstractions as a Tool (00:37:06)\n  * Going to University (00:38:17)\n  * Studying Physics (00:38:45)\n  * Distance Learning University Lectures (00:39:37)\n  * Discovering the Internet (00:40:28)\n  * Atari (00:41:08)\n\n    * https://en.wikipedia.org/wiki/Atari\n  * Amiga (00:41:09)\n\n    * https://en.wikipedia.org/wiki/Amiga\n  * The Acorn RISC Machine (The First ARM Chip) (00:41:20)\n\n    * https://arstechnica.com/features/2020/12/how-an-obscure-british-pc-maker-invented-arm-and-changed-the-world/\n  * Bill Mensch (00:41:57)\n\n    * https://en.wikipedia.org/wiki/Bill_Mensch\n  * Internet Relay Chat (IRC) (00:44:21)\n\n    * https://en.wikipedia.org/wiki/IRC\n  * Writing an IRC Client in ARM Assembly (00:44:40)\n\n    * https://github.com/mattgodbolt/IRClient\n  * Learning C (00:45:52)\n  * GCC (00:46:36)\n\n    * https://gcc.gnu.org/\n  * Multi-User Dungeon (MUD) (00:46:47)\n\n    * https://en.wikipedia.org/wiki/Multi-user_dungeon\n  * Applying to a Games Company (00:48:02)\n  * Argonaut Games (00:50:07)\n\n    * https://en.wikipedia.org/wiki/Argonaut_Games\n  * Super FX Chip (00:50:30)\n\n    * https://en.wikipedia.org/wiki/Super_FX\n  * Super Nintendo Entertainment System (SNES) (00:50:34)\n\n    * https://en.wikipedia.org/wiki/Super_Nintendo_Entertainment_System\n  * Jez San (00:50:52)\n\n    * https://en.wikipedia.org/wiki/Jez_San\n  * Direct Memory Access (DMA) (00:52:02)\n\n    * https://en.wikipedia.org/wiki/Direct_memory_access\n  * Argonaut RISC Core (ARC) (00:52:14)\n\n    * https://en.wikipedia.org/wiki/ARC_(processor)\n  * Beginning of Games Consoles (00:52:39)\n  * Hitachi SH-4 (00:53:00)\n\n    * https://en.wikipedia.org/wiki/SuperH\n  * Dreamcast (00:53:04)\n\n    * https://en.wikipedia.org/wiki/Dreamcast\n  * Multiple Issue (00:53:22)\n\n    * https://www.cs.umd.edu/~meesh/411/CA-online/chapter/multiple-issue-processors-i/index.html\n  * Pipelining (00:53:25)\n\n    * https://en.wikipedia.org/wiki/Instruction_pipelining\n  * Argonaut Games Red Dog: Superior Firepower (00:54:06)\n\n    * https://github.com/mattgodbolt/reddog\n  * Instruction Level Parallelism (ILP) (00:55:13)\n\n    * https://en.wikipedia.org/wiki/Instruction-level_parallelism\n  * Out-of-Order Processing (00:55:35)\n\n    * https://en.wikipedia.org/wiki/Out-of-order_execution\n  * Intel U-Pipe & V-Pipe (00:55:38)\n\n    * http://ps-2.kev009.com/eprmhtml/eprmx/h12204.htm\n  * Argonaut Blazing Renderer (BRender) (00:55:51)\n\n    * https://blazingrender.net/\n  * Intel Pentium Pro (00:57:03)\n\n    * https://en.wikipedia.org/wiki/Pentium\n  * Intel Pentium Klamath (00:57:14)\n\n    * https://en.wikipedia.org/wiki/Pentium_II#Klamath_(80522)\n  * Intel VTune (00:58:02)\n\n    * https://en.wikipedia.org/wiki/VTune\n  * Dual-Issue (00:58:38)\n  * Very Long Instruction Word (VLIW) (00:58:40)\n\n    * https://en.wikipedia.org/wiki/Very_long_instruction_word\n  * Data Hazards (00:58:48)\n\n    * https://en.wikipedia.org/wiki/Hazard_(computer_architecture)\n  * Carl Graham (00:59:01)\n  * Writing Games for Multiple Platforms (01:00:01)\n  * PlayStation (01:00:58)\n\n    * https://en.wikipedia.org/wiki/PlayStation\n  * Xbox (01:01:20)\n\n    * https://en.wikipedia.org/wiki/Xbox\n  * PlayStation 2 (01:01:59)\n\n    * https://en.wikipedia.org/wiki/PlayStation_2\n  * DirectX (01:02:43)\n\n    * https://en.wikipedia.org/wiki/DirectX\n  * Component Object Model (COM) (01:02:55)\n\n    * https://en.wikipedia.org/wiki/Component_Object_Model\n  * Porting from Xbox to PlayStation 2 (01:04:55)\n  * Blending Modes (01:06:45)\n\n    * https://www.khronos.org/opengl/wiki/Blending\n  * Current State of Game Engine Development (01:07:51)\n  * Unreal Engine (01:07:58)\n\n    * https://en.wikipedia.org/wiki/Unreal_Engine\n  * Deciding to Start a Company (01:08:49)\n  * Optimizing C++ Build Time (01:09:48)\n  * ProFactor (01:10:56)\n  * Rockstar Games (01:11:45)\n\n    * https://en.wikipedia.org/wiki/Rockstar_Games\n  * Developing a C++ Code Formatter (01:13:03)\n  * Applying to Google (01:13:48)\n  * DeepMind (01:14:17)\n\n    * https://en.wikipedia.org/wiki/Google_DeepMind\n  * Making YouTube Work on Early Mobile Phones (01:14:27)\n  * Hardware MPEG Decoders (01:15:07)\n\n    * https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC_products_and_implementations#Decoding\n  * YouTube Infrastructure (01:15:33)\n  * J2ME (01:16:34)\n\n    * https://en.wikipedia.org/wiki/Java_Platform,_Micro_Edition\n  * Android (01:16:44)\n\n    * https://en.wikipedia.org/wiki/Android_(operating_system)\n  * Working at Large vs. Small Companies (01:17:02)\n  * Learning at Google Scale (01:18:00)\n  * Moving to Finance Industry (01:20:23)\n  * Moving to Chicago (01:21:50)\n  * Performance Optimization in Finance (01:21:59)\n  * Reverse Engineering How Intel Processors Work (01:24:08)\n  * Resources for Performance Analysis (01:25:28)\n  * Agner Fog (01:25:42)\n\n    * https://www.agner.org/optimize/\n  * Bjarne Stroustrup: Tour of C++ (01:26:39)\n\n    * https://www.stroustrup.com/tour2.html\n  * Charles Petzold: The Annotated Turing (01:27:13)\n\n    * https://en.wikipedia.org/wiki/The_Annotated_Turing\n  * Register Rename Buffer (01:28:31)\n\n    * https://en.wikipedia.org/wiki/Register_renaming\n  * Agner Fog\u2019s Open Source Tooling (01:28:46)\n\n    * https://github.com/mattgodbolt/agner\n  * uops.info (01:29:02)\n\n    * https://uops.info/\n  * Branch Predictor Reverse Engineering (01:30:19)\n\n    * https://en.wikipedia.org/wiki/Branch_predictor\n  * Branch Target Buffer (01:31:54)\n\n    * https://one2bla.me/cs6290/lesson4/branch-target-buffer.html\n  * Meltdown & Spectre Paper Attribution (01:32:57)\n\n    * https://meltdownattack.com/\n    * https://xania.org/201602/bpu-part-two\n  * Compute Infrastructure in Finance (01:33:29)\n  * Low Latency Trading Infrastructure (01:35:29)\n  * Executing Orders Over TCP (01:35:56)\n  * Market Data Over Multicast (01:38:07)\n  * Lead-Lag Trades (01:40:18)\n  * FPGAs for Accelerating Trading (01:41:49)\n\n    * https://en.wikipedia.org/wiki/Field-programmable_gate_array\n  * Engineering Organization Structure in Trading Firms (01:43:45)\n  * cocotb (01:46:13)\n\n    * https://www.cocotb.org/\n  * Updating Trading Hardware (01:47:05)\n  * Tilera RISC CPU (01:50:45)\n\n    * https://en.wikipedia.org/wiki/Tilera\n    * https://en.wikipedia.org/wiki/TILE64\n  * Propagation Delay (01:54:46)\n\n    * https://en.wikipedia.org/wiki/Signal_propagation_delay\n  * Number of Cycles in an Integer Division (01:55:26)\n\n    * https://en.algorithmica.org/hpc/arithmetic/division/\n  * Hashmap Performance Optimization (01:56:40)\n  * Rising Complexity in Modern Processors (01:58:11)\n  * Microarch Club Episode with Thomas Sohmers (02:01:06)\n\n    * https://microarch.club/episodes/10/\n  * CPU Cache Levels (02:02:34)\n\n    * https://en.wikipedia.org/wiki/CPU_cache\n  * Impact of New Workloads on Microarchitecture (02:03:34)\n  * Groq & LPUs (02:04:00)\n\n    * https://wow.groq.com/lpu-inference-engine/\n    * https://codeconfessions.substack.com/p/groq-lpu-design\n  * Branch Predictor Hints (02:05:11)\n\n    * https://arcb.csc.ncsu.edu/~mueller/cluster/ps3/SDK3.0/docs/accessibility/sdkpt/cbet_3reducbrmis.html\n  * Just in Time (JIT) Compilation (02:05:56)\n\n    * https://en.wikipedia.org/wiki/Just-in-time_compilation\n  * Profile Guided Optimization (PGO) (02:06:16)\n\n    * https://en.wikipedia.org/wiki/Profile-guided_optimization\n  * Tail Latency (02:08:42)\n\n    * https://brooker.co.za/blog/2021/04/19/latency.html\n  * Compiler Explorer Origin Story (02:10:22)\n\n    * https://godbolt.org/\n  * C++ Ranged For Loops (02:11:15)\n\n    * https://en.cppreference.com/w/cpp/language/range-for\n  * tmux (02:14:30)\n\n    * https://github.com/tmux/tmux/wiki\n  * node.js (02:15:13)\n\n    * https://nodejs.org\n  * Read Evaluate Print Loop (REPL) (02:17:43)\n\n    * https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\n  * Remote Code Execution (RCE) (02:19:21)\n\n    * https://en.wikipedia.org/wiki/Arbitrary_code_execution\n  * Hosting on Personal Domain (02:20:30)\n  * Godbolt as a Verb (02:21:01)\n  * Two\u2019s Complement Podcast (02:22:10)\n\n    * https://www.twoscomplement.org/\n  * Ben Rady (02:23:12)\n\n    * https://www.benrady.com/\n  * Getting Feedback on Podcasts (02:25:45)\n  * Podcasts as a Hiring Tool (02:26:52)\n  * Getting a Job via Open Source (02:27:15)\n\n### Transcript\n\nComing soon.\n\n\u00a9 Copyright 2024 Microarch Club\n\n", "frontpage": false}
