{"aid": "40112002", "title": "Changelog-Driven Releases", "url": "https://mathieularose.com/changelog-driven-releases", "domain": "mathieularose.com", "votes": 1, "user": "thunderbong", "posted_at": "2024-04-22 07:00:36", "comments": 0, "source_title": "Changelog-Driven Releases", "source_text": "Changelog-Driven Releases\n\nMathieu Larose Projects Hire Me\n\n# Changelog-Driven Releases\n\nApril 2024\n\nEver released an untested version of your open-source project or forgot to\nupdate the version number? We've all been there. Managing releases for open-\nsource projects can feel like a tedious, error-prone process, especially when\ndone with a mix of manual and automated steps. This article introduces an\napproach that turns your changelog into the ultimate source of truth for\nreleases, making your project's releases fully automated\n\n## Changelog as the Release Source of Truth\n\nImagine a changelog that serves not just as a history, but also functions as a\nsource of truth for releases. This is precisely the approach I adopted for\nutt, an open source project I maintain. The changelog is kept in reverse\nchronological order, with the most recent version at the top. Here's a\nglimpse:\n\n    \n    \n    ## 1.30 (2024-01-17) * Add 'per-task' CSV report type ## 1.29 (2021-01-16) * Show total time in summary section * Remove \"Time\" from summary section ...\n\n### Unreleased Changes\n\nNew changes are added to the changelog in utt with a special (unreleased)\nmarker. This allows grouping multiple changes before publishing them together.\n\nHere's how it works:\n\n    \n    \n    ## (unreleased) * Fix bug X * Enhance feature Y\n\n### Publishing a Release\n\nWhen ready to publish, I simply replace (unreleased) with the desired version\nnumber and date:\n\n    \n    \n    ## 1.31 (2024-04-20) * Fix bug X * Enhance feature Y\n\nMerging this change into the master branch triggers the automated release\nprocess in utt, including running automated tests.\n\n## Implementation\n\nWhile the specific implementation in utt uses Python and GitHub Actions (see\nutt's workflow), the concepts are adaptable to most programming languages and\nCI/CD tools.\n\nThe core workflow involves a script that parses the changelog on push events\nto the master branch. If the latest entry is not (unreleased), the script\nautomatically updates the version number in relevant project files (e.g.,\npyproject.toml, version.txt).\n\nFinally, if the version is not (unreleased), the script attempts to publish\nthe new version to PyPI, if it's not already on PyPI. If the version already\nexists, the script skips the publish step to prevent attempting the same\nversion again.\n\nNeed a search bar for your website? Make it easy for visitors to find what\nthey need with Lixia Search.\n\n\u00a9 Mathieu Larose | Email | LinkedIn | GitHub | Atom\n\n", "frontpage": false}
