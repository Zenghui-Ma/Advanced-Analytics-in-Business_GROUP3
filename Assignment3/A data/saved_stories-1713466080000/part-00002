{"aid": "40075639", "title": "Open-source: Chrome extension to automatically scrape website tables/lists", "url": "https://github.com/rows/X", "domain": "github.com/rows", "votes": 1, "user": "henrique_cruz", "posted_at": "2024-04-18 12:47:12", "comments": 0, "source_title": "GitHub - rows/X: RowsX is a Chrome extension that performs simple web scraping tasks for business users. It loads data from website tables into spreadsheets. Developed by Rows.com.", "source_text": "GitHub - rows/X: RowsX is a Chrome extension that performs simple web scraping\ntasks for business users. It loads data from website tables into spreadsheets.\nDeveloped by Rows.com.\n\nSkip to content\n\nSign in\n\n# Search code, repositories, users, issues, pull requests...\n\nSearch syntax tips\n\nSign in\n\nSign up\n\nYou signed in with another tab or window. Reload to refresh your session. You\nsigned out in another tab or window. Reload to refresh your session. You\nswitched accounts on another tab or window. Reload to refresh your session.\nDismiss alert\n\nrows / X Public\n\n  * Notifications\n  * Fork 3\n  * Star 37\n\nRowsX is a Chrome extension that performs simple web scraping tasks for\nbusiness users. It loads data from website tables into spreadsheets. Developed\nby Rows.com.\n\nchromewebstore.google.com/detail/rowsx/abkccndhocmfdombbpmnhfjidcdcjjeo\n\n### License\n\nMIT license\n\n37 stars 3 forks Branches Tags Activity\n\nStar\n\nNotifications\n\n# rows/X\n\nThis commit does not belong to any branch on this repository, and may belong\nto a fork outside of the repository.\n\n1 Branch\n\n36 Tags\n\n## Folders and files\n\nName| Name| Last commit message| Last commit date  \n---|---|---|---  \n  \n## Latest commit\n\nricardofelgueirasUpdate README.md (#80)Apr 16, 20249ab7f29 \u00b7 Apr 16, 2024Apr\n16, 2024\n\n## History\n\n184 Commits  \n  \n### .github\n\n|\n\n### .github\n\n| ci: change the github actions to run on ubuntu (#77)| Apr 15, 2024  \n  \n### .husky\n\n|\n\n### .husky\n\n| build: add versioning automatization using commitizen and husky (#45)| Feb\n9, 2024  \n  \n### app_icons\n\n|\n\n### app_icons\n\n| chore: add HMR to the plugin| Jan 10, 2024  \n  \n### config\n\n|\n\n### config\n\n| chore: add E2E tests (#20)| Jan 25, 2024  \n  \n### e2e\n\n|\n\n### e2e\n\n| test: add missing e2e tests for htmldivtables, and htmltables (#59)| Feb 19,\n2024  \n  \n### public\n\n|\n\n### public\n\n| chore: add HMR to the plugin| Jan 10, 2024  \n  \n### src\n\n|\n\n### src\n\n| feat(bounty): add empty state when it's a internal chrome page (#79)| Apr\n16, 2024  \n  \n### .editorconfig\n\n|\n\n### .editorconfig\n\n| chore: Add ESLint (#13)| Jan 23, 2024  \n  \n### .eslintrc.cjs\n\n|\n\n### .eslintrc.cjs\n\n| chore: remove code deps (#75)| Apr 16, 2024  \n  \n### .gitignore\n\n|\n\n### .gitignore\n\n| feat: add new scrappers (#57)| Feb 21, 2024  \n  \n### .releaserc\n\n|\n\n### .releaserc\n\n| ci: change the plugins at release.rc file| Feb 9, 2024  \n  \n### CHANGELOG.md\n\n|\n\n### CHANGELOG.md\n\n| chore(release): 1.13.0 [skip ci]| Apr 16, 2024  \n  \n### CODE_OF_CONDUCT.md\n\n|\n\n### CODE_OF_CONDUCT.md\n\n| Add contributing guidelines and code conduct (#73)| Apr 12, 2024  \n  \n### CONTRIBUTING.md\n\n|\n\n### CONTRIBUTING.md\n\n| Add contributing guidelines and code conduct (#73)| Apr 12, 2024  \n  \n### LICENSE\n\n|\n\n### LICENSE\n\n| improvement: add MIT license (#72)| Apr 12, 2024  \n  \n### README.md\n\n|\n\n### README.md\n\n| Update README.md (#80)| Apr 16, 2024  \n  \n### index.html\n\n|\n\n### index.html\n\n| Start produtization| Jan 5, 2024  \n  \n### jest-puppeteer.config.cjs\n\n|\n\n### jest-puppeteer.config.cjs\n\n| feat: add description to the manifest.json (#55)| Feb 12, 2024  \n  \n### jest.config.cjs\n\n|\n\n### jest.config.cjs\n\n| chore: load scrapper yml configurators dynamically (#33)| Jan 30, 2024  \n  \n### manifest.json\n\n|\n\n### manifest.json\n\n| feat: add description to the manifest.json (#55)| Feb 12, 2024  \n  \n### package-lock.json\n\n|\n\n### package-lock.json\n\n| chore(release): 1.13.0 [skip ci]| Apr 16, 2024  \n  \n### package.json\n\n|\n\n### package.json\n\n| chore(release): 1.13.0 [skip ci]| Apr 16, 2024  \n  \n### tsconfig.json\n\n|\n\n### tsconfig.json\n\n| chore: add E2E tests (#20)| Jan 25, 2024  \n  \n### tsconfig.node.json\n\n|\n\n### tsconfig.node.json\n\n| Start produtization| Jan 5, 2024  \n  \n### vite.config.ts\n\n|\n\n### vite.config.ts\n\n| release: 1.0.8 (#25)| Jan 26, 2024  \n  \n## Repository files navigation\n\n# RowsX\n\nRowsX is a Chrome extension that performs simple web scraping tasks for\nbusiness users. It was built to help users load data from websites with HTML\ntables into spreadsheets, and is developed by Rows.com.\n\nDemo video \u00b7 Install extension from the Chrome Web Store \u00b7 X \u00b7 LinkedIn \u00b7\nDiscord\n\n## About Rows\n\nRows is a modern spreadsheet. It is the easiest way to import, transform and\nshare data in a spreadsheet.\n\n## Why Open-source RowsX?\n\nWe're opening RowsX to the community and invite everyone to contribute with\nnew features, support to new websites or new ideas to improve it.\n\nRowsX was born during a team hackathon in January of 2024. We built it to\nsolve a problem we see our customers struggle with everyday: getting data from\nthe web to a spreadsheet. The Rows platform lets you import data from files,\nvia Integrations with APIs and SaaS services, and conectors on 3rd party\nplatforms that call our Rows API. RowsX extends the importing options to the\nBrowser! Since launching it, more than two thousand people have used it to\nimport lists of data from countless sites, internal tools and back office\nsystems.\n\n## Open Bounties Program\n\nJoin our Open Bounties Program and get rewarded for enhancing the extension!\n\nCurrent Open Bounties:\n\n  * Port extension to Safari: $250\n  * Support parsing tables in PDFs: $150. Example.\n  * Improve Help state. $100. a) Replace the \"Talk to Us\" action with a submission to a Rows spreasdheet. If website doesn't have a matching table, have a button called report. This button inserts a line into a Rows spreadsheet with a compatible UTC datetime, url, domain, browser, browser version, and report type (\"no table detected\"). Check the Rows API. b) If there is at least one table detected, still on every screen show a \"report\" text link, at the top in a light gray button next to the closing x with Report. This report shows 3 radio options. \"table not detected\", \"table broken\", \"something else: <30 chars>\".\n\nTo ensure quality and alignment with our goals, features are only eligible for\na bounty once they are approved by our team and made publicly available. If\nyou have submitted code to solve one of the bounties, let us know at\nsecurity@rows.com.\n\nNote: RowsX is a tool for business people to use that translates what they see\ninto a spreadsheet. Atm we don't aim to build a fully automated scrapper\nplatform that operates beyond the actions of the user and what the user can\nsee.\n\n## Get Started\n\nTo start, you'll need to install the project on your local machine. This\nrequires Node.js to be installed on your system. Once you've cloned the\nrepository, execute the following command in your terminal to install the\nproject's dependencies:\n\n    \n    \n    npm i\n\nOnce you've installed the project's dependencies, you can initiate development\nmode by running the following command in your terminal:\n\n    \n    \n    npm run dev\n\nOnce your development environment is set up, follow these steps to start using\nour Chrome extension on your machine:\n\nNote\n\nYou need to do this just one time.\n\n  1. Open the Chrome extensions page at chrome://extensions.\n  2. In the top right corner, you have a switch called \"Developer Mode\". Just activate it.\n  3. Click the \"Load unpacked\" button.\n  4. Select the directory containing your extension project. For example ~/repos/rows/x/dist.\n  5. Your extension should now be loaded and running in development mode.\n  6. Pin the extension to reach it easily \ud83d\ude03\n  7. You can make changes to your extension files, and they will automatically be reflected in the browser.\n\n## How to add a new scrapper?\n\nThere are 2 different ways of building a custom scrapper:\n\n  1. The data is loaded from a list\n\n    \n    \n    { header: 'ProductHunt results', listElementsQuery: '<CSS selector to find all elements for a list>', elementParser: [ //... { title: 'Product image', query: '<CSS selector that will find an image on each element>', type: 'image' }, { title: 'Product name', query: '<CSS selector that will find the desired text>', type: 'text' }, //... ] }\n\nIn this configuration the only thing that changes is the type, and it could be\nof different types:\n\n  * image, it will extract the src link of the image and will be used as =IMAGE(\"<img link>\") on cells\n  * text will extract all the text of the element\n  * clean-url will get the src without query parameters, this is helpful in sites like LinkedIn.\n  * link it will return the href src\n  * get-attribute, is the most exotic one, because it will get the HTML value of a specific attribute because some elements have descriptions as aria-label. For example, G2.com has data for lazy loading, and the real image source is at the attribute data-deferred-image-src, for that scenario we need to use this parameter like this { title: 'Logo', query: '[class*=\"product-listing__img\"] > img', type: 'get-attribute', attribute: 'data-deferred-image-src' },.\n\n  2. The data is loaded from a DIV table (not the conventional HTML table) - There is an example of a configuration for those scenarios:\n\n    \n    \n    parseTables: { header: \"Custom div parser\", // <- title that will presented on RowsX UI. tables: [ { rows: '<CSS selector to find all rows>', cols: '<CSS selector to find all cols>' }, { rows: '<CSS selector to find all rows>', cols: '<CSS selector to find all cols>' }, ], mergeTablesBy: 'row' // <- it will merge the tables by row or by column this is optional }\n\nTip\n\nThe mergeTablesBy property defines the strategy for combining multiple tables\ninto a single dataset. This parameter is optional and could be set as row,\nwhich means that tables will be merged by rows, resulting in a single table\nwith all rows combined. If set to column, tables will be merged by columns,\nresulting in a single table with all columns combined.\n\n### When use .example and [class*=\"example\"]\n\n.example and [class*=\"example\"] are both CSS selectors that can be used to\nselect elements in an HTML document. However, they have different purposes and\nshould be used in different situations.\n\n  * The selector .example selects all elements that have the class example. This is a simple way to select elements with a specific class.\n  * The selector [class*=\"example\"] selects all elements that have the word example as a part of their class name. This selector is more versatile than .example, because it allows you to select elements that have a class name that starts with example, ends with example, or has example anywhere in the middle.\n\nTip\n\nThe last selector ([class*=\"example\"]) is more versatile but could lead to\nundesirable results, so use it with caution!\n\n#### Example of different selectors' usage\n\nFor example, if I want to extract the element title from an item at\nidealista.pt we could use the following configuration:\n\n    \n    \n    { title: 'Description', query: '.item-link', type: 'get-attribute', attribute: 'title' }\n\nIf I want to identify the list of elements that I want to extract information\nI can use\n\n    \n    \n    { listElementsQuery: '[data-test*=\"post-item-\"]'; }\n\n## How does this work with the Rows? \ud83e\udd14\n\nIn the following image, you can see how it works and each step will have a\nbetter explanation:\n\n  1. User Initiates Action - The user clicks on the rowsX icon on their browser, prompting the extension to take action. This action triggers the opening of the RowsX UI, which is the main interface for interacting with the extension.\n  2. The RowsX UI is displayed and Event Trigger - Initially, the RowsX UI displays an empty state component, indicating that no data has been extracted. This signifies the extension is ready to start extracting data from the current web page. And after rendering everything it will trigger the rows-x:scrap event.\n  3. Background Script Activation - Upon displaying the empty state component, the RowsX UI emits an event named rows-x:scrap. This event will be listened to by the service worker who is running in the background.js script, which is responsible for handling background tasks and communication with the extension's popup window.\n  4. Data Extraction Process - The background.js script receives the rows-x:scrap event and starts the data extraction process. It first attempts to identify a suitable scraper based on the URL of the current web page. If a matching scraper is found, it utilizes that scraper to extract the relevant data from the page. If no matching scraper is found, the script falls back to extracting data directly from HTML tables on the page.\n  5. Transmitting Extracted Data - Upon completing data extraction, the service worker sends the extracted data to the RowsX UI as JSON. The JSON response follows a structured format that the UI can readily parse and display.\n\n    \n    \n    [ ..., { \"title\": \"Best Amazon products\", \"table\": [ [\"header_1\", \"header_2\", \"header_3\"], [\"cell_1\", \"cell_2\", \"cell_3\"], [\"cell_4\", \"cell_5\", \"cell_8\"], [\"cell_7\", \"cell_8\", \"cell_9\"], ] } ... ]\n\n  6. Sharing Extracted Data with Rows App - When the user clicks on the \"Open in Rows\" button, it initiates the transfer of extracted data to the Rows app. This triggers an event named rows_x:store, which signals the service worker to convert the extracted data into a TSV format. The converted data is then packaged and prepared for transfer to the Rows app.\n  7. Injecting Data into Rows App - Once the data is prepared, the service worker opens a new tab and navigates to the Rows app's URL, https://rows.com/new. The background.js will inject the prepared TSV data into the LocalStorage of the Rows app. This allows the Rows app to access and utilize the extracted data directly, enabling the user to further manipulate and analyze the data within the Rows app environment. The data will be stored under the key rows_x and will follow the following structure:\n\n    \n    \n    { \"source\": \"%ROWS_X%\", \"data\": \"header_1\\theader_2\\theader_3\\ncell_1\\t...\" }\n\n  8. The app renders and will look for the value of rows_x at LocalStorage, if there is any data it will load the info to the clipboard\n  9. After that the app will trigger a paste event that will load the TSV into a new Table.\n  10. The user sees the scrapped information in Table 1 of a new Page.\n\n## Contributions\n\nContributions to RowsX are welcome! If you have issues or suggestions for\nimproving the extension, please feel free to open an issue or submit a pull\nrequest on the GitHub repository.\n\nHappy scrapping with RowsX!\n\n## About\n\nRowsX is a Chrome extension that performs simple web scraping tasks for\nbusiness users. It loads data from website tables into spreadsheets. Developed\nby Rows.com.\n\nchromewebstore.google.com/detail/rowsx/abkccndhocmfdombbpmnhfjidcdcjjeo\n\n### Topics\n\nchrome-extension html productivity data scraper web browser-extension\n\n### Resources\n\nReadme\n\n### License\n\nMIT license\n\n### Code of conduct\n\nCode of conduct\n\nActivity\n\nCustom properties\n\n### Stars\n\n37 stars\n\n### Watchers\n\n4 watching\n\n### Forks\n\n3 forks\n\nReport repository\n\n## Releases 2\n\nCI working Latest\n\nFeb 9, 2024\n\n\\+ 1 release\n\n## Contributors 11\n\n## Languages\n\n  * HTML 99.2%\n  * Other 0.8%\n\n## Footer\n\n\u00a9 2024 GitHub, Inc.\n\nYou can\u2019t perform that action at this time.\n\n", "frontpage": false}
