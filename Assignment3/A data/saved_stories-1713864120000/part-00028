{"aid": "40127031", "title": "Port Forward Transition from SPDY to WebSockets in Kubernetes 1.30", "url": "https://kftray.app/blog/posts/4-kubernetes-spdy-to-websockets-kep/", "domain": "kftray.app", "votes": 1, "user": "hcavarsan", "posted_at": "2024-04-23 00:05:22", "comments": 0, "source_title": "Port Forward Transition from SPDY to WebSockets in Kubernetes 1.30", "source_text": "Port Forward Transition from SPDY to WebSockets in Kubernetes 1.30 \u00b7 kftray\n\nRelease v0.9.7A new version of kftray has been released.Check it out \u2192\n\nBack to overview\n\nPublished on 22.4.2024\n\n# Port Forward Transition from SPDY to WebSockets in Kubernetes 1.30\n\nHenrique Cavarsan\n\nMaintainer\n\n## Introduction\n\nOne of the changes in the latest Kubernetes version, 1.30 (Uwubnetes) is the\ntransition from SPDY to websocket for some of the kubectl commands. Most of\nthe updates get most of the attention, but this is no less important.\n\n## Understanding SPDY:\n\nGoogle created SPDY to improve HTTP by speeding up webpage load times and\nenhancing security with a session layer. It allowed multiple data streams to\nbe sent simultaneously, prioritized request values, and optimized\ncommunication by compressing headers. However, SPDY was deprecated in 2016 and\nreplaced by HTTP/2, which is more advanced. Therefore, for technologies like\nKubernetes that require better and standards communication methods, SPDY is no\nlonger relevant.\n\n## Why WebSockets?\n\nWebSockets use a bidirectional communication protocol over a single TCP\nconnection, widely supported in web servers, proxies, and network gateways.\nThis increases compatibility and communication performance for kubectl\ncommands. Here are some points about WebSockets:\n\n  * WebSockets allow for full-duplex communication, so it's very efficient to send and receive data. It requires no multiple connections, that would require handshakes.\n  * This technology reduces overhead and allows for high-speed data exchanges, which is especially interesting for Kubernetes-related tasks.\n  * WebSockets are protocol-independent so they may be used for communication over any full-duplex single-connection protocol, which will reduce latency and help in real-time command execution.\n  * WebSockets keep a persistent connection and thus use resources more efficiently and cut the number of TCP connections used, in turn reducing the amount of network overhead.\n  * The use of WebSockets fix issues that older protocols like SPDY had, and it's more compatible with modern web technologies.\n\nThe migration from SPDY to WebSockets in Kubernetes makes it much easier to\ncommunicate control messages, which will allow for better cluster management\nand stability.\n\n## Kep 4006\n\nThe SPDY protocol was deprecated in 2016. In 2023, a proposal was opened in\nthe Kubernetes community to change the protocol for commands like port-\nforward, attach, exec, and portforward that use upgraded connections.\n\nLink to proposalLink to issue\n\n### Implementation Overview:\n\nWebSocket support in Kubernetes and kubectl starts with an HTTP handshake that\nupgrades the connection to a WebSocket, like as the SPDY. The WebSocket\nframing method provides improved technique for data framing for streams such\nas stdin, stdout, and stderr through framing with a channel identifier. This\nis an extension of the technique once used by SPDY through binary data\nframing.\n\nAs a fallback mechanism in case WebSocket support is not available on the\nserver, a fallback to SPDY is utilized. The initial performance assessments\ndemonstrated that WebSocket is as efficient as, or even a little better than,\nSPDY for standard kubectl operations, and continuing performance testing is\nintended to better performance across multiple use cases. There are many\nimplications from this transition, including greater network compatibility in\nsettings where strong proxy and firewall policies are in place, and better\nintegration with external tools.\n\n### API server changes:\n\nThe API server now supports the WebSocket protocol by replacing SPDY with\nexplicit headers to enable bidirectional streams. Additionally, the\nStreamTranslatorProxy has been added to help create WebSocket connections from\nclients to internal SPDY connections in Kubernetes.\n\nThe management of WebSocket frames is critical, especially for the occasional\nuse of the ping/pong frames to keep the WebSocket connection alive. This\nfeature was first introduced in an alpha version that one could use through\nthe feature gate for port forwarding Websockets within the API server and a\ncorresponding flag in kubectl.\n\n### Client (kubectl) Changes:\n\nOn the client side, it added an upgrade to WebSocket for port forwarding,\nalong with signing, response processing, and data serialization and\ndeserialization over the WebSocket. This gives the user the ability to enable\nWebSocket port forwarding through environment variables. To make this\ntransition easy, kubectl has also introduced mechanisms to handle errors and\nreliability, with error handling during its alpha and beta phases, along with\na fallback to SPDY in case the WebSocket connection fails to ensure that\nservice continuity is not lost.\n\n## Websockets in kubectl port-forward with Kind\n\n### Setup Env\n\nBefore creating my environment, Docker, Kind, and Go have to be installed on\nthe machine. All of these are needed for developing and deploying our\nKubernetes cluster on our local machines. Let's set up the environment with\nKubernetes 1.30.\n\nLet's start by setting up the necessary environment variables and\ndependencies:\n\n    \n    \n    # Set Go environment variables export GOPATH=$HOME/go export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin:$GOPATH/bin # Create a directory for Kubernetes source mkdir -p $GOPATH/src/k8s.io cd $GOPATH/src/k8s.io # Clone the Kubernetes repository git clone https://github.com/kubernetes/kubernetes.git cd kubernetes\n\n#### Install Dependencies on Mac M1\n\nFor those uses Mac with an M1 chip:\n\n    \n    \n    brew install bash brew install gnu-tar\n\n### Building the kubernetes and kubectl 1.30 image\n\nTo build the images and kubectl, we need to have Go 1.22 or later. Then,\nexecute some commands:\n\n    \n    \n    # Checkout to the Kubernetes 1.30 release git checkout release-1.30 # Build a node image using Kind kind build node-image # Build the kubectl in this version make kubectl KUBE_BUILD_PLATFORMS=darwin/arm64 # kubectl artifact output path : $GOPATH/kubernetes/_output/dockerized/bin/darwin/arm64/kubectl chmod +x $GOPATH/kubernetes/_output/dockerized/bin/darwin/arm64/kubectl\n\n### Kind Cluster Configs\n\nFirst, set up the kind cluster with 1.30 images by creating a config.yaml file\nwith featureGates PortForwardWebsockets enabled:\n\n    \n    \n    kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 featureGates: \"PortForwardWebsockets\": true nodes: - role: control-plane image: kindest/node:latest - role: worker image: kindest/node:latest - role: worker image: kindest/node:latest\n\n### Create the cluster\n\nWhen you have your configuration file set up you can add the cluster with the\nfollowing command:\n\n    \n    \n    # Change default kubeconfig path to have only with kind test cluster export KUBECONFIG=~/.kube/kind-kind kind create cluster --name kind-1-30 --config config.yaml\n\n### Deploy a sample app\n\nYou can test your new WebSocket capability by deploying a simple application\nand using the cluster to connect by port forwarding:\n\n    \n    \n    git clone https://github.com/digitalocean/kubernetes-sample-apps.git cd kubernetes-sample-apps kubectl apply -k bookinfo-example/kustomize\n\n### Forward the Port Using WebSockets\n\nEnable the WebSocket port forwarding :\n\n    \n    \n    export KUBECTL_PORT_FORWARD_WEBSOCKETS=\"true\" $GOPATH/kubernetes/_output/dockerized/bin/darwin/arm64/kubectl -v6 port-forward svc/productpage -n bookinfo 9080:9080\n\nNow, open http://localhost:9080/ in your browser. You should get responses\nfrom the echoserver.\n\n### Verifying WebSocket Port Forwarding\n\nTo confirm if WebSocket port forwarding is active, review the kubectl logs:\n\nThis is the log with SDPY (default):\n\n    \n    \n    I0422 17:32:50.963059 11299 round_trippers.go:466] curl -v -XPOST -H \"X-Stream-Protocol-Version: portforward.k8s.io\" -H \"User-Agent: kubectl/v1.31.0 (darwin/arm64) kubernetes/cae35db\" 'https://192.168.68.109:6443/api/v1/namespaces/bookinfo/pods/productpage-v1-64c658687d-5bhsg/portforward' I0422 17:32:50.965663 11299 round_trippers.go:510] HTTP Trace: Dial to tcp:192.168.68.109:6443 succeed I0422 17:32:50.978422 11299 round_trippers.go:553] POST https://192.168.68.109:6443/api/v1/namespaces/bookinfo/pods/productpage-v1-64c658687d-5bhsg/portforward 101 Switching Protocols in 15 milliseconds I0422 17:32:50.978440 11299 round_trippers.go:570] HTTP Statistics: DNSLookup 0 ms Dial 2 ms TLSHandshake 0 ms Duration 15 ms I0422 17:32:50.978444 11299 round_trippers.go:577] Response Headers: I0422 17:32:50.978448 11299 round_trippers.go:580] Upgrade: SPDY/3.1 I0422 17:32:50.978450 11299 round_trippers.go:580] X-Stream-Protocol-Version: portforward.k8s.io I0422 17:32:50.978453 11299 round_trippers.go:580] Connection: Upgrade\n\nThis is the logs with Websocket enabled:\n\n    \n    \n    17:29:21.504179 7561 tunneling_dialer.go:75] Before WebSocket Upgrade Connection... I0422 17:29:21.504194 7561 round_trippers.go:466] curl -v -XGET -H \"Sec-Websocket-Protocol: SPDY/3.1+portforward.k8s.io\" -H \"User-Agent: kubectl/v1.31.0 (darwin/arm64) kubernetes/cae35db\" 'https://192.168.68.109:6443/api/v1/namespaces/bookinfo/pods/productpage-v1-64c658687d-5bhsg/portforward' I0422 17:29:21.506351 7561 round_trippers.go:510] HTTP Trace: Dial to tcp:192.168.68.109:6443 succeed I0422 17:29:21.519936 7561 round_trippers.go:553] GET https://192.168.68.109:6443/api/v1/namespaces/bookinfo/pods/productpage-v1-64c658687d-5bhsg/portforward 101 Switching Protocols in 15 milliseconds I0422 17:29:21.519954 7561 round_trippers.go:570] HTTP Statistics: DNSLookup 0 ms Dial 2 ms TLSHandshake 4 ms ServerProcessing 8 ms Duration 15 ms I0422 17:29:21.519958 7561 round_trippers.go:577] Response Headers: I0422 17:29:21.519962 7561 round_trippers.go:580] Sec-Websocket-Accept: +AqmlgtoGPP/Rlfw6oAZMCN34SY= I0422 17:29:21.519964 7561 round_trippers.go:580] Sec-Websocket-Protocol: SPDY/3.1+portforward.k8s.io I0422 17:29:21.519966 7561 round_trippers.go:580] Upgrade: websocket I0422 17:29:21.519968 7561 round_trippers.go:580] Connection: Upgrade I0422 17:29:21.519973 7561 tunneling_dialer.go:85] negotiated protocol: portforward.k8s.io\n\nThe logs show that the protocol upgrade to SPDY via WebSocket was successful\nin Kubernetes 1.30\n\n## KEP Roadmap Port Forward over Websockets\n\nAlpha Release (Kubernetes 1.30):\n\nWebSocket support added. Feature enabled via the\nKUBECTL_PORT_FORWARD_WEBSOCKETS=true env var on the client side and\nPortForwardWebsockets alpha feature flag should be enabled on the API Server,.\n\nFocus in the alpha phase would be testing from all perspectives, user\nfeedback, and updating developer and user documentation for this alpha\nfeature.\n\nBeta Release(Target 1.31):\n\nMore extensive testing for performance fine-tuning, user feedback, and updated\ndocumentation, the documentation will be updated regularly with the changes\nduring the beta phase improvements.\n\nUser community feedback will be the basis in making the feature stable and\nusable.\n\nStable Release (Target 1.32):\n\nEnsure WebSocket support transitions from beta to stable with alpha feature\nflags removed and publish a deprecation notice to officially mark the\ntransition away from SPDY-based port forwarding.\n\n## KEP Roadmap RemoteCommand over websockets (exec, cp, attach)\n\nBeta release (Kubernetes 1.30):\n\nWebSocket for RemoteCommand (exec, cp, attach) will be on by default. The\nfeature gates to the client and server are expected to ensure that the SPDY\nreplacement has as little impact on the user as possible.\n\nThe biggest emphasis here is on making the changes transparent to the user\nand, for those who are wary of this new implementation, will always have the\nchoice to disable it.\n\nPath to Stability:\n\nPost 1.30 and leading up to the 1.32 release, the focus will be on refinement\nin WebSocket functionality, all aimed at reaching zero known critical bugs.\n\n## Conclusion\n\nAnd thats all, folks. This hopefully explains the important protocol\ncommunication change in Kubernetes. I've had too many issues due to SPDY and\nlack of compatibility with new load balancers, proxies, etc., which was so\ncomplicated that I found myself at work. Now I see this migration from SPDY to\nWebSockets, so I'm a bit excited.\n\nLooking forward, I'll let you know if there are any updates about this KEP\n\nAlso, maybe there'll be errors or misinformation in this post; I'm just human\nafter all. Feel free to let me know if you find anything off on social media\nor post a comment here at the blog. Thanks!\n\n###### Comments\n\nPowered by Docus\n\n", "frontpage": false}
