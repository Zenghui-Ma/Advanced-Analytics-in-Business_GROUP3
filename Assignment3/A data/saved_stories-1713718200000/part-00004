{"aid": "40103307", "title": "What the original 4.2 BSD csh hashed (which is not what I thought)", "url": "https://utcc.utoronto.ca/~cks/space/blog/unix/CshWhatItHashed", "domain": "utcc.utoronto.ca", "votes": 2, "user": "ingve", "posted_at": "2024-04-21 05:07:25", "comments": 0, "source_title": "Chris's Wiki :: blog/unix/CshWhatItHashed", "source_text": "Chris's Wiki :: blog/unix/CshWhatItHashed\n\nChris Siebenmann :: CSpace \u00bb blog \u00bb unix \u00bb CshWhatItHashed\n\nWelcome, guest.\n\n## What the original 4.2 BSD csh hashed (which is not what I thought)\n\nApril 20, 2024\n\nRecently, Unix shells keeping track of where they'd found commands came up on\nthe Fediverse again, as it does every so often; for instance, last year I\nadvocated for doing away with the whole thing. As far as I know, (Unix) shell\ncommand hashing originated with BSD Unix's csh. which added command hashing\nand a 'rehash' builtin. However, if you actually read the 4.2 BSD csh(1)\nmanual page, it says something a bit odd (emphasis mine):\n\n> rehash: Causes the internal hash table of the contents of the directories in\n> the path variable to be recomputed. This is needed if new commands are added\n> to directories in the path while you are logged in. [...]\n\nThe way command hashing typically works in modern shells is that the shell\nremembers the specific full path to a given command (or sometimes that the\ncommand doesn't exist). This is explicitly described in the Bash manual, which\nsays (for example) 'Bash uses a hash table to remember the full pathnames of\nexecutable files'. In this case, if you or someone else adds a new command to\nsomething in $PATH and you've never run that command before (because it didn't\nused to exist), you're fine and don't need to rehash; your shell will\nautomatically go looking for a new command in $PATH.\n\nIt turns out that the 4.2 BSD csh did not hash commands this way. Instead,\nwell, let's quote a comment from sh.exec.c:\n\n> Xhash is an array of HSHSIZ chars, which are used to hash execs. If it is\n> allocated, then to tell whether ``name'' is (possibly) present in the i'th\n> component of the variable path, you look at the i'th bit of\n> xhash[hash(\"name\")]. This is setup automatically after .login is executed,\n> and recomputed whenever ``path'' is changed.\n\nTo translate that, csh does not 'hash' where commands are found the way modern\nshells do. Instead of looking up commands and then remembering where it found\nthem, it scans all of the directories on your $PATH and remembers the hash\nvalues of the names it saw in each of them. When csh tries to run a command,\nit gets the hash value of the command name, looks it up in the hash table, and\nskips all $PATH entries that hash value definitely isn't in. If you run a\nnewly added command, the odds are very low that its name will hash to a hash\nvalue that has the right bit set in its hash table entry.\n\nThere can be hash value collisions between different command names and if you\nhave more than 8 $PATH entries, more than one entry can set the same bit, so\nfinding a set bit merely means that potentially the command is there. So this\nis not as good as remembering exactly where the command is, but on the other\nhand it takes up a lot less memory; the default csh hash size is 511 bytes. It\nalso means that you definitely want to do 'rehash' when you or someone else\nmodifies any directory on your $PATH, because the odds are very high that any\nnew additions won't be properly recognized.\n\n(What 'rehash' does is that it re-runs the code that sets up this hash table,\nwhich is also run when $PATH is changed and so on.)\n\nWritten on 20 April 2024.\n\n| \u00ab| Modern Linux mounts a lot of different types of virtual filesystems  \n---|---  \n  \nThese are my WanderingThoughts (About the blog)\n\nFull index of entries Recent comments\n\nThis is part of CSpace, and is written by ChrisSiebenmann. Mastodon: @cks\nTwitter @thatcks\n\n* * *\n\nCategories: links, linux, programming, python, snark, solaris, spam, sysadmin,\ntech, unix, web Also: (Sub)topics\n\nThis is a DWiki. GettingAround (Help)\n\nPage tools: View Source, Add Comment.\n\nAtom Syndication: Recent Comments.\n\nLast modified: Sat Apr 20 23:38:07 2024 This dinky wiki is brought to you by\nthe Insane Hackers Guild, Python sub-branch.\n\n", "frontpage": false}
