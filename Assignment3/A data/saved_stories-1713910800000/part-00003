{"aid": "40133700", "title": "Noisy: The Class You Wrote a Hundred Times", "url": "https://vzalzal.com/posts/noisy-the-class-you-wrote-a-hundred-times/", "domain": "vzalzal.com", "votes": 1, "user": "ingve", "posted_at": "2024-04-23 16:18:55", "comments": 0, "source_title": "Noisy: The Class You Wrote a Hundred Times", "source_text": "Noisy: The Class You Wrote a Hundred Times | vzalzal's coding blog\n\n# Noisy: The Class You Wrote a Hundred Times\n\nApril 21, 2024 \u00b7 2 min\n\nYou have probably written a class that prints a message in all its special\nmember functions. And like me, you probably wrote it multiple times. I decided\nto write it well once and for all, and share it.\n\n## Context#\n\nRecently, I was writing some code involving structured bindings and I was\nunsure whether it would incur unintended copy or move operations. As usual,\nwhen I am in this situation, I open up Compiler Explorer and test it. For the\nnth time, I ended up coding a class like this one:\n\n    \n    \n    struct S { S() { std::cout << \"ctor\\n\"; } ~S() { std::cout << \"dtor\\n\"; } // ... and so on with copy and move operations }\n\nI don\u2019t know how many times I wrote this class! I thought maybe it was time I\nwrite it well, once and for all, and then reuse it when I need it. And then, I\nthought that I am probably not the only one having written that class over and\nover again, am I? Maybe this could be useful to others.\n\n## Noisy#\n\nSo I decided to upload it to GitHub. Here it is:\nhttps://github.com/VincentZalzal/noisy. I hope it can be useful to you too!\n\nIf you are a user of Compiler Explorer, know that you can directly include a\nfile via URL, which is pretty handy in this case.\n\n    \n    \n    #include <https://raw.githubusercontent.com/VincentZalzal/noisy/main/noisy.h>\n\nvz::Noisy prints a message for each call to a special member function. As a\nbonus, at the end of the program, it also prints a summary of the number of\ncalls for each member function. For example, running the following program:\n\n    \n    \n    vz::Noisy make_noisy() { return {}; } int main() { vz::Noisy x = std::move(make_noisy()); }\n\nwould print:\n\n    \n    \n    Noisy( 0): default constructor Noisy( 1): move constructor from Noisy( 0) Noisy( 0): destructor Noisy( 1): destructor ===== Noisy counters ===== Default constructor count: 1 Move constructor count: 1 Destructor count: 2\n\n## Other use cases#\n\nWhile the main use case is code exploration, you can also use vz::Noisy for\ntesting purposes. The counters can be queried instead of being printed to\nscreen. For example, you could ensure a custom container does not leak objects\nor make unintended copies.\n\nYou can also use it to compare the number of calls to special member functions\nperformed by two different algorithms, like std::sort and std::stable_sort.\n\n## Conclusion#\n\nYou will find more details on how to use vz::Noisy in the README file. Do not\nhesitate to share your thoughts!\n\n  * utility\n\n\u00a9 2024 vzalzal's coding blog Powered by Hugo & PaperMod\n\n", "frontpage": false}
