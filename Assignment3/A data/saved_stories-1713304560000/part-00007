{"aid": "40052879", "title": "TFCat: JSON Implementation of Time-Frequency Radio Catalogues", "url": "https://gitlab.obspm.fr/maser/catalogues/catalogue-format/-/blob/master/json/spec.md", "domain": "obspm.fr", "votes": 1, "user": "teleforce", "posted_at": "2024-04-16 15:02:49", "comments": 0, "source_title": "json/spec.md \u00b7 master \u00b7 MASER / Catalogues / Catalogue Format \u00b7 GitLab", "source_text": "json/spec.md \u00b7 master \u00b7 MASER / Catalogues / Catalogue Format \u00b7 GitLab\n\nSkip to content\n\nSnippets Groups Projects\n\nSelect Git revision\n\n  * Branches 2\n  * add-schema\n  * master default protected\n\n  * Tags 3\n  * v1.0\n  * v1.0-rc3\n  * v1.0-rc2\n\n5 results\n\n  * catalogue-format\n  * json\n  * spec.md\n\nFind file Blame History Permalink\n\n  * Fix example \u00b7 2dd4501d\n\nCecconi Baptiste authored 1 year ago\n\n2dd4501d\n\nspec.md 26.66 KiB\n\n  *     * Edit single file Edit this file only.\n\n# JSON Implementation of Time-Frequency Radio Catalogues: TFCat\n\n  * Authors: Cecconi, Baptiste (1); Taylor, Mark (2); Bonnin, Xavier (1); Loh, Alan (1).\n  * Affiliations: (1) LESIA, CNRS, Observatoire de Paris-PSL, France; (2) H H Wills Physics Laboratory, University of Bristol, Bristol, UK.\n  * Date: Sep. 2022\n  * Version: 1.0\n  * Publisher: PADC\n  * DOI: 10.25935/6068-8528\n\nTFCat (Time-Frequency Catalogue) is a data interchange format based on JSON.\nIt defines several types of JSON objects and the manner in which they are\ncombined to represent data about time-frequency features of a time spectrogram\n(a.k.a. dynamic spectrum), their properties, and their temporal and spectral\nextents.\n\nThis implementation is inheriting from the GeoJSON file format [RFC7946].\n\n## 1\\. Introduction\n\nTFCat is a format for encoding a variety of spectro-temporal data structures\nusing JavaScript Object Notation (JSON) [RFC7159]. The representation space of\nthe structures is the time-frequency plane. We will use \"tf-plane\", \"tf-\nspace\", \"tf-spatial\" and \"tf-spatially\" terms to refer to this time-frequency\nspace. the TFCat format is following most of the GeoJSON specification\n[rfc7946]. All spatial information described in the GeoJSON specification are\napplicable, after transposition into the time-frequency plane space.\n\nA TFCat object may represent a region of the tf-space (a Geometry), a tf-\nspatially bounded entity (a Feature), or a list of Features (a\nFeatureCollection). TFCat supports the same geometry types as GeoJSON: Point,\nLineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, and\nGeometryCollection. Features in TFCat contain a Geometry object and additional\nproperties, and a FeatureCollection contains a list of Features. The TFCat\nobject contains a list of fields defining the properties listed in the\nFeatures, and a coordinate reference system (CRS) describing the temporal and\nspectral axes of the geometry data.\n\n### 1.1. Requirements Language\n\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\",\n\"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\ndocument are to be interpreted as described in [RFC2119].\n\n### 1.2. Conventions Used in This Document\n\nThe ordering of the members of any JSON object defined in this document MUST\nbe considered irrelevant, as specified by [RFC7159].\n\nSome examples use the combination of a JavaScript single-line comment (//)\nfollowed by an ellipsis (...) as placeholder notation for content deemed\nirrelevant by the authors. These placeholders must of course be deleted or\notherwise replaced, before attempting to validate the corresponding JSON code\nexample.\n\nWhitespace is used in the examples inside this document to help illustrate the\ndata structures, but it is not required. Unquoted whitespace is not\nsignificant in JSON.\n\n### 1.3. Definitions\n\nThe definitions of section 1.3 of [rfc7946] are applicable here, replacing the\n\"GeoJSON\" string by \"TFCat\". We recall them below.\n\n  * JavaScript Object Notation (JSON), and the terms object, member, name, value, array, number, true, false, and null, are to be interpreted as defined in [RFC7159].\n  * Inside this document, the term \"geometry type\" refers to seven case-sensitive strings: \"Point\", \"MultiPoint\", \"LineString\", \"MultiLineString\", \"Polygon\", \"MultiPolygon\", and \"GeometryCollection\"\n  * As another shorthand notation, the term \"TFCat types\" refers to nine case-sensitive strings: \"Feature\", \"FeatureCollection\", and the geometry types listed above.\n  * The word \"Collection\" in \"FeatureCollection\" and \"GeometryCollection\" does not have any significance for the semantics of array members. The \"features\" and \"geometries\" members, respectively, of these objects are standard ordered JSON arrays, not unordered sets.\n\n### 1.4. Example\n\nA TFCat FeatureCollection:\n\n    \n    \n    { \"type\": \"FeatureCollection\", \"features\": [ { \"type\": \"Feature\", \"id\": 0, \"geometry\": { \"type\": \"Point\", \"coordinates\": [1158051858, 24730.0] }, \"properties\": { \"quality\": \"3\" } }, { \"type\": \"Feature\", \"id\": 1, \"geometry\": { \"type\": \"LineString\", \"coordinates\": [[1158051874, 34130.0], [1158051882, 22770.0]] }, \"properties\": { \"quality\": \"2\" } } ], \"properties\": { \"facility_name\": \"Cassini\", \"instrument_name\": \"RPWS\", \"receiver_name\": \"HFR\", \"title\": \"Faraday Rotation (FR) patches\" }, \"fields\": { \"quality\": { \"info\": \"Quality parameter: -1 (not set), 1 (good), 2 (medium) and 3 (bad quality).\", \"datatype\": \"str\", \"ucd\": \"meta.code.qual\" } }, \"crs\": { \"type\": \"local\", \"properties\": { \"time_coords_id\": \"unix\", \"spectral_coords\": { \"type\": \"frequency\", \"unit\": \"kHz\" }, \"ref_position_id\": \"cassini-orbiter\" } } }\n\n## 2\\. TFCat Text\n\n", "frontpage": false}
